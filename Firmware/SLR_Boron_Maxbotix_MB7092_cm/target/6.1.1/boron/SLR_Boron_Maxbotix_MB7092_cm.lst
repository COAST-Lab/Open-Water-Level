
c:/Users/18043/Documents/GitHub/Open-Water-Level-Clone/Firmware/SLR_Boron_Maxbotix_MB7092_cm/target/6.1.1/boron/SLR_Boron_Maxbotix_MB7092_cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006340  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba35c  000ba35c  0000a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000078  2003dd40  000ba380  0000dd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a44  2003ddb8  2003ddb8  0001ddb8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000ba3f8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000ba3fc  000ba3fc  0001a3fc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000ba402  000ba402  0001a402  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000ba426  000ba426  0001a426  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00233029  00000000  00000000  0001a42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001ec10  00000000  00000000  0024d453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0006f0e1  00000000  00000000  0026c063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003af0  00000000  00000000  002db144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000114e8  00000000  00000000  002dec34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004a96c  00000000  00000000  002f011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0006ccf8  00000000  00000000  0033aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ce427  00000000  00000000  003a7780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000aff0  00000000  00000000  00575ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__aeabi_d2f>:
   b47b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b47bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b47c0:	bf24      	itt	cs
   b47c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b47c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b47ca:	d90d      	bls.n	b47e8 <__aeabi_d2f+0x30>
   b47cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b47d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b47d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b47d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b47dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b47e0:	bf08      	it	eq
   b47e2:	f020 0001 	biceq.w	r0, r0, #1
   b47e6:	4770      	bx	lr
   b47e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b47ec:	d121      	bne.n	b4832 <__aeabi_d2f+0x7a>
   b47ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b47f2:	bfbc      	itt	lt
   b47f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b47f8:	4770      	bxlt	lr
   b47fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b47fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4802:	f1c2 0218 	rsb	r2, r2, #24
   b4806:	f1c2 0c20 	rsb	ip, r2, #32
   b480a:	fa10 f30c 	lsls.w	r3, r0, ip
   b480e:	fa20 f002 	lsr.w	r0, r0, r2
   b4812:	bf18      	it	ne
   b4814:	f040 0001 	orrne.w	r0, r0, #1
   b4818:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b481c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4820:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4824:	ea40 000c 	orr.w	r0, r0, ip
   b4828:	fa23 f302 	lsr.w	r3, r3, r2
   b482c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4830:	e7cc      	b.n	b47cc <__aeabi_d2f+0x14>
   b4832:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4836:	d107      	bne.n	b4848 <__aeabi_d2f+0x90>
   b4838:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b483c:	bf1e      	ittt	ne
   b483e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4842:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4846:	4770      	bxne	lr
   b4848:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b484c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4850:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4854:	4770      	bx	lr
   b4856:	bf00      	nop

000b4858 <strcmp>:
   b4858:	f810 2b01 	ldrb.w	r2, [r0], #1
   b485c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4860:	2a01      	cmp	r2, #1
   b4862:	bf28      	it	cs
   b4864:	429a      	cmpcs	r2, r3
   b4866:	d0f7      	beq.n	b4858 <strcmp>
   b4868:	1ad0      	subs	r0, r2, r3
   b486a:	4770      	bx	lr

000b486c <strlen>:
   b486c:	4603      	mov	r3, r0
   b486e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4872:	2a00      	cmp	r2, #0
   b4874:	d1fb      	bne.n	b486e <strlen+0x2>
   b4876:	1a18      	subs	r0, r3, r0
   b4878:	3801      	subs	r0, #1
   b487a:	4770      	bx	lr

000b487c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b487c:	4809      	ldr	r0, [pc, #36]	; (b48a4 <module_user_pre_init+0x28>)
   b487e:	490a      	ldr	r1, [pc, #40]	; (b48a8 <module_user_pre_init+0x2c>)
   b4880:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4882:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4884:	d005      	beq.n	b4892 <module_user_pre_init+0x16>
   b4886:	4a09      	ldr	r2, [pc, #36]	; (b48ac <module_user_pre_init+0x30>)
   b4888:	4282      	cmp	r2, r0
   b488a:	d002      	beq.n	b4892 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b488c:	1a12      	subs	r2, r2, r0
   b488e:	f005 f857 	bl	b9940 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4892:	4807      	ldr	r0, [pc, #28]	; (b48b0 <module_user_pre_init+0x34>)
   b4894:	4a07      	ldr	r2, [pc, #28]	; (b48b4 <module_user_pre_init+0x38>)
   b4896:	2100      	movs	r1, #0
   b4898:	1a12      	subs	r2, r2, r0
   b489a:	f005 f879 	bl	b9990 <memset>
    return &link_global_data_start;
}
   b489e:	4801      	ldr	r0, [pc, #4]	; (b48a4 <module_user_pre_init+0x28>)
   b48a0:	bd08      	pop	{r3, pc}
   b48a2:	bf00      	nop
   b48a4:	2003dd40 	.word	0x2003dd40
   b48a8:	000ba380 	.word	0x000ba380
   b48ac:	2003ddb8 	.word	0x2003ddb8
   b48b0:	2003ddb8 	.word	0x2003ddb8
   b48b4:	2003e7fc 	.word	0x2003e7fc

000b48b8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48b8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48ba:	4e07      	ldr	r6, [pc, #28]	; (b48d8 <module_user_init+0x20>)
   b48bc:	4c07      	ldr	r4, [pc, #28]	; (b48dc <module_user_init+0x24>)
    module_user_init_hook();
   b48be:	f003 ff1d 	bl	b86fc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c2:	1ba4      	subs	r4, r4, r6
   b48c4:	08a4      	lsrs	r4, r4, #2
   b48c6:	2500      	movs	r5, #0
   b48c8:	42ac      	cmp	r4, r5
   b48ca:	d100      	bne.n	b48ce <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48cc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48ce:	f856 3b04 	ldr.w	r3, [r6], #4
   b48d2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48d4:	3501      	adds	r5, #1
   b48d6:	e7f7      	b.n	b48c8 <module_user_init+0x10>
   b48d8:	000ba338 	.word	0x000ba338
   b48dc:	000ba35c 	.word	0x000ba35c

000b48e0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48e0:	f000 b918 	b.w	b4b14 <setup>

000b48e4 <module_user_loop>:
}

void module_user_loop() {
   b48e4:	b508      	push	{r3, lr}
    loop();
   b48e6:	f000 f96d 	bl	b4bc4 <loop>
    _post_loop();
}
   b48ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48ee:	f003 bebd 	b.w	b866c <_post_loop>

000b48f2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b48f2:	f002 ba45 	b.w	b6d80 <malloc>

000b48f6 <_Znaj>:
   b48f6:	f002 ba43 	b.w	b6d80 <malloc>

000b48fa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b48fa:	f002 ba49 	b.w	b6d90 <free>
	...

000b4900 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4900:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4902:	4a03      	ldr	r2, [pc, #12]	; (b4910 <__cxa_pure_virtual+0x10>)
   b4904:	4903      	ldr	r1, [pc, #12]	; (b4914 <__cxa_pure_virtual+0x14>)
   b4906:	200c      	movs	r0, #12
   b4908:	f002 f90a 	bl	b6b20 <panic_>
  while (1);
   b490c:	e7fe      	b.n	b490c <__cxa_pure_virtual+0xc>
   b490e:	bf00      	nop
   b4910:	000b6801 	.word	0x000b6801
   b4914:	000b9cc0 	.word	0x000b9cc0

000b4918 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4918:	7800      	ldrb	r0, [r0, #0]
   b491a:	fab0 f080 	clz	r0, r0
   b491e:	0940      	lsrs	r0, r0, #5
   b4920:	4770      	bx	lr

000b4922 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4922:	2301      	movs	r3, #1
   b4924:	7003      	strb	r3, [r0, #0]
   b4926:	4770      	bx	lr

000b4928 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4928:	4770      	bx	lr

000b492a <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b492a:	4770      	bx	lr

000b492c <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b492c:	7c03      	ldrb	r3, [r0, #16]
   b492e:	f013 0308 	ands.w	r3, r3, #8
   b4932:	bf1e      	ittt	ne
   b4934:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b4936:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b4938:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b493a:	2b00      	cmp	r3, #0
  }
   b493c:	bfac      	ite	ge
   b493e:	4618      	movge	r0, r3
   b4940:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b4944:	4770      	bx	lr

000b4946 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4946:	4770      	bx	lr

000b4948 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b4948:	3010      	adds	r0, #16
   b494a:	f001 b941 	b.w	b5bd0 <_ZN7FatFile4syncEv>

000b494e <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b494e:	3010      	adds	r0, #16
   b4950:	f001 b85f 	b.w	b5a12 <_ZN7FatFile4peekEv>

000b4954 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4954:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4956:	2201      	movs	r2, #1
   b4958:	f10d 0107 	add.w	r1, sp, #7
   b495c:	3010      	adds	r0, #16
   b495e:	f000 ffaa 	bl	b58b6 <_ZN7FatFile4readEPvj>
   b4962:	2801      	cmp	r0, #1
   b4964:	bf0c      	ite	eq
   b4966:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b496a:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b496e:	b003      	add	sp, #12
   b4970:	f85d fb04 	ldr.w	pc, [sp], #4

000b4974 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4974:	3010      	adds	r0, #16
   b4976:	f001 b9b5 	b.w	b5ce4 <_ZN7FatFile5writeEPKvj>

000b497a <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b497a:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b497c:	2201      	movs	r2, #1
   b497e:	f88d 1007 	strb.w	r1, [sp, #7]
   b4982:	3010      	adds	r0, #16
   b4984:	f10d 0107 	add.w	r1, sp, #7
   b4988:	f001 f9ac 	bl	b5ce4 <_ZN7FatFile5writeEPKvj>
  }
   b498c:	b003      	add	sp, #12
   b498e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4992 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4992:	b510      	push	{r4, lr}
  }
   b4994:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4996:	4604      	mov	r4, r0
  }
   b4998:	f7ff ffaf 	bl	b48fa <_ZdlPvj>
   b499c:	4620      	mov	r0, r4
   b499e:	bd10      	pop	{r4, pc}

000b49a0 <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b49a0:	b510      	push	{r4, lr}
   b49a2:	2134      	movs	r1, #52	; 0x34
   b49a4:	4604      	mov	r4, r0
   b49a6:	f7ff ffa8 	bl	b48fa <_ZdlPvj>
   b49aa:	4620      	mov	r0, r4
   b49ac:	bd10      	pop	{r4, pc}
	...

000b49b0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b49b0:	4b0a      	ldr	r3, [pc, #40]	; (b49dc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b49b2:	b510      	push	{r4, lr}
   b49b4:	4604      	mov	r4, r0
   b49b6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b49b8:	f002 fede 	bl	b7778 <_ZN5spark10LogManager8instanceEv>
   b49bc:	4621      	mov	r1, r4
   b49be:	f003 f928 	bl	b7c12 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b49c2:	f004 fa3f 	bl	b8e44 <_Z16_fetch_usbserialv>
   b49c6:	f004 fa31 	bl	b8e2c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b49ca:	4620      	mov	r0, r4
   b49cc:	4b04      	ldr	r3, [pc, #16]	; (b49e0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b49ce:	f840 3b04 	str.w	r3, [r0], #4
   b49d2:	f002 ffa7 	bl	b7924 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b49d6:	4620      	mov	r0, r4
   b49d8:	bd10      	pop	{r4, pc}
   b49da:	bf00      	nop
   b49dc:	000b9e88 	.word	0x000b9e88
   b49e0:	000b9e70 	.word	0x000b9e70

000b49e4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b49e4:	b510      	push	{r4, lr}
   b49e6:	4604      	mov	r4, r0
    }
   b49e8:	f7ff ffe2 	bl	b49b0 <_ZN5spark16SerialLogHandlerD1Ev>
   b49ec:	4620      	mov	r0, r4
   b49ee:	2124      	movs	r1, #36	; 0x24
   b49f0:	f7ff ff83 	bl	b48fa <_ZdlPvj>
   b49f4:	4620      	mov	r0, r4
   b49f6:	bd10      	pop	{r4, pc}

000b49f8 <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b49f8:	b40e      	push	{r1, r2, r3}
   b49fa:	b503      	push	{r0, r1, lr}
   b49fc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b49fe:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4a00:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4a04:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4a06:	f002 fcfe 	bl	b7406 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4a0a:	b002      	add	sp, #8
   b4a0c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4a10:	b003      	add	sp, #12
   b4a12:	4770      	bx	lr

000b4a14 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4a16:	4604      	mov	r4, r0
   b4a18:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4a1a:	7922      	ldrb	r2, [r4, #4]
   b4a1c:	68a3      	ldr	r3, [r4, #8]
   b4a1e:	b132      	cbz	r2, b4a2e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4a20:	b9a3      	cbnz	r3, b4a4c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4a22:	490b      	ldr	r1, [pc, #44]	; (b4a50 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4a24:	b002      	add	sp, #8
   b4a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4a2a:	f002 bcbb 	b.w	b73a4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4a2e:	4a09      	ldr	r2, [pc, #36]	; (b4a54 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4a30:	7b26      	ldrb	r6, [r4, #12]
   b4a32:	4d09      	ldr	r5, [pc, #36]	; (b4a58 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4a34:	4909      	ldr	r1, [pc, #36]	; (b4a5c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4a36:	7b64      	ldrb	r4, [r4, #13]
   b4a38:	2e01      	cmp	r6, #1
   b4a3a:	bf18      	it	ne
   b4a3c:	4629      	movne	r1, r5
   b4a3e:	e9cd 1400 	strd	r1, r4, [sp]
   b4a42:	4907      	ldr	r1, [pc, #28]	; (b4a60 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4a44:	f7ff ffd8 	bl	b49f8 <_ZN5Print6printfEPKcz>
  }
   b4a48:	b002      	add	sp, #8
   b4a4a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4a4c:	4a05      	ldr	r2, [pc, #20]	; (b4a64 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4a4e:	e7ef      	b.n	b4a30 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4a50:	000b9ce6 	.word	0x000b9ce6
   b4a54:	000b9fbb 	.word	0x000b9fbb
   b4a58:	000b9ce2 	.word	0x000b9ce2
   b4a5c:	000b9cde 	.word	0x000b9cde
   b4a60:	000b9cfc 	.word	0x000b9cfc
   b4a64:	000b9cd5 	.word	0x000b9cd5

000b4a68 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4a68:	b40e      	push	{r1, r2, r3}
   b4a6a:	b500      	push	{lr}
   b4a6c:	b08c      	sub	sp, #48	; 0x30
   b4a6e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4a70:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4a74:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4a78:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4a7a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4a7e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4a80:	6801      	ldr	r1, [r0, #0]
   b4a82:	aa04      	add	r2, sp, #16
   b4a84:	201e      	movs	r0, #30
    attr.flags = 0;
   b4a86:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4a8a:	f002 f859 	bl	b6b40 <log_message_v>
}
   b4a8e:	b00c      	add	sp, #48	; 0x30
   b4a90:	f85d eb04 	ldr.w	lr, [sp], #4
   b4a94:	b003      	add	sp, #12
   b4a96:	4770      	bx	lr

000b4a98 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4a98:	b530      	push	{r4, r5, lr}
   b4a9a:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4a9c:	4b1b      	ldr	r3, [pc, #108]	; (b4b0c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4a9e:	9300      	str	r3, [sp, #0]
   b4aa0:	7913      	ldrb	r3, [r2, #4]
   b4aa2:	f88d 3004 	strb.w	r3, [sp, #4]
   b4aa6:	6893      	ldr	r3, [r2, #8]
   b4aa8:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4aaa:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b4aae:	8993      	ldrh	r3, [r2, #12]
   b4ab0:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4ab4:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4ab6:	460a      	mov	r2, r1
   b4ab8:	466b      	mov	r3, sp
   b4aba:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4abe:	4628      	mov	r0, r5
   b4ac0:	f001 fc4c 	bl	b635c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4ac4:	b910      	cbnz	r0, b4acc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4ac6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4ac8:	b005      	add	sp, #20
   b4aca:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4acc:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4ace:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4ad2:	4628      	mov	r0, r5
   b4ad4:	f001 f8b2 	bl	b5c3c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4ad8:	2101      	movs	r1, #1
   b4ada:	4620      	mov	r0, r4
   b4adc:	f001 fae8 	bl	b60b0 <_ZN9FatVolume4initEh>
   b4ae0:	4601      	mov	r1, r0
   b4ae2:	b168      	cbz	r0, b4b00 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4ae4:	4621      	mov	r1, r4
   b4ae6:	4628      	mov	r0, r5
   b4ae8:	f000 fedf 	bl	b58aa <_ZN7FatFile8openRootEP9FatVolume>
   b4aec:	2800      	cmp	r0, #0
   b4aee:	d0ea      	beq.n	b4ac6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4af0:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4af4:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4af8:	d0e5      	beq.n	b4ac6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4afa:	4b05      	ldr	r3, [pc, #20]	; (b4b10 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4afc:	601d      	str	r5, [r3, #0]
    return true;
   b4afe:	e7e3      	b.n	b4ac8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4b00:	4620      	mov	r0, r4
   b4b02:	f001 fad5 	bl	b60b0 <_ZN9FatVolume4initEh>
   b4b06:	2800      	cmp	r0, #0
   b4b08:	d1ec      	bne.n	b4ae4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4b0a:	e7dc      	b.n	b4ac6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4b0c:	000b9e5c 	.word	0x000b9e5c
   b4b10:	2003e650 	.word	0x2003e650

000b4b14 <setup>:
// in sleep configuration to avoid reconnection penalty
const unsigned long SECONDS_BETWEEN_MEASUREMENTS = 30; // What should sampling period be?
// ***** IMPORTANT!!! See note above this const.


void setup(void) {
   b4b14:	b508      	push	{r3, lr}
    //WiFi.off(); // turn off wifi for prelim testing (uncomment)
  }

  // delay(5000); // to see response from begin command

  Serial.begin(9600);
   b4b16:	f004 f995 	bl	b8e44 <_Z16_fetch_usbserialv>
   b4b1a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4b1e:	f004 f981 	bl	b8e24 <_ZN9USBSerial5beginEl>
  Log.info("Maxbotix Test");
   b4b22:	4902      	ldr	r1, [pc, #8]	; (b4b2c <setup+0x18>)
   b4b24:	4802      	ldr	r0, [pc, #8]	; (b4b30 <setup+0x1c>)
   b4b26:	f7ff ff9f 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>

}
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	000b9d19 	.word	0x000b9d19
   b4b30:	2003e684 	.word	0x2003e684

000b4b34 <_Z21secondsUntilNextEventv>:
  }
  break;
  }
}

int secondsUntilNextEvent() {
   b4b34:	b510      	push	{r4, lr}

  int current_seconds = Time.now();
   b4b36:	f003 fc8f 	bl	b8458 <_ZN9TimeClass3nowEv>
  int seconds_to_sleep = SECONDS_BETWEEN_MEASUREMENTS - (current_seconds % SECONDS_BETWEEN_MEASUREMENTS);
   b4b3a:	241e      	movs	r4, #30
   b4b3c:	fbb0 f2f4 	udiv	r2, r0, r4
   b4b40:	fb02 0014 	mls	r0, r2, r4, r0
   b4b44:	1a24      	subs	r4, r4, r0

  Log.info("Sleeping for %i", seconds_to_sleep);
   b4b46:	4903      	ldr	r1, [pc, #12]	; (b4b54 <_Z21secondsUntilNextEventv+0x20>)
   b4b48:	4803      	ldr	r0, [pc, #12]	; (b4b58 <_Z21secondsUntilNextEventv+0x24>)
   b4b4a:	4622      	mov	r2, r4
   b4b4c:	f7ff ff8c 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>

  return seconds_to_sleep;
   b4b50:	4620      	mov	r0, r4
   b4b52:	bd10      	pop	{r4, pc}
   b4b54:	000b9d27 	.word	0x000b9d27
   b4b58:	2003e684 	.word	0x2003e684

000b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4b5c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4b5e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4b62:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4b64:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4b66:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4b6a:	42ae      	cmp	r6, r5
   b4b6c:	d004      	beq.n	b4b78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4b6e:	4628      	mov	r0, r5
   b4b70:	f002 fb22 	bl	b71b8 <_ZN6StringD1Ev>
   b4b74:	3514      	adds	r5, #20
   b4b76:	e7f8      	b.n	b4b6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4b78:	6820      	ldr	r0, [r4, #0]
   b4b7a:	f002 f909 	bl	b6d90 <free>
    AllocatorT::free(data_);
}
   b4b7e:	4620      	mov	r0, r4
   b4b80:	bd70      	pop	{r4, r5, r6, pc}

000b4b82 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b4b82:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4b84:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b4b86:	2000      	movs	r0, #0
   b4b88:	f002 f812 	bl	b6bb0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4b8c:	b120      	cbz	r0, b4b98 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b4b8e:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4b90:	b913      	cbnz	r3, b4b98 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b4b92:	f002 f8bd 	bl	b6d10 <spark_process>
    }
   b4b96:	e7fa      	b.n	b4b8e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b4b98:	7863      	ldrb	r3, [r4, #1]
   b4b9a:	f3bf 8f5b 	dmb	ish
   b4b9e:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4ba0:	b90b      	cbnz	r3, b4ba6 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b4ba2:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b4ba4:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4ba6:	2000      	movs	r0, #0
   b4ba8:	f002 f802 	bl	b6bb0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4bac:	b120      	cbz	r0, b4bb8 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b4bae:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4bb0:	b913      	cbnz	r3, b4bb8 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b4bb2:	f002 f8ad 	bl	b6d10 <spark_process>
    }
   b4bb6:	e7fa      	b.n	b4bae <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4bb8:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b4bba:	2b01      	cmp	r3, #1
   b4bbc:	d1f1      	bne.n	b4ba2 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b4bbe:	7b20      	ldrb	r0, [r4, #12]
   b4bc0:	e7f0      	b.n	b4ba4 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
	...

000b4bc4 <loop>:
void loop(void) {
   b4bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (state) {
   b4bc8:	4eab      	ldr	r6, [pc, #684]	; (b4e78 <loop+0x2b4>)
   b4bca:	7835      	ldrb	r5, [r6, #0]
   b4bcc:	2d01      	cmp	r5, #1
void loop(void) {
   b4bce:	b099      	sub	sp, #100	; 0x64
  switch (state) {
   b4bd0:	f000 80b8 	beq.w	b4d44 <loop+0x180>
   b4bd4:	2d02      	cmp	r5, #2
   b4bd6:	f000 811b 	beq.w	b4e10 <loop+0x24c>
   b4bda:	2d00      	cmp	r5, #0
   b4bdc:	f040 80a3 	bne.w	b4d26 <loop+0x162>
   b4be0:	4da6      	ldr	r5, [pc, #664]	; (b4e7c <loop+0x2b8>)
   b4be2:	24c8      	movs	r4, #200	; 0xc8
   b4be4:	462f      	mov	r7, r5
      filterArray[sample] = (analogRead(A1));
   b4be6:	2012      	movs	r0, #18
   b4be8:	f004 fdb0 	bl	b974c <analogRead>
   b4bec:	ee07 0a90 	vmov	s15, r0
   b4bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      delay(50); // to avoid untrasonic interfering
   b4bf4:	2032      	movs	r0, #50	; 0x32
      filterArray[sample] = (analogRead(A1));
   b4bf6:	ece7 7a01 	vstmia	r7!, {s15}
      delay(50); // to avoid untrasonic interfering
   b4bfa:	f003 fc47 	bl	b848c <delay>
    for (int sample = 0; sample < 200; sample++) {
   b4bfe:	3c01      	subs	r4, #1
   b4c00:	d1f1      	bne.n	b4be6 <loop+0x22>
      for (int j = i + 1; j < 200; j++) {
   b4c02:	3401      	adds	r4, #1
   b4c04:	4629      	mov	r1, r5
   b4c06:	3504      	adds	r5, #4
   b4c08:	462a      	mov	r2, r5
   b4c0a:	4623      	mov	r3, r4
        if (filterArray[i] > filterArray[j]) {
   b4c0c:	edd1 7a00 	vldr	s15, [r1]
   b4c10:	ecb2 7a01 	vldmia	r2!, {s14}
   b4c14:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      for (int j = i + 1; j < 200; j++) {
   b4c1c:	f103 0301 	add.w	r3, r3, #1
          filterArray[i] = filterArray[j];
   b4c20:	bfc4      	itt	gt
   b4c22:	ed81 7a00 	vstrgt	s14, [r1]
          filterArray[j] = swap;
   b4c26:	ed42 7a01 	vstrgt	s15, [r2, #-4]
      for (int j = i + 1; j < 200; j++) {
   b4c2a:	2bc8      	cmp	r3, #200	; 0xc8
   b4c2c:	d1ee      	bne.n	b4c0c <loop+0x48>
    for (int i = 0; i < 199; i++) {
   b4c2e:	2cc7      	cmp	r4, #199	; 0xc7
   b4c30:	d1e7      	bne.n	b4c02 <loop+0x3e>
   b4c32:	4d93      	ldr	r5, [pc, #588]	; (b4e80 <loop+0x2bc>)
   b4c34:	24b4      	movs	r4, #180	; 0xb4
    double sum = 0;
   b4c36:	f04f 0800 	mov.w	r8, #0
   b4c3a:	f04f 0900 	mov.w	r9, #0
      sum += filterArray[sample];
   b4c3e:	f855 0b04 	ldr.w	r0, [r5], #4
   b4c42:	f7ff fb4f 	bl	b42e4 <__aeabi_f2d>
   b4c46:	4602      	mov	r2, r0
   b4c48:	460b      	mov	r3, r1
   b4c4a:	4640      	mov	r0, r8
   b4c4c:	4649      	mov	r1, r9
   b4c4e:	f7ff f9eb 	bl	b4028 <__adddf3>
    for (int sample = 10; sample < 190; sample++) {
   b4c52:	3c01      	subs	r4, #1
      sum += filterArray[sample];
   b4c54:	4680      	mov	r8, r0
   b4c56:	4689      	mov	r9, r1
    for (int sample = 10; sample < 190; sample++) {
   b4c58:	d1f1      	bne.n	b4c3e <loop+0x7a>
    distance_unconverted = sum / 180;
   b4c5a:	2200      	movs	r2, #0
   b4c5c:	4b89      	ldr	r3, [pc, #548]	; (b4e84 <loop+0x2c0>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4c5e:	f8df 8290 	ldr.w	r8, [pc, #656]	; b4ef0 <loop+0x32c>
    real_time = Time.now(); // "Real" time and current millis for logging
   b4c62:	4f89      	ldr	r7, [pc, #548]	; (b4e88 <loop+0x2c4>)
    distance_unconverted = sum / 180;
   b4c64:	f7ff fcc0 	bl	b45e8 <__aeabi_ddiv>
   b4c68:	f7ff fda6 	bl	b47b8 <__aeabi_d2f>
   b4c6c:	ee07 0a90 	vmov	s15, r0
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4c70:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   b4c74:	ee67 7a87 	vmul.f32	s15, s15, s14
    distance_unconverted = sum / 180;
   b4c78:	4b84      	ldr	r3, [pc, #528]	; (b4e8c <loop+0x2c8>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4c7a:	edc8 7a00 	vstr	s15, [r8]
    distance_unconverted = sum / 180;
   b4c7e:	6018      	str	r0, [r3, #0]
    real_time = Time.now(); // "Real" time and current millis for logging
   b4c80:	f003 fbea 	bl	b8458 <_ZN9TimeClass3nowEv>
   b4c84:	6038      	str	r0, [r7, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c86:	f001 fdcb 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
    millis_now = millis();
   b4c8a:	4b81      	ldr	r3, [pc, #516]	; (b4e90 <loop+0x2cc>)
   b4c8c:	6018      	str	r0, [r3, #0]
    float cellVoltage = batteryMonitor.getVCell();
   b4c8e:	4881      	ldr	r0, [pc, #516]	; (b4e94 <loop+0x2d0>)
   b4c90:	f003 fc80 	bl	b8594 <_ZN9FuelGauge8getVCellEv>
    float stateOfCharge = batteryMonitor.getSoC();
   b4c94:	487f      	ldr	r0, [pc, #508]	; (b4e94 <loop+0x2d0>)
    float cellVoltage = batteryMonitor.getVCell();
   b4c96:	ee10 5a10 	vmov	r5, s0
    float stateOfCharge = batteryMonitor.getSoC();
   b4c9a:	f003 fc97 	bl	b85cc <_ZN9FuelGauge6getSoCEv>
   b4c9e:	ee10 0a10 	vmov	r0, s0
    snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f", //,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   b4ca2:	f7ff fb1f 	bl	b42e4 <__aeabi_f2d>
   b4ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4caa:	4628      	mov	r0, r5
   b4cac:	f7ff fb1a 	bl	b42e4 <__aeabi_f2d>
   b4cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4cb4:	f8d8 0000 	ldr.w	r0, [r8]
   b4cb8:	f7ff fb14 	bl	b42e4 <__aeabi_f2d>
   b4cbc:	e9cd 0100 	strd	r0, r1, [sp]
   b4cc0:	683b      	ldr	r3, [r7, #0]
   b4cc2:	4a75      	ldr	r2, [pc, #468]	; (b4e98 <loop+0x2d4>)
   b4cc4:	4875      	ldr	r0, [pc, #468]	; (b4e9c <loop+0x2d8>)
   b4cc6:	2178      	movs	r1, #120	; 0x78
   b4cc8:	f002 f872 	bl	b6db0 <snprintf>
    Log.info(data);
   b4ccc:	4973      	ldr	r1, [pc, #460]	; (b4e9c <loop+0x2d8>)
   b4cce:	4874      	ldr	r0, [pc, #464]	; (b4ea0 <loop+0x2dc>)
   b4cd0:	f7ff feca 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cd8:	930d      	str	r3, [sp, #52]	; 0x34
  File() {}
   b4cda:	4b72      	ldr	r3, [pc, #456]	; (b4ea4 <loop+0x2e0>)
   b4cdc:	930b      	str	r3, [sp, #44]	; 0x2c
      dataMode_{dataMode}
   b4cde:	4b72      	ldr	r3, [pc, #456]	; (b4ea8 <loop+0x2e4>)
   b4ce0:	9307      	str	r3, [sp, #28]
   b4ce2:	4b72      	ldr	r3, [pc, #456]	; (b4eac <loop+0x2e8>)
   b4ce4:	9309      	str	r3, [sp, #36]	; 0x24
    if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
   b4ce6:	4872      	ldr	r0, [pc, #456]	; (b4eb0 <loop+0x2ec>)
    Print() : write_error(0) {}
   b4ce8:	940c      	str	r4, [sp, #48]	; 0x30
   b4cea:	2301      	movs	r3, #1
   b4cec:	aa07      	add	r2, sp, #28
   b4cee:	2105      	movs	r1, #5
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4cf0:	940f      	str	r4, [sp, #60]	; 0x3c
   b4cf2:	f88d 4020 	strb.w	r4, [sp, #32]
   b4cf6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   b4cfa:	f7ff fecd 	bl	b4a98 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b4cfe:	b918      	cbnz	r0, b4d08 <loop+0x144>
      Log.info("failed to open card");
   b4d00:	496c      	ldr	r1, [pc, #432]	; (b4eb4 <loop+0x2f0>)
   b4d02:	4867      	ldr	r0, [pc, #412]	; (b4ea0 <loop+0x2dc>)
   b4d04:	f7ff feb0 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
    return open(m_cwd, path, oflag);
   b4d08:	496b      	ldr	r1, [pc, #428]	; (b4eb8 <loop+0x2f4>)
   b4d0a:	4a6c      	ldr	r2, [pc, #432]	; (b4ebc <loop+0x2f8>)
   b4d0c:	6809      	ldr	r1, [r1, #0]
   b4d0e:	f244 2302 	movw	r3, #16898	; 0x4202
   b4d12:	a80f      	add	r0, sp, #60	; 0x3c
   b4d14:	f000 ff99 	bl	b5c4a <_ZN7FatFile4openEPS_PKci>
    if (!myFile.open("distance.csv", O_RDWR | O_CREAT | O_AT_END)) {
   b4d18:	b940      	cbnz	r0, b4d2c <loop+0x168>
      Log.info("opening distance.csv for write failed");
   b4d1a:	4969      	ldr	r1, [pc, #420]	; (b4ec0 <loop+0x2fc>)
   b4d1c:	4860      	ldr	r0, [pc, #384]	; (b4ea0 <loop+0x2dc>)
   b4d1e:	f7ff fea3 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
        state = SLEEP_STATE;
   b4d22:	2302      	movs	r3, #2
   b4d24:	7033      	strb	r3, [r6, #0]
}
   b4d26:	b019      	add	sp, #100	; 0x64
   b4d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      myFile.print(data);
   b4d2c:	495b      	ldr	r1, [pc, #364]	; (b4e9c <loop+0x2d8>)
   b4d2e:	a80b      	add	r0, sp, #44	; 0x2c
   b4d30:	f002 fb38 	bl	b73a4 <_ZN5Print5printEPKc>
      myFile.print("\n"); // put next data on new line
   b4d34:	4963      	ldr	r1, [pc, #396]	; (b4ec4 <loop+0x300>)
   b4d36:	a80b      	add	r0, sp, #44	; 0x2c
   b4d38:	f002 fb34 	bl	b73a4 <_ZN5Print5printEPKc>
      myFile.close();
   b4d3c:	a80f      	add	r0, sp, #60	; 0x3c
   b4d3e:	f000 ff7d 	bl	b5c3c <_ZN7FatFile5closeEv>
      state = SLEEP_STATE;
   b4d42:	e7ee      	b.n	b4d22 <loop+0x15e>
   b4d44:	f001 fd6c 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4d48:	4f5f      	ldr	r7, [pc, #380]	; (b4ec8 <loop+0x304>)
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(const spark::NetworkClass& network = spark::Network) {
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b4d4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; b4ef4 <loop+0x330>
        Log.info("Trying to connect");
   b4d4e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; b4ef8 <loop+0x334>
   b4d52:	4d53      	ldr	r5, [pc, #332]	; (b4ea0 <loop+0x2dc>)
    stateTime = millis();
   b4d54:	6038      	str	r0, [r7, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d56:	f001 ffeb 	bl	b6d30 <spark_cloud_flag_connected>
      if (Particle.connected() == false) {
   b4d5a:	4603      	mov	r3, r0
   b4d5c:	b958      	cbnz	r0, b4d76 <loop+0x1b2>
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b4d5e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b4d62:	4602      	mov	r2, r0
   b4d64:	2006      	movs	r0, #6
   b4d66:	f001 fffb 	bl	b6d60 <spark_set_connection_property>
        spark_cloud_flag_connect();
   b4d6a:	f001 ffd9 	bl	b6d20 <spark_cloud_flag_connect>
        Log.info("Trying to connect");
   b4d6e:	4649      	mov	r1, r9
   b4d70:	4628      	mov	r0, r5
   b4d72:	f7ff fe79 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d76:	f001 ffdb 	bl	b6d30 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b4d7a:	4604      	mov	r4, r0
   b4d7c:	2800      	cmp	r0, #0
   b4d7e:	d02d      	beq.n	b4ddc <loop+0x218>
        Log.info("publishing data");
   b4d80:	4952      	ldr	r1, [pc, #328]	; (b4ecc <loop+0x308>)
   b4d82:	4847      	ldr	r0, [pc, #284]	; (b4ea0 <loop+0x2dc>)
   b4d84:	f7ff fe70 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b4d88:	4b51      	ldr	r3, [pc, #324]	; (b4ed0 <loop+0x30c>)
   b4d8a:	4a52      	ldr	r2, [pc, #328]	; (b4ed4 <loop+0x310>)
   b4d8c:	781b      	ldrb	r3, [r3, #0]
   b4d8e:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4d90:	4951      	ldr	r1, [pc, #324]	; (b4ed8 <loop+0x314>)
   b4d92:	4313      	orrs	r3, r2
   b4d94:	f88d 3000 	strb.w	r3, [sp]
   b4d98:	4a40      	ldr	r2, [pc, #256]	; (b4e9c <loop+0x2d8>)
   b4d9a:	6809      	ldr	r1, [r1, #0]
   b4d9c:	233c      	movs	r3, #60	; 0x3c
   b4d9e:	a80b      	add	r0, sp, #44	; 0x2c
   b4da0:	f003 fe0a 	bl	b89b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b4da4:	a80b      	add	r0, sp, #44	; 0x2c
   b4da6:	f7ff feec 	bl	b4b82 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
	if (_M_pi != nullptr)
   b4daa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b4dac:	4605      	mov	r5, r0
   b4dae:	b17c      	cbz	r4, b4dd0 <loop+0x20c>
      if (--_M_use_count == 0)
   b4db0:	6863      	ldr	r3, [r4, #4]
   b4db2:	3b01      	subs	r3, #1
   b4db4:	6063      	str	r3, [r4, #4]
   b4db6:	b95b      	cbnz	r3, b4dd0 <loop+0x20c>
          _M_dispose();
   b4db8:	6823      	ldr	r3, [r4, #0]
   b4dba:	4620      	mov	r0, r4
   b4dbc:	689b      	ldr	r3, [r3, #8]
   b4dbe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4dc0:	68a3      	ldr	r3, [r4, #8]
   b4dc2:	3b01      	subs	r3, #1
   b4dc4:	60a3      	str	r3, [r4, #8]
   b4dc6:	b91b      	cbnz	r3, b4dd0 <loop+0x20c>
            _M_destroy();
   b4dc8:	6823      	ldr	r3, [r4, #0]
   b4dca:	4620      	mov	r0, r4
   b4dcc:	68db      	ldr	r3, [r3, #12]
   b4dce:	4798      	blx	r3
        Log.info("publish result %d", success); 
   b4dd0:	4942      	ldr	r1, [pc, #264]	; (b4edc <loop+0x318>)
   b4dd2:	4833      	ldr	r0, [pc, #204]	; (b4ea0 <loop+0x2dc>)
   b4dd4:	462a      	mov	r2, r5
   b4dd6:	f7ff fe47 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
   b4dda:	e7a2      	b.n	b4d22 <loop+0x15e>
   b4ddc:	f001 fd20 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
   b4de0:	683b      	ldr	r3, [r7, #0]
   b4de2:	1ac0      	subs	r0, r0, r3
   b4de4:	f644 631f 	movw	r3, #19999	; 0x4e1f
   b4de8:	4298      	cmp	r0, r3
   b4dea:	d906      	bls.n	b4dfa <loop+0x236>
          state = SLEEP_STATE;
   b4dec:	2302      	movs	r3, #2
          Log.info("max time for publishing reached without success; go to sleep");
   b4dee:	493c      	ldr	r1, [pc, #240]	; (b4ee0 <loop+0x31c>)
          state = SLEEP_STATE;
   b4df0:	7033      	strb	r3, [r6, #0]
          Log.info("max time for publishing reached without success; go to sleep");
   b4df2:	4628      	mov	r0, r5
   b4df4:	f7ff fe38 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
          isMaxTime = true;
   b4df8:	2401      	movs	r4, #1
        Log.info("Not max time, try again to connect and publish");
   b4dfa:	4628      	mov	r0, r5
   b4dfc:	4939      	ldr	r1, [pc, #228]	; (b4ee4 <loop+0x320>)
   b4dfe:	f7ff fe33 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
        delay(500);
   b4e02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4e06:	f003 fb41 	bl	b848c <delay>
    while (!isMaxTime) {
   b4e0a:	2c00      	cmp	r4, #0
   b4e0c:	d0a3      	beq.n	b4d56 <loop+0x192>
   b4e0e:	e78a      	b.n	b4d26 <loop+0x162>
    Log.info("going to sleep");
   b4e10:	4935      	ldr	r1, [pc, #212]	; (b4ee8 <loop+0x324>)
   b4e12:	4823      	ldr	r0, [pc, #140]	; (b4ea0 <loop+0x2dc>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b4e14:	4c35      	ldr	r4, [pc, #212]	; (b4eec <loop+0x328>)
   b4e16:	f7ff fe27 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
    delay(500);
   b4e1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4e1e:	f003 fb35 	bl	b848c <delay>
    int wakeInSeconds = secondsUntilNextEvent(); // Calculate how long to sleep 
   b4e22:	f7ff fe87 	bl	b4b34 <_Z21secondsUntilNextEventv>
   b4e26:	7d23      	ldrb	r3, [r4, #20]
   b4e28:	4607      	mov	r7, r0
   b4e2a:	2b00      	cmp	r3, #0
   b4e2c:	f000 808e 	beq.w	b4f4c <loop+0x388>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4e30:	6823      	ldr	r3, [r4, #0]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b4e32:	7225      	strb	r5, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4e34:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4e36:	2b00      	cmp	r3, #0
   b4e38:	d060      	beq.n	b4efc <loop+0x338>
            if (start->type == type) {
   b4e3a:	889a      	ldrh	r2, [r3, #4]
   b4e3c:	2a01      	cmp	r2, #1
   b4e3e:	d007      	beq.n	b4e50 <loop+0x28c>
            start = start->next;
   b4e40:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4e42:	e7f8      	b.n	b4e36 <loop+0x272>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4e44:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4e46:	2b00      	cmp	r3, #0
   b4e48:	d058      	beq.n	b4efc <loop+0x338>
            if (start->type == type) {
   b4e4a:	889a      	ldrh	r2, [r3, #4]
   b4e4c:	2a01      	cmp	r2, #1
   b4e4e:	d1f9      	bne.n	b4e44 <loop+0x280>
                if (gpioWakeup->pin == pin) {
   b4e50:	899a      	ldrh	r2, [r3, #12]
   b4e52:	2a02      	cmp	r2, #2
   b4e54:	d1f6      	bne.n	b4e44 <loop+0x280>
                    gpioWakeup->mode = mode;
   b4e56:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b4e58:	7d23      	ldrb	r3, [r4, #20]
   b4e5a:	2b00      	cmp	r3, #0
   b4e5c:	d076      	beq.n	b4f4c <loop+0x388>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4e5e:	6823      	ldr	r3, [r4, #0]
      .duration(wakeInSeconds* 1000L); // Set seconds until wake
   b4e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4e64:	68db      	ldr	r3, [r3, #12]
   b4e66:	4347      	muls	r7, r0
        if (!start) {
   b4e68:	2b00      	cmp	r3, #0
   b4e6a:	d05d      	beq.n	b4f28 <loop+0x364>
            if (start->type == type) {
   b4e6c:	889a      	ldrh	r2, [r3, #4]
   b4e6e:	2a04      	cmp	r2, #4
   b4e70:	f000 8081 	beq.w	b4f76 <loop+0x3b2>
            start = start->next;
   b4e74:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4e76:	e7f7      	b.n	b4e68 <loop+0x2a4>
   b4e78:	2003e644 	.word	0x2003e644
   b4e7c:	2003de70 	.word	0x2003de70
   b4e80:	2003de98 	.word	0x2003de98
   b4e84:	40668000 	.word	0x40668000
   b4e88:	2003e1bc 	.word	0x2003e1bc
   b4e8c:	2003de6c 	.word	0x2003de6c
   b4e90:	2003e1b4 	.word	0x2003e1b4
   b4e94:	2003ddd4 	.word	0x2003ddd4
   b4e98:	000b9d37 	.word	0x000b9d37
   b4e9c:	2003ddf4 	.word	0x2003ddf4
   b4ea0:	2003e684 	.word	0x2003e684
   b4ea4:	000b9ea0 	.word	0x000b9ea0
   b4ea8:	000b9e5c 	.word	0x000b9e5c
   b4eac:	02faf080 	.word	0x02faf080
   b4eb0:	2003e1c0 	.word	0x2003e1c0
   b4eb4:	000b9d4c 	.word	0x000b9d4c
   b4eb8:	2003e650 	.word	0x2003e650
   b4ebc:	000b9d60 	.word	0x000b9d60
   b4ec0:	000b9d6d 	.word	0x000b9d6d
   b4ec4:	000b9fba 	.word	0x000b9fba
   b4ec8:	2003e648 	.word	0x2003e648
   b4ecc:	000b9da5 	.word	0x000b9da5
   b4ed0:	2003ddd1 	.word	0x2003ddd1
   b4ed4:	2003ddd0 	.word	0x2003ddd0
   b4ed8:	2003dd40 	.word	0x2003dd40
   b4edc:	000b9db5 	.word	0x000b9db5
   b4ee0:	000b9dc7 	.word	0x000b9dc7
   b4ee4:	000b9e04 	.word	0x000b9e04
   b4ee8:	000b9e33 	.word	0x000b9e33
   b4eec:	2003dddc 	.word	0x2003dddc
   b4ef0:	2003e1b8 	.word	0x2003e1b8
   b4ef4:	2003e714 	.word	0x2003e714
   b4ef8:	000b9d93 	.word	0x000b9d93
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4efc:	4920      	ldr	r1, [pc, #128]	; (b4f80 <loop+0x3bc>)
   b4efe:	2010      	movs	r0, #16
   b4f00:	f004 fcf8 	bl	b98f4 <_ZnwjRKSt9nothrow_t>
   b4f04:	4605      	mov	r5, r0
   b4f06:	2800      	cmp	r0, #0
   b4f08:	d037      	beq.n	b4f7a <loop+0x3b6>
   b4f0a:	2210      	movs	r2, #16
   b4f0c:	2100      	movs	r1, #0
   b4f0e:	f004 fd3f 	bl	b9990 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4f12:	4b1c      	ldr	r3, [pc, #112]	; (b4f84 <loop+0x3c0>)
   b4f14:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4f16:	2301      	movs	r3, #1
   b4f18:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4f1a:	6923      	ldr	r3, [r4, #16]
   b4f1c:	60ab      	str	r3, [r5, #8]
            wakeupSource->pin = pin;
   b4f1e:	2302      	movs	r3, #2
   b4f20:	81ab      	strh	r3, [r5, #12]
            wakeupSource->mode = mode;
   b4f22:	73ab      	strb	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4f24:	6125      	str	r5, [r4, #16]
   b4f26:	e797      	b.n	b4e58 <loop+0x294>
            }
            // Otherwise, configure RTC as wakeup source.
#if HAL_PLATFORM_RTL872X
            auto wakeupSource = (hal_wakeup_source_rtc_t*)system_pool_alloc(sizeof(hal_wakeup_source_rtc_t), nullptr);
#else
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4f28:	4915      	ldr	r1, [pc, #84]	; (b4f80 <loop+0x3bc>)
   b4f2a:	2010      	movs	r0, #16
   b4f2c:	f004 fce2 	bl	b98f4 <_ZnwjRKSt9nothrow_t>
   b4f30:	4605      	mov	r5, r0
   b4f32:	b310      	cbz	r0, b4f7a <loop+0x3b6>
   b4f34:	2210      	movs	r2, #16
   b4f36:	2100      	movs	r1, #0
   b4f38:	f004 fd2a 	bl	b9990 <memset>
#endif
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4f3c:	4b11      	ldr	r3, [pc, #68]	; (b4f84 <loop+0x3c0>)
   b4f3e:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4f40:	2304      	movs	r3, #4
   b4f42:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4f44:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4f46:	6125      	str	r5, [r4, #16]
            wakeupSource->ms = ms;
   b4f48:	e9c5 3702 	strd	r3, r7, [r5, #8]
    SystemSleepResult result = System.sleep(config); // Device sleeps here
   b4f4c:	490e      	ldr	r1, [pc, #56]	; (b4f88 <loop+0x3c4>)
   b4f4e:	a80b      	add	r0, sp, #44	; 0x2c
   b4f50:	f002 f8c0 	bl	b70d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    Log.info("Feeling restless");
   b4f54:	490d      	ldr	r1, [pc, #52]	; (b4f8c <loop+0x3c8>)
   b4f56:	480e      	ldr	r0, [pc, #56]	; (b4f90 <loop+0x3cc>)
   b4f58:	f7ff fd86 	bl	b4a68 <_ZNK5spark6Logger4infoEPKcz>
   b4f5c:	f001 fc60 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4f60:	4b0c      	ldr	r3, [pc, #48]	; (b4f94 <loop+0x3d0>)
   b4f62:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4f64:	980b      	ldr	r0, [sp, #44]	; 0x2c
    state = DATALOG_STATE;
   b4f66:	2300      	movs	r3, #0
   b4f68:	7033      	strb	r3, [r6, #0]
   b4f6a:	2800      	cmp	r0, #0
   b4f6c:	f43f aedb 	beq.w	b4d26 <loop+0x162>
            free(wakeupSource_);
   b4f70:	f001 ff0e 	bl	b6d90 <free>
}
   b4f74:	e6d7      	b.n	b4d26 <loop+0x162>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4f76:	60df      	str	r7, [r3, #12]
                return *this;
   b4f78:	e7e8      	b.n	b4f4c <loop+0x388>
                valid_ = false;
   b4f7a:	7525      	strb	r5, [r4, #20]
                return *this;
   b4f7c:	e7e6      	b.n	b4f4c <loop+0x388>
   b4f7e:	bf00      	nop
   b4f80:	000ba1a1 	.word	0x000ba1a1
   b4f84:	00030010 	.word	0x00030010
   b4f88:	2003dddc 	.word	0x2003dddc
   b4f8c:	000b9e42 	.word	0x000b9e42
   b4f90:	2003e684 	.word	0x2003e684
   b4f94:	2003e648 	.word	0x2003e648

000b4f98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4f98:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f9c:	4604      	mov	r4, r0
   b4f9e:	460d      	mov	r5, r1
   b4fa0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4fa2:	d916      	bls.n	b4fd2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4fa4:	4290      	cmp	r0, r2
   b4fa6:	d215      	bcs.n	b4fd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4fa8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4fac:	1a75      	subs	r5, r6, r1
   b4fae:	f1a1 0714 	sub.w	r7, r1, #20
   b4fb2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4fb4:	42b7      	cmp	r7, r6
   b4fb6:	d01c      	beq.n	b4ff2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4fb8:	b12c      	cbz	r4, b4fc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4fba:	4631      	mov	r1, r6
   b4fbc:	4620      	mov	r0, r4
   b4fbe:	f002 f964 	bl	b728a <_ZN6StringC1EOS_>
   b4fc2:	7c33      	ldrb	r3, [r6, #16]
   b4fc4:	7423      	strb	r3, [r4, #16]
   b4fc6:	4630      	mov	r0, r6
   b4fc8:	f002 f8f6 	bl	b71b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4fcc:	3e14      	subs	r6, #20
   b4fce:	3c14      	subs	r4, #20
   b4fd0:	e7f0      	b.n	b4fb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4fd2:	d00e      	beq.n	b4ff2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4fd4:	42b5      	cmp	r5, r6
   b4fd6:	d00c      	beq.n	b4ff2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4fd8:	b12c      	cbz	r4, b4fe6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4fda:	4629      	mov	r1, r5
   b4fdc:	4620      	mov	r0, r4
   b4fde:	f002 f954 	bl	b728a <_ZN6StringC1EOS_>
   b4fe2:	7c2b      	ldrb	r3, [r5, #16]
   b4fe4:	7423      	strb	r3, [r4, #16]
   b4fe6:	4628      	mov	r0, r5
   b4fe8:	f002 f8e6 	bl	b71b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4fec:	3514      	adds	r5, #20
   b4fee:	3414      	adds	r4, #20
   b4ff0:	e7f0      	b.n	b4fd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ff4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4ff8:	2300      	movs	r3, #0
   b4ffa:	e9c0 3300 	strd	r3, r3, [r0]
   b4ffe:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5000:	684f      	ldr	r7, [r1, #4]
   b5002:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5004:	4604      	mov	r4, r0
   b5006:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5008:	dd23      	ble.n	b5052 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b500a:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b500e:	fb08 f007 	mul.w	r0, r8, r7
   b5012:	f001 feb5 	bl	b6d80 <malloc>
            if (!d) {
   b5016:	4605      	mov	r5, r0
   b5018:	b1d8      	cbz	r0, b5052 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b501a:	e9d4 1200 	ldrd	r1, r2, [r4]
   b501e:	fb08 1202 	mla	r2, r8, r2, r1
   b5022:	f7ff ffb9 	bl	b4f98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5026:	6820      	ldr	r0, [r4, #0]
   b5028:	f001 feb2 	bl	b6d90 <free>
        data_ = d;
   b502c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b502e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5030:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5034:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5038:	45b8      	cmp	r8, r7
   b503a:	d008      	beq.n	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b503c:	4639      	mov	r1, r7
   b503e:	4628      	mov	r0, r5
   b5040:	f002 f93d 	bl	b72be <_ZN6StringC1ERKS_>
   b5044:	7c3b      	ldrb	r3, [r7, #16]
   b5046:	742b      	strb	r3, [r5, #16]
   b5048:	3714      	adds	r7, #20
   b504a:	3514      	adds	r5, #20
   b504c:	e7f4      	b.n	b5038 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b504e:	6873      	ldr	r3, [r6, #4]
   b5050:	6063      	str	r3, [r4, #4]
}
   b5052:	4620      	mov	r0, r4
   b5054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5058 <_GLOBAL__sub_I_sd>:
        val_(val) {
   b5058:	4b41      	ldr	r3, [pc, #260]	; (b5160 <_GLOBAL__sub_I_sd+0x108>)
   b505a:	2201      	movs	r2, #1
   b505c:	b570      	push	{r4, r5, r6, lr}
   b505e:	701a      	strb	r2, [r3, #0]
   b5060:	4b40      	ldr	r3, [pc, #256]	; (b5164 <_GLOBAL__sub_I_sd+0x10c>)
  SdFat() {
   b5062:	4c41      	ldr	r4, [pc, #260]	; (b5168 <_GLOBAL__sub_I_sd+0x110>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5064:	4d41      	ldr	r5, [pc, #260]	; (b516c <_GLOBAL__sub_I_sd+0x114>)
  {
   b5066:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b506a:	2108      	movs	r1, #8
   b506c:	7019      	strb	r1, [r3, #0]
   b506e:	2164      	movs	r1, #100	; 0x64
   b5070:	2300      	movs	r3, #0
   b5072:	f8c4 1460 	str.w	r1, [r4, #1120]	; 0x460
   b5076:	493e      	ldr	r1, [pc, #248]	; (b5170 <_GLOBAL__sub_I_sd+0x118>)
   b5078:	6063      	str	r3, [r4, #4]
   b507a:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b507e:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b5082:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   b5086:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b508a:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b508e:	7829      	ldrb	r1, [r5, #0]
   b5090:	f3bf 8f5b 	dmb	ish
   b5094:	4011      	ands	r1, r2
   b5096:	b08e      	sub	sp, #56	; 0x38
   b5098:	d10b      	bne.n	b50b2 <_GLOBAL__sub_I_sd+0x5a>
   b509a:	4628      	mov	r0, r5
   b509c:	9101      	str	r1, [sp, #4]
   b509e:	f7ff fc3b 	bl	b4918 <__cxa_guard_acquire>
   b50a2:	9901      	ldr	r1, [sp, #4]
   b50a4:	b128      	cbz	r0, b50b2 <_GLOBAL__sub_I_sd+0x5a>
   b50a6:	4833      	ldr	r0, [pc, #204]	; (b5174 <_GLOBAL__sub_I_sd+0x11c>)
   b50a8:	f001 ff1d 	bl	b6ee6 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b50ac:	4628      	mov	r0, r5
   b50ae:	f7ff fc38 	bl	b4922 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b50b2:	4b30      	ldr	r3, [pc, #192]	; (b5174 <_GLOBAL__sub_I_sd+0x11c>)
   b50b4:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
              error_(SYSTEM_ERROR_NONE) {
   b50b8:	4b2f      	ldr	r3, [pc, #188]	; (b5178 <_GLOBAL__sub_I_sd+0x120>)
    SleepResult() {}
   b50ba:	4a30      	ldr	r2, [pc, #192]	; (b517c <_GLOBAL__sub_I_sd+0x124>)
   b50bc:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b50be:	2400      	movs	r4, #0
   b50c0:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b50c4:	2002      	movs	r0, #2
   b50c6:	f001 fd5b 	bl	b6b80 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b50ca:	4621      	mov	r1, r4
   b50cc:	2001      	movs	r0, #1
   b50ce:	f001 fd67 	bl	b6ba0 <system_thread_set_state>
FuelGauge batteryMonitor;
   b50d2:	4621      	mov	r1, r4
   b50d4:	482a      	ldr	r0, [pc, #168]	; (b5180 <_GLOBAL__sub_I_sd+0x128>)
        filter_(level, filters) {
   b50d6:	4d2b      	ldr	r5, [pc, #172]	; (b5184 <_GLOBAL__sub_I_sd+0x12c>)
   b50d8:	f003 fa10 	bl	b84fc <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b50dc:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b50e0:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b50e2:	f003 feaf 	bl	b8e44 <_Z16_fetch_usbserialv>
   b50e6:	a902      	add	r1, sp, #8
   b50e8:	4606      	mov	r6, r0
   b50ea:	a805      	add	r0, sp, #20
   b50ec:	f7ff ff82 	bl	b4ff4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b50f0:	a905      	add	r1, sp, #20
   b50f2:	a808      	add	r0, sp, #32
   b50f4:	f7ff ff7e 	bl	b4ff4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b50f8:	4b23      	ldr	r3, [pc, #140]	; (b5188 <_GLOBAL__sub_I_sd+0x130>)
   b50fa:	602b      	str	r3, [r5, #0]
   b50fc:	a908      	add	r1, sp, #32
   b50fe:	a80b      	add	r0, sp, #44	; 0x2c
   b5100:	f7ff ff78 	bl	b4ff4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5104:	aa0b      	add	r2, sp, #44	; 0x2c
   b5106:	211e      	movs	r1, #30
   b5108:	1d28      	adds	r0, r5, #4
   b510a:	f002 fe65 	bl	b7dd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b510e:	a80b      	add	r0, sp, #44	; 0x2c
   b5110:	f7ff fd24 	bl	b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5114:	a808      	add	r0, sp, #32
   b5116:	f7ff fd21 	bl	b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b511a:	4b1c      	ldr	r3, [pc, #112]	; (b518c <_GLOBAL__sub_I_sd+0x134>)
   b511c:	602b      	str	r3, [r5, #0]
   b511e:	622e      	str	r6, [r5, #32]
   b5120:	a805      	add	r0, sp, #20
   b5122:	f7ff fd1b 	bl	b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5126:	4b1a      	ldr	r3, [pc, #104]	; (b5190 <_GLOBAL__sub_I_sd+0x138>)
   b5128:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b512a:	f003 fe8b 	bl	b8e44 <_Z16_fetch_usbserialv>
   b512e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5132:	f003 fe77 	bl	b8e24 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5136:	f002 fb1f 	bl	b7778 <_ZN5spark10LogManager8instanceEv>
   b513a:	4629      	mov	r1, r5
   b513c:	f002 fd22 	bl	b7b84 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b5140:	a802      	add	r0, sp, #8
   b5142:	f7ff fd0b 	bl	b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   b5146:	4b13      	ldr	r3, [pc, #76]	; (b5194 <_GLOBAL__sub_I_sd+0x13c>)
   b5148:	1d1a      	adds	r2, r3, #4
   b514a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b514c:	4a12      	ldr	r2, [pc, #72]	; (b5198 <_GLOBAL__sub_I_sd+0x140>)
   b514e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5150:	2201      	movs	r2, #1
   b5152:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5156:	611c      	str	r4, [r3, #16]
   b5158:	751a      	strb	r2, [r3, #20]
   b515a:	b00e      	add	sp, #56	; 0x38
   b515c:	bd70      	pop	{r4, r5, r6, pc}
   b515e:	bf00      	nop
   b5160:	2003ddd0 	.word	0x2003ddd0
   b5164:	2003ddd1 	.word	0x2003ddd1
   b5168:	2003e1c0 	.word	0x2003e1c0
   b516c:	2003ddb8 	.word	0x2003ddb8
   b5170:	000b9e5c 	.word	0x000b9e5c
   b5174:	2003ddbc 	.word	0x2003ddbc
   b5178:	2003ddc4 	.word	0x2003ddc4
   b517c:	ffff0000 	.word	0xffff0000
   b5180:	2003ddd4 	.word	0x2003ddd4
   b5184:	2003e190 	.word	0x2003e190
   b5188:	000b9e70 	.word	0x000b9e70
   b518c:	000b9fd8 	.word	0x000b9fd8
   b5190:	000b9e88 	.word	0x000b9e88
   b5194:	2003dddc 	.word	0x2003dddc
   b5198:	00030010 	.word	0x00030010

000b519c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b519c:	2904      	cmp	r1, #4
   b519e:	d804      	bhi.n	b51aa <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b51a0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b51a4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b51a8:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b51aa:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b51ac:	bf9b      	ittet	ls
   b51ae:	f101 31ff 	addls.w	r1, r1, #4294967295
   b51b2:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b51b6:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b51b8:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b51ba:	bf84      	itt	hi
   b51bc:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b51c0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b51c2:	4770      	bx	lr

000b51c4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b51c4:	b510      	push	{r4, lr}
   b51c6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b51c8:	3024      	adds	r0, #36	; 0x24
   b51ca:	f000 fe63 	bl	b5e94 <_ZN8FatCache4syncEv>
   b51ce:	b128      	cbz	r0, b51dc <_ZN9FatVolume9cacheSyncEv+0x18>
   b51d0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b51d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b51d8:	f000 be5c 	b.w	b5e94 <_ZN8FatCache4syncEv>
  }
   b51dc:	bd10      	pop	{r4, pc}

000b51de <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b51de:	1e41      	subs	r1, r0, #1
   b51e0:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b51e4:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b51e6:	0842      	lsrs	r2, r0, #1
   b51e8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b51ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b51f0:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b51f4:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b51f6:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b51f8:	d1f5      	bne.n	b51e6 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b51fa:	4770      	bx	lr

000b51fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b51fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5200:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5202:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5206:	2b20      	cmp	r3, #32
   b5208:	d0fa      	beq.n	b5200 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b520a:	4d6a      	ldr	r5, [pc, #424]	; (b53b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b520c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b520e:	2400      	movs	r4, #0
    c = path[len];
   b5210:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5212:	b1c3      	cbz	r3, b5246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5214:	2b2f      	cmp	r3, #47	; 0x2f
   b5216:	d016      	beq.n	b5246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5218:	2b5c      	cmp	r3, #92	; 0x5c
   b521a:	d102      	bne.n	b5222 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b521c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5222:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5226:	b2c0      	uxtb	r0, r0
   b5228:	281d      	cmp	r0, #29
   b522a:	d803      	bhi.n	b5234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b522c:	fa25 f000 	lsr.w	r0, r5, r0
   b5230:	07c0      	lsls	r0, r0, #31
   b5232:	d4f3      	bmi.n	b521c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5234:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5238:	283c      	cmp	r0, #60	; 0x3c
   b523a:	d0ef      	beq.n	b521c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b523c:	3b20      	subs	r3, #32
   b523e:	2b5e      	cmp	r3, #94	; 0x5e
   b5240:	d8ec      	bhi.n	b521c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5242:	3401      	adds	r4, #1
    c = path[len];
   b5244:	e7e4      	b.n	b5210 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5246:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5248:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b524a:	4607      	mov	r7, r0
   b524c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5250:	2d20      	cmp	r5, #32
   b5252:	d0fa      	beq.n	b524a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5254:	2d2f      	cmp	r5, #47	; 0x2f
   b5256:	d0f8      	beq.n	b524a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5258:	6017      	str	r7, [r2, #0]
  while (len) {
   b525a:	b14c      	cbz	r4, b5270 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b525c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5260:	2a2e      	cmp	r2, #46	; 0x2e
   b5262:	d001      	beq.n	b5268 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5264:	2a20      	cmp	r2, #32
   b5266:	d101      	bne.n	b526c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5268:	3c01      	subs	r4, #1
  while (len) {
   b526a:	e7f6      	b.n	b525a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b526c:	2cff      	cmp	r4, #255	; 0xff
   b526e:	dcd5      	bgt.n	b521c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5270:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5274:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5278:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b527a:	f8c1 300d 	str.w	r3, [r1, #13]
   b527e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5280:	f04f 0800 	mov.w	r8, #0
   b5284:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5288:	2b2e      	cmp	r3, #46	; 0x2e
   b528a:	d001      	beq.n	b5290 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b528c:	2b20      	cmp	r3, #32
   b528e:	d102      	bne.n	b5296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5290:	f108 0801 	add.w	r8, r8, #1
   b5294:	e7f6      	b.n	b5284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5296:	fab8 f088 	clz	r0, r8
   b529a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b529c:	1e65      	subs	r5, r4, #1
   b529e:	1c6b      	adds	r3, r5, #1
   b52a0:	d002      	beq.n	b52a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b52a2:	5d73      	ldrb	r3, [r6, r5]
   b52a4:	2b2e      	cmp	r3, #46	; 0x2e
   b52a6:	d114      	bne.n	b52d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b52a8:	f04f 0900 	mov.w	r9, #0
   b52ac:	2707      	movs	r7, #7
   b52ae:	464a      	mov	r2, r9
   b52b0:	46ca      	mov	sl, r9
   b52b2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b52b6:	45a0      	cmp	r8, r4
   b52b8:	da68      	bge.n	b538c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b52ba:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b52be:	2b20      	cmp	r3, #32
   b52c0:	d003      	beq.n	b52ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b52c2:	2b2e      	cmp	r3, #46	; 0x2e
   b52c4:	d107      	bne.n	b52d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b52c6:	45a8      	cmp	r8, r5
   b52c8:	d012      	beq.n	b52f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b52ca:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b52cc:	f108 0801 	add.w	r8, r8, #1
   b52d0:	e7f1      	b.n	b52b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b52d2:	3d01      	subs	r5, #1
   b52d4:	e7e3      	b.n	b529e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b52d6:	2b22      	cmp	r3, #34	; 0x22
   b52d8:	d008      	beq.n	b52ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b52da:	2b7c      	cmp	r3, #124	; 0x7c
   b52dc:	d006      	beq.n	b52ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b52de:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b52e2:	f1bc 0f05 	cmp.w	ip, #5
   b52e6:	d80a      	bhi.n	b52fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b52e8:	2b2d      	cmp	r3, #45	; 0x2d
   b52ea:	d012      	beq.n	b5312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b52ec:	45a8      	cmp	r8, r5
   b52ee:	d15b      	bne.n	b53a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b52f0:	2f0a      	cmp	r7, #10
   b52f2:	d04a      	beq.n	b538a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b52f4:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b52f6:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b52f8:	f04f 0e10 	mov.w	lr, #16
   b52fc:	e7e6      	b.n	b52cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b52fe:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5302:	f1bc 0f05 	cmp.w	ip, #5
   b5306:	d9f1      	bls.n	b52ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5308:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b530c:	f1bc 0f02 	cmp.w	ip, #2
   b5310:	d9ec      	bls.n	b52ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5312:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5316:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b531a:	d8e7      	bhi.n	b52ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b531c:	45a8      	cmp	r8, r5
   b531e:	d0e7      	beq.n	b52f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5320:	42ba      	cmp	r2, r7
   b5322:	d830      	bhi.n	b5386 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5324:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5328:	f1bc 0f19 	cmp.w	ip, #25
   b532c:	d81a      	bhi.n	b5364 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b532e:	3b20      	subs	r3, #32
        lc |= bit;
   b5330:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5334:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5336:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b533a:	f102 0c01 	add.w	ip, r2, #1
   b533e:	fa5f fc8c 	uxtb.w	ip, ip
   b5342:	440a      	add	r2, r1
      if (i < 7) {
   b5344:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5348:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b534a:	d801      	bhi.n	b5350 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b534c:	f881 c00c 	strb.w	ip, [r1, #12]
   b5350:	4662      	mov	r2, ip
   b5352:	e7bb      	b.n	b52cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5354:	45a8      	cmp	r8, r5
   b5356:	dc18      	bgt.n	b538a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5358:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b535a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b535c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b535e:	f04f 0e10 	mov.w	lr, #16
   b5362:	e7b2      	b.n	b52ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5364:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5368:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b536c:	bf98      	it	ls
   b536e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5372:	e7e2      	b.n	b533a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5374:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5376:	2001      	movs	r0, #1
   b5378:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b537a:	4419      	add	r1, r3
   b537c:	237e      	movs	r3, #126	; 0x7e
   b537e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5380:	2331      	movs	r3, #49	; 0x31
   b5382:	738b      	strb	r3, [r1, #14]
   b5384:	e74b      	b.n	b521e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5386:	2f0a      	cmp	r7, #10
   b5388:	d1e4      	bne.n	b5354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b538a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b538c:	7b4b      	ldrb	r3, [r1, #13]
   b538e:	2b20      	cmp	r3, #32
   b5390:	f43f af44 	beq.w	b521c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5394:	2800      	cmp	r0, #0
   b5396:	d0ed      	beq.n	b5374 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5398:	ea1a 0f09 	tst.w	sl, r9
   b539c:	bf18      	it	ne
   b539e:	f04f 0902 	movne.w	r9, #2
   b53a2:	f881 9000 	strb.w	r9, [r1]
   b53a6:	e73a      	b.n	b521e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b53a8:	42ba      	cmp	r2, r7
   b53aa:	d8ec      	bhi.n	b5386 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b53ac:	2000      	movs	r0, #0
      c = '_';
   b53ae:	235f      	movs	r3, #95	; 0x5f
   b53b0:	e7c3      	b.n	b533a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b53b2:	bf00      	nop
   b53b4:	31000101 	.word	0x31000101

000b53b8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b53b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b53bc:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b53c0:	4606      	mov	r6, r0
   b53c2:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b53c4:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b53c6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b53c8:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b53cc:	6861      	ldr	r1, [r4, #4]
   b53ce:	68a2      	ldr	r2, [r4, #8]
   b53d0:	186b      	adds	r3, r5, r1
   b53d2:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b53d4:	4411      	add	r1, r2
   b53d6:	4291      	cmp	r1, r2
   b53d8:	d006      	beq.n	b53e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b53da:	f812 0b01 	ldrb.w	r0, [r2], #1
   b53de:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b53e2:	4043      	eors	r3, r0
   b53e4:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b53e6:	e7f6      	b.n	b53d6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b53e8:	f1b9 0f03 	cmp.w	r9, #3
   b53ec:	bf28      	it	cs
   b53ee:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b53f2:	f109 0204 	add.w	r2, r9, #4
   b53f6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b53f8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b53fc:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b53fe:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5400:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5402:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5404:	bf94      	ite	ls
   b5406:	3130      	addls	r1, #48	; 0x30
   b5408:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b540a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b540c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b540e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5412:	d1f1      	bne.n	b53f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5414:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5418:	2100      	movs	r1, #0
   b541a:	735f      	strb	r7, [r3, #13]
   b541c:	4630      	mov	r0, r6
   b541e:	f000 fb2a 	bl	b5a76 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5422:	2101      	movs	r1, #1
   b5424:	4630      	mov	r0, r6
   b5426:	f000 fb07 	bl	b5a38 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b542a:	4601      	mov	r1, r0
   b542c:	b928      	cbnz	r0, b543a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b542e:	7870      	ldrb	r0, [r6, #1]
   b5430:	fab0 f080 	clz	r0, r0
   b5434:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b543a:	7803      	ldrb	r3, [r0, #0]
   b543c:	b16b      	cbz	r3, b545a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b543e:	7ac3      	ldrb	r3, [r0, #11]
   b5440:	071b      	lsls	r3, r3, #28
   b5442:	d4ee      	bmi.n	b5422 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5444:	220b      	movs	r2, #11
   b5446:	4640      	mov	r0, r8
   b5448:	f004 fa6a 	bl	b9920 <memcmp>
   b544c:	2800      	cmp	r0, #0
   b544e:	d1e8      	bne.n	b5422 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b5450:	3501      	adds	r5, #1
   b5452:	b2ad      	uxth	r5, r5
   b5454:	2d64      	cmp	r5, #100	; 0x64
   b5456:	d1b9      	bne.n	b53cc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b5458:	e7ed      	b.n	b5436 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b545a:	2001      	movs	r0, #1
   b545c:	e7eb      	b.n	b5436 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b5460 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5464:	ed2d 8b02 	vpush	{d8}
   b5468:	b08b      	sub	sp, #44	; 0x2c
   b546a:	460d      	mov	r5, r1
   b546c:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b546e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5470:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b5472:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5476:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b5478:	d105      	bne.n	b5486 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b547a:	2000      	movs	r0, #0
}
   b547c:	b00b      	add	sp, #44	; 0x2c
   b547e:	ecbd 8b02 	vpop	{d8}
   b5482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b5486:	9b07      	ldr	r3, [sp, #28]
   b5488:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b548a:	2b00      	cmp	r3, #0
   b548c:	d1f5      	bne.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b548e:	6853      	ldr	r3, [r2, #4]
   b5490:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5492:	7813      	ldrb	r3, [r2, #0]
   b5494:	079c      	lsls	r4, r3, #30
   b5496:	bf1f      	itttt	ne
   b5498:	9b05      	ldrne	r3, [sp, #20]
   b549a:	330c      	addne	r3, #12
   b549c:	220d      	movne	r2, #13
   b549e:	fbb3 f3f2 	udivne	r3, r3, r2
   b54a2:	bf1a      	itte	ne
   b54a4:	3301      	addne	r3, #1
   b54a6:	b2db      	uxtbne	r3, r3
   b54a8:	2301      	moveq	r3, #1
    seekSet(0);
   b54aa:	2100      	movs	r1, #0
   b54ac:	4628      	mov	r0, r5
   b54ae:	9303      	str	r3, [sp, #12]
   b54b0:	f000 fae1 	bl	b5a76 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b54b4:	f107 030d 	add.w	r3, r7, #13
  }
   b54b8:	f04f 0b00 	mov.w	fp, #0
   b54bc:	ee08 3a10 	vmov	s16, r3
   b54c0:	46da      	mov	sl, fp
   b54c2:	465c      	mov	r4, fp
   b54c4:	465e      	mov	r6, fp
   b54c6:	f8cd b010 	str.w	fp, [sp, #16]
   b54ca:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b54cc:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b54ce:	2101      	movs	r1, #1
   b54d0:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b54d2:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b54d6:	f000 faaf 	bl	b5a38 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b54da:	4603      	mov	r3, r0
   b54dc:	2800      	cmp	r0, #0
   b54de:	d171      	bne.n	b55c4 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b54e0:	786b      	ldrb	r3, [r5, #1]
   b54e2:	2b00      	cmp	r3, #0
   b54e4:	d1c9      	bne.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b54e6:	9b06      	ldr	r3, [sp, #24]
   b54e8:	059a      	lsls	r2, r3, #22
   b54ea:	d5c6      	bpl.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b54ec:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b54f0:	3b01      	subs	r3, #1
   b54f2:	2b01      	cmp	r3, #1
   b54f4:	d8c1      	bhi.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b54f6:	9b04      	ldr	r3, [sp, #16]
   b54f8:	2c00      	cmp	r4, #0
   b54fa:	bf08      	it	eq
   b54fc:	4643      	moveq	r3, r8
   b54fe:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5500:	9b03      	ldr	r3, [sp, #12]
   b5502:	429c      	cmp	r4, r3
   b5504:	f0c0 80f1 	bcc.w	b56ea <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5508:	f1b9 0f00 	cmp.w	r9, #0
   b550c:	f040 810a 	bne.w	b5724 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b5510:	9b04      	ldr	r3, [sp, #16]
   b5512:	4628      	mov	r0, r5
   b5514:	0159      	lsls	r1, r3, #5
   b5516:	f000 faae 	bl	b5a76 <_ZN7FatFile7seekSetEm>
   b551a:	2800      	cmp	r0, #0
   b551c:	d0ad      	beq.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b551e:	9b03      	ldr	r3, [sp, #12]
   b5520:	f103 39ff 	add.w	r9, r3, #4294967295
   b5524:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5528:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b552a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b552e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5532:	2e00      	cmp	r6, #0
   b5534:	f000 810d 	beq.w	b5752 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5538:	2100      	movs	r1, #0
   b553a:	4628      	mov	r0, r5
   b553c:	f000 fa7c 	bl	b5a38 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5540:	4604      	mov	r4, r0
   b5542:	2800      	cmp	r0, #0
   b5544:	d099      	beq.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b5546:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5548:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b554c:	454e      	cmp	r6, r9
   b554e:	f043 0301 	orr.w	r3, r3, #1
   b5552:	bf0c      	ite	eq
   b5554:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b5558:	46b3      	movne	fp, r6
   b555a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b555e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b5562:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b5566:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b556a:	f107 000d 	add.w	r0, r7, #13
   b556e:	f7ff fe36 	bl	b51de <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b5572:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b5576:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b5578:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b557c:	f00b 031f 	and.w	r3, fp, #31
   b5580:	220d      	movs	r2, #13
   b5582:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b5584:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5588:	4353      	muls	r3, r2
   b558a:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b558c:	9905      	ldr	r1, [sp, #20]
   b558e:	4299      	cmp	r1, r3
   b5590:	f240 80d0 	bls.w	b5734 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5594:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b5598:	2a04      	cmp	r2, #4
   b559a:	fa5f fe82 	uxtb.w	lr, r2
   b559e:	f102 0001 	add.w	r0, r2, #1
   b55a2:	f200 80cd 	bhi.w	b5740 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b55a6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b55aa:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b55ae:	280d      	cmp	r0, #13
   b55b0:	f103 0301 	add.w	r3, r3, #1
   b55b4:	4602      	mov	r2, r0
   b55b6:	d1e9      	bne.n	b558c <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b55b8:	3e01      	subs	r6, #1
   b55ba:	b2f6      	uxtb	r6, r6
   b55bc:	e7b9      	b.n	b5532 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b55be:	f04f 0901 	mov.w	r9, #1
   b55c2:	e783      	b.n	b54cc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b55c4:	7802      	ldrb	r2, [r0, #0]
   b55c6:	2ae5      	cmp	r2, #229	; 0xe5
   b55c8:	d000      	beq.n	b55cc <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b55ca:	b97a      	cbnz	r2, b55ec <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b55cc:	9904      	ldr	r1, [sp, #16]
   b55ce:	2c00      	cmp	r4, #0
   b55d0:	bf08      	it	eq
   b55d2:	4641      	moveq	r1, r8
   b55d4:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b55d6:	9903      	ldr	r1, [sp, #12]
   b55d8:	428c      	cmp	r4, r1
        freeFound++;
   b55da:	bf3c      	itt	cc
   b55dc:	3401      	addcc	r4, #1
   b55de:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b55e0:	2a00      	cmp	r2, #0
   b55e2:	d080      	beq.n	b54e6 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b55e4:	2ae5      	cmp	r2, #229	; 0xe5
   b55e6:	d105      	bne.n	b55f4 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b55e8:	2600      	movs	r6, #0
   b55ea:	e76f      	b.n	b54cc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b55ec:	9903      	ldr	r1, [sp, #12]
   b55ee:	428c      	cmp	r4, r1
   b55f0:	bf38      	it	cc
   b55f2:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b55f4:	2a2e      	cmp	r2, #46	; 0x2e
   b55f6:	d0f7      	beq.n	b55e8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b55f8:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b55fa:	290f      	cmp	r1, #15
   b55fc:	d14a      	bne.n	b5694 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b55fe:	bb16      	cbnz	r6, b5646 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b5600:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b5604:	f43f af62 	beq.w	b54cc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b5608:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b560c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b5610:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b5612:	220d      	movs	r2, #13
   b5614:	f10a 38ff 	add.w	r8, sl, #4294967295
   b5618:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b561c:	9a05      	ldr	r2, [sp, #20]
   b561e:	4542      	cmp	r2, r8
   b5620:	d9e2      	bls.n	b55e8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5622:	eba2 0208 	sub.w	r2, r2, r8
   b5626:	9208      	str	r2, [sp, #32]
   b5628:	2200      	movs	r2, #0
   b562a:	eb02 0108 	add.w	r1, r2, r8
   b562e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b5630:	4618      	mov	r0, r3
   b5632:	b2d1      	uxtb	r1, r2
   b5634:	f7ff fdb2 	bl	b519c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b5638:	9908      	ldr	r1, [sp, #32]
   b563a:	428a      	cmp	r2, r1
   b563c:	d10d      	bne.n	b565a <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b563e:	2800      	cmp	r0, #0
   b5640:	bf18      	it	ne
   b5642:	2600      	movne	r6, #0
   b5644:	e742      	b.n	b54cc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b5646:	f10a 3aff 	add.w	sl, sl, #4294967295
   b564a:	fa5f fa8a 	uxtb.w	sl, sl
   b564e:	4552      	cmp	r2, sl
   b5650:	d1ca      	bne.n	b55e8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5652:	7b5a      	ldrb	r2, [r3, #13]
   b5654:	455a      	cmp	r2, fp
   b5656:	d0dc      	beq.n	b5612 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b5658:	e7c6      	b.n	b55e8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b565a:	28ff      	cmp	r0, #255	; 0xff
   b565c:	d8c4      	bhi.n	b55e8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b565e:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5662:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b5666:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5668:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b566a:	bf9c      	itt	ls
   b566c:	f10e 0020 	addls.w	r0, lr, #32
   b5670:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5674:	4608      	mov	r0, r1
   b5676:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5678:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b567a:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b567e:	f1bc 0f19 	cmp.w	ip, #25
   b5682:	bf9c      	itt	ls
   b5684:	3120      	addls	r1, #32
   b5686:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5688:	4571      	cmp	r1, lr
   b568a:	d1ad      	bne.n	b55e8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b568c:	3201      	adds	r2, #1
   b568e:	2a0d      	cmp	r2, #13
   b5690:	d1cb      	bne.n	b562a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b5692:	e71b      	b.n	b54cc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5694:	0708      	lsls	r0, r1, #28
   b5696:	d4a7      	bmi.n	b55e8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b5698:	b15e      	cbz	r6, b56b2 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b569a:	f1ba 0f01 	cmp.w	sl, #1
   b569e:	f47f aeec 	bne.w	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b56a2:	4618      	mov	r0, r3
   b56a4:	f7ff fd9b 	bl	b51de <_ZN7FatFile11lfnChecksumEPh>
   b56a8:	4558      	cmp	r0, fp
   b56aa:	f47f aee6 	bne.w	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b56ae:	46b1      	mov	r9, r6
   b56b0:	e00e      	b.n	b56d0 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b56b2:	ee18 1a10 	vmov	r1, s16
   b56b6:	220b      	movs	r2, #11
   b56b8:	4618      	mov	r0, r3
   b56ba:	f004 f931 	bl	b9920 <memcmp>
   b56be:	2800      	cmp	r0, #0
   b56c0:	f47f af04 	bne.w	b54cc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b56c4:	f897 9000 	ldrb.w	r9, [r7]
   b56c8:	f019 0901 	ands.w	r9, r9, #1
   b56cc:	f47f af77 	bne.w	b55be <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b56d0:	9b06      	ldr	r3, [sp, #24]
   b56d2:	0519      	lsls	r1, r3, #20
   b56d4:	f53f aed1 	bmi.w	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b56d8:	9b06      	ldr	r3, [sp, #24]
   b56da:	9807      	ldr	r0, [sp, #28]
   b56dc:	f8cd 9000 	str.w	r9, [sp]
   b56e0:	4642      	mov	r2, r8
   b56e2:	4629      	mov	r1, r5
   b56e4:	f000 fa0a 	bl	b5afc <_ZN7FatFile15openCachedEntryEPS_tih>
   b56e8:	e6c8      	b.n	b547c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b56ea:	2100      	movs	r1, #0
   b56ec:	4628      	mov	r0, r5
   b56ee:	f000 f9a3 	bl	b5a38 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b56f2:	b9a0      	cbnz	r0, b571e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b56f4:	786b      	ldrb	r3, [r5, #1]
   b56f6:	2b00      	cmp	r3, #0
   b56f8:	f47f aebf 	bne.w	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b56fc:	4628      	mov	r0, r5
   b56fe:	f000 f887 	bl	b5810 <_ZN7FatFile13addDirClusterEv>
   b5702:	2800      	cmp	r0, #0
   b5704:	f43f aeb9 	beq.w	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b5708:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b570a:	791b      	ldrb	r3, [r3, #4]
   b570c:	2b01      	cmp	r3, #1
   b570e:	f63f aefb 	bhi.w	b5508 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b5712:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b5714:	3410      	adds	r4, #16
   b5716:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5718:	42a3      	cmp	r3, r4
   b571a:	d8ef      	bhi.n	b56fc <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b571c:	e6f4      	b.n	b5508 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b571e:	3401      	adds	r4, #1
   b5720:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5722:	e6ed      	b.n	b5500 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5724:	4639      	mov	r1, r7
   b5726:	4628      	mov	r0, r5
   b5728:	f7ff fe46 	bl	b53b8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b572c:	2800      	cmp	r0, #0
   b572e:	f47f aeef 	bne.w	b5510 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b5732:	e6a2      	b.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5734:	bf14      	ite	ne
   b5736:	f04f 31ff 	movne.w	r1, #4294967295
   b573a:	2100      	moveq	r1, #0
   b573c:	b289      	uxth	r1, r1
   b573e:	e72b      	b.n	b5598 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5740:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b5744:	bf94      	ite	ls
   b5746:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b574a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b574e:	8091      	strh	r1, [r2, #4]
   b5750:	e72d      	b.n	b55ae <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b5752:	4631      	mov	r1, r6
   b5754:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b5756:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b575a:	f000 f96d 	bl	b5a38 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b575e:	4604      	mov	r4, r0
   b5760:	2800      	cmp	r0, #0
   b5762:	f43f ae8a 	beq.w	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b5766:	2220      	movs	r2, #32
   b5768:	4631      	mov	r1, r6
   b576a:	f004 f911 	bl	b9990 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b576e:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b5772:	6023      	str	r3, [r4, #0]
   b5774:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b5778:	6063      	str	r3, [r4, #4]
   b577a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b577e:	8123      	strh	r3, [r4, #8]
   b5780:	7dfb      	ldrb	r3, [r7, #23]
   b5782:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b5784:	783b      	ldrb	r3, [r7, #0]
   b5786:	f003 0318 	and.w	r3, r3, #24
   b578a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b578c:	4b0f      	ldr	r3, [pc, #60]	; (b57cc <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b578e:	681b      	ldr	r3, [r3, #0]
   b5790:	b19b      	cbz	r3, b57ba <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5792:	f104 010e 	add.w	r1, r4, #14
   b5796:	f104 0010 	add.w	r0, r4, #16
   b579a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b579c:	8a23      	ldrh	r3, [r4, #16]
   b579e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b57a0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b57a2:	89e3      	ldrh	r3, [r4, #14]
   b57a4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b57a6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b57a8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b57ac:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b57b0:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b57b4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b57b8:	e78e      	b.n	b56d8 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b57ba:	2321      	movs	r3, #33	; 0x21
   b57bc:	7423      	strb	r3, [r4, #16]
   b57be:	2328      	movs	r3, #40	; 0x28
   b57c0:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b57c2:	2308      	movs	r3, #8
   b57c4:	73a6      	strb	r6, [r4, #14]
   b57c6:	73e3      	strb	r3, [r4, #15]
   b57c8:	e7e8      	b.n	b579c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b57ca:	bf00      	nop
   b57cc:	2003e64c 	.word	0x2003e64c

000b57d0 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b57d0:	b538      	push	{r3, r4, r5, lr}
   b57d2:	4604      	mov	r4, r0
   b57d4:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b57d6:	2224      	movs	r2, #36	; 0x24
   b57d8:	2100      	movs	r1, #0
   b57da:	f004 f8d9 	bl	b9990 <memset>

  m_vol = vol;
   b57de:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b57e0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b57e2:	2b10      	cmp	r3, #16
   b57e4:	d003      	beq.n	b57ee <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b57e6:	2b20      	cmp	r3, #32
   b57e8:	d006      	beq.n	b57f8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b57ea:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b57ec:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b57ee:	2320      	movs	r3, #32
  m_flags = F_READ;
   b57f0:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b57f2:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b57f4:	70a0      	strb	r0, [r4, #2]
  return true;
   b57f6:	e7f9      	b.n	b57ec <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b57f8:	2340      	movs	r3, #64	; 0x40
   b57fa:	e7f9      	b.n	b57f0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b57fc <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b57fc:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b57fe:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5800:	f043 0304 	orr.w	r3, r3, #4
   b5804:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5806:	f100 0210 	add.w	r2, r0, #16
   b580a:	6880      	ldr	r0, [r0, #8]
   b580c:	f000 bbf8 	b.w	b6000 <_ZN9FatVolume15allocateClusterEmPm>

000b5810 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5814:	7801      	ldrb	r1, [r0, #0]
   b5816:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b581a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b581c:	d003      	beq.n	b5826 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b581e:	2600      	movs	r6, #0
}
   b5820:	4630      	mov	r0, r6
   b5822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5826:	6942      	ldr	r2, [r0, #20]
   b5828:	4b17      	ldr	r3, [pc, #92]	; (b5888 <_ZN7FatFile13addDirClusterEv+0x78>)
   b582a:	429a      	cmp	r2, r3
   b582c:	d2f7      	bcs.n	b581e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b582e:	f7ff ffe5 	bl	b57fc <_ZN7FatFile10addClusterEv>
   b5832:	4606      	mov	r6, r0
   b5834:	2800      	cmp	r0, #0
   b5836:	d0f2      	beq.n	b581e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5838:	6921      	ldr	r1, [r4, #16]
   b583a:	68a0      	ldr	r0, [r4, #8]
   b583c:	f000 fb75 	bl	b5f2a <_ZNK9FatVolume17clusterFirstBlockEm>
   b5840:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b5842:	68a0      	ldr	r0, [r4, #8]
   b5844:	2205      	movs	r2, #5
   b5846:	4639      	mov	r1, r7
   b5848:	3024      	adds	r0, #36	; 0x24
   b584a:	f000 fb4b 	bl	b5ee4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b584e:	4680      	mov	r8, r0
   b5850:	2800      	cmp	r0, #0
   b5852:	d0e4      	beq.n	b581e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5854:	4629      	mov	r1, r5
   b5856:	f44f 7200 	mov.w	r2, #512	; 0x200
   b585a:	f004 f899 	bl	b9990 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b585e:	2501      	movs	r5, #1
   b5860:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5862:	791a      	ldrb	r2, [r3, #4]
   b5864:	42aa      	cmp	r2, r5
   b5866:	d909      	bls.n	b587c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5868:	6818      	ldr	r0, [r3, #0]
   b586a:	4642      	mov	r2, r8
   b586c:	19e9      	adds	r1, r5, r7
   b586e:	f000 fea6 	bl	b65be <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5872:	2800      	cmp	r0, #0
   b5874:	d0d3      	beq.n	b581e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5876:	3501      	adds	r5, #1
   b5878:	b2ed      	uxtb	r5, r5
   b587a:	e7f1      	b.n	b5860 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b587c:	6963      	ldr	r3, [r4, #20]
   b587e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5882:	6163      	str	r3, [r4, #20]
  return true;
   b5884:	e7cc      	b.n	b5820 <_ZN7FatFile13addDirClusterEv+0x10>
   b5886:	bf00      	nop
   b5888:	001ffe00 	.word	0x001ffe00

000b588c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b588c:	b510      	push	{r4, lr}
   b588e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5890:	6880      	ldr	r0, [r0, #8]
   b5892:	460a      	mov	r2, r1
   b5894:	3024      	adds	r0, #36	; 0x24
   b5896:	69a1      	ldr	r1, [r4, #24]
   b5898:	f000 fb24 	bl	b5ee4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b589c:	b120      	cbz	r0, b58a8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b589e:	88a3      	ldrh	r3, [r4, #4]
   b58a0:	f003 030f 	and.w	r3, r3, #15
   b58a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b58a8:	bd10      	pop	{r4, pc}

000b58aa <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b58aa:	7803      	ldrb	r3, [r0, #0]
   b58ac:	b90b      	cbnz	r3, b58b2 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b58ae:	f7ff bf8f 	b.w	b57d0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b58b2:	2000      	movs	r0, #0
   b58b4:	4770      	bx	lr

000b58b6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b58b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b58ba:	7803      	ldrb	r3, [r0, #0]
   b58bc:	4604      	mov	r4, r0
   b58be:	4688      	mov	r8, r1
   b58c0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b58c2:	2b00      	cmp	r3, #0
   b58c4:	d05d      	beq.n	b5982 <_ZN7FatFile4readEPvj+0xcc>
   b58c6:	7882      	ldrb	r2, [r0, #2]
   b58c8:	07d1      	lsls	r1, r2, #31
   b58ca:	d55a      	bpl.n	b5982 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b58cc:	071a      	lsls	r2, r3, #28
   b58ce:	d52d      	bpl.n	b592c <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b58d0:	69c3      	ldr	r3, [r0, #28]
   b58d2:	6942      	ldr	r2, [r0, #20]
   b58d4:	1a9b      	subs	r3, r3, r2
   b58d6:	429d      	cmp	r5, r3
   b58d8:	bf28      	it	cs
   b58da:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b58dc:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b58de:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b58e2:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b58e6:	2e00      	cmp	r6, #0
   b58e8:	f000 808f 	beq.w	b5a0a <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b58ec:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b58ee:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b58f0:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b58f2:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b58f4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b58f8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b58fc:	d51f      	bpl.n	b593e <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b58fe:	6a00      	ldr	r0, [r0, #32]
   b5900:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b5902:	68a0      	ldr	r0, [r4, #8]
   b5904:	f1ba 0f00 	cmp.w	sl, #0
   b5908:	d142      	bne.n	b5990 <_ZN7FatFile4readEPvj+0xda>
   b590a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b590e:	d33f      	bcc.n	b5990 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b5910:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5912:	4299      	cmp	r1, r3
   b5914:	d03c      	beq.n	b5990 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b5916:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b591a:	d252      	bcs.n	b59c2 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b591c:	6800      	ldr	r0, [r0, #0]
   b591e:	4642      	mov	r2, r8
   b5920:	f000 fdc4 	bl	b64ac <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b5924:	b368      	cbz	r0, b5982 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b5926:	f44f 7700 	mov.w	r7, #512	; 0x200
   b592a:	e044      	b.n	b59b6 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b592c:	069b      	lsls	r3, r3, #26
   b592e:	d5d5      	bpl.n	b58dc <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b5930:	6883      	ldr	r3, [r0, #8]
   b5932:	891a      	ldrh	r2, [r3, #8]
   b5934:	6943      	ldr	r3, [r0, #20]
   b5936:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b593a:	b29b      	uxth	r3, r3
   b593c:	e7cb      	b.n	b58d6 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b593e:	f890 9005 	ldrb.w	r9, [r0, #5]
   b5942:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b5946:	f1ba 0f00 	cmp.w	sl, #0
   b594a:	d108      	bne.n	b595e <_ZN7FatFile4readEPvj+0xa8>
   b594c:	f1b9 0f00 	cmp.w	r9, #0
   b5950:	d105      	bne.n	b595e <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b5952:	b95b      	cbnz	r3, b596c <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5954:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b5956:	bf4c      	ite	mi
   b5958:	6a03      	ldrmi	r3, [r0, #32]
   b595a:	6a23      	ldrpl	r3, [r4, #32]
   b595c:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b595e:	6921      	ldr	r1, [r4, #16]
   b5960:	68a0      	ldr	r0, [r4, #8]
   b5962:	f000 fae2 	bl	b5f2a <_ZNK9FatVolume17clusterFirstBlockEm>
   b5966:	eb09 0100 	add.w	r1, r9, r0
   b596a:	e7ca      	b.n	b5902 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b596c:	6921      	ldr	r1, [r4, #16]
   b596e:	465a      	mov	r2, fp
   b5970:	f000 fae1 	bl	b5f36 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b5974:	2800      	cmp	r0, #0
   b5976:	db04      	blt.n	b5982 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b5978:	d1f1      	bne.n	b595e <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b597a:	7823      	ldrb	r3, [r4, #0]
   b597c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5980:	d143      	bne.n	b5a0a <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b5982:	7863      	ldrb	r3, [r4, #1]
   b5984:	f043 0302 	orr.w	r3, r3, #2
   b5988:	7063      	strb	r3, [r4, #1]
  return -1;
   b598a:	f04f 30ff 	mov.w	r0, #4294967295
   b598e:	e03d      	b.n	b5a0c <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5990:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5994:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b5996:	f04f 0200 	mov.w	r2, #0
   b599a:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b599e:	bf28      	it	cs
   b59a0:	4637      	movcs	r7, r6
   b59a2:	f000 fa9f 	bl	b5ee4 <_ZN8FatCache4readEmh>
      if (!pc) {
   b59a6:	2800      	cmp	r0, #0
   b59a8:	d0eb      	beq.n	b5982 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b59aa:	eb00 010a 	add.w	r1, r0, sl
   b59ae:	463a      	mov	r2, r7
   b59b0:	4640      	mov	r0, r8
   b59b2:	f003 ffc5 	bl	b9940 <memcpy>
    m_curPosition += n;
   b59b6:	6963      	ldr	r3, [r4, #20]
   b59b8:	443b      	add	r3, r7
    dst += n;
   b59ba:	44b8      	add	r8, r7
    m_curPosition += n;
   b59bc:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b59be:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b59c0:	e791      	b.n	b58e6 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b59c2:	7822      	ldrb	r2, [r4, #0]
   b59c4:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b59c6:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b59ca:	d406      	bmi.n	b59da <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b59cc:	7902      	ldrb	r2, [r0, #4]
   b59ce:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b59d2:	b2d2      	uxtb	r2, r2
   b59d4:	4592      	cmp	sl, r2
   b59d6:	bf28      	it	cs
   b59d8:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b59da:	4299      	cmp	r1, r3
      n = 512*nb;
   b59dc:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b59e0:	d208      	bcs.n	b59f4 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b59e2:	68a0      	ldr	r0, [r4, #8]
   b59e4:	4653      	mov	r3, sl
   b59e6:	6800      	ldr	r0, [r0, #0]
   b59e8:	4642      	mov	r2, r8
   b59ea:	f000 fda7 	bl	b653c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b59ee:	2800      	cmp	r0, #0
   b59f0:	d1e1      	bne.n	b59b6 <_ZN7FatFile4readEPvj+0x100>
   b59f2:	e7c6      	b.n	b5982 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b59f4:	4453      	add	r3, sl
   b59f6:	428b      	cmp	r3, r1
   b59f8:	d9f3      	bls.n	b59e2 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b59fa:	3024      	adds	r0, #36	; 0x24
   b59fc:	9101      	str	r1, [sp, #4]
   b59fe:	f000 fa49 	bl	b5e94 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b5a02:	9901      	ldr	r1, [sp, #4]
   b5a04:	2800      	cmp	r0, #0
   b5a06:	d1ec      	bne.n	b59e2 <_ZN7FatFile4readEPvj+0x12c>
   b5a08:	e7bb      	b.n	b5982 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b5a0a:	1ba8      	subs	r0, r5, r6
}
   b5a0c:	b003      	add	sp, #12
   b5a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5a12 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b5a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b5a14:	2201      	movs	r2, #1
   b5a16:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b5a1a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b5a1e:	4604      	mov	r4, r0
   b5a20:	f7ff ff49 	bl	b58b6 <_ZN7FatFile4readEPvj>
   b5a24:	2801      	cmp	r0, #1
   b5a26:	bf0a      	itet	eq
   b5a28:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b5a2c:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b5a30:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b5a34:	b002      	add	sp, #8
   b5a36:	bd70      	pop	{r4, r5, r6, pc}

000b5a38 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5a3a:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b5a3c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5a40:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5a42:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b5a46:	d000      	beq.n	b5a4a <_ZN7FatFile12readDirCacheEb+0x12>
   b5a48:	b999      	cbnz	r1, b5a72 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b5a4a:	2201      	movs	r2, #1
   b5a4c:	f10d 0107 	add.w	r1, sp, #7
   b5a50:	4620      	mov	r0, r4
   b5a52:	f7ff ff30 	bl	b58b6 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b5a56:	b240      	sxtb	r0, r0
   b5a58:	2801      	cmp	r0, #1
   b5a5a:	d002      	beq.n	b5a62 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b5a5c:	2000      	movs	r0, #0
}
   b5a5e:	b003      	add	sp, #12
   b5a60:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b5a62:	6963      	ldr	r3, [r4, #20]
   b5a64:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b5a66:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b5a68:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b5a6a:	3030      	adds	r0, #48	; 0x30
   b5a6c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b5a70:	e7f5      	b.n	b5a5e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b5a72:	3320      	adds	r3, #32
   b5a74:	e7f7      	b.n	b5a66 <_ZN7FatFile12readDirCacheEb+0x2e>

000b5a76 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b5a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b5a7a:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b5a7c:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b5a7e:	4604      	mov	r4, r0
   b5a80:	460d      	mov	r5, r1
  if (!isOpen()) {
   b5a82:	b162      	cbz	r2, b5a9e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b5a84:	6940      	ldr	r0, [r0, #20]
   b5a86:	4288      	cmp	r0, r1
   b5a88:	d002      	beq.n	b5a90 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b5a8a:	b919      	cbnz	r1, b5a94 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b5a8c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b5a8e:	6165      	str	r5, [r4, #20]
    return true;
   b5a90:	2001      	movs	r0, #1
   b5a92:	e006      	b.n	b5aa2 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b5a94:	0716      	lsls	r6, r2, #28
   b5a96:	d506      	bpl.n	b5aa6 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b5a98:	69e3      	ldr	r3, [r4, #28]
   b5a9a:	428b      	cmp	r3, r1
   b5a9c:	d20b      	bcs.n	b5ab6 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b5a9e:	6127      	str	r7, [r4, #16]
  return false;
   b5aa0:	2000      	movs	r0, #0
}
   b5aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b5aa6:	0691      	lsls	r1, r2, #26
   b5aa8:	d505      	bpl.n	b5ab6 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b5aaa:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b5aac:	891b      	ldrh	r3, [r3, #8]
   b5aae:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b5ab2:	d9ec      	bls.n	b5a8e <_ZN7FatFile7seekSetEm+0x18>
   b5ab4:	e7f3      	b.n	b5a9e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5ab6:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b5aba:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b5abe:	1e43      	subs	r3, r0, #1
   b5ac0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5ac4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5ac6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5ac8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b5aca:	42b3      	cmp	r3, r6
   b5acc:	d800      	bhi.n	b5ad0 <_ZN7FatFile7seekSetEm+0x5a>
   b5ace:	b998      	cbnz	r0, b5af8 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5ad0:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b5ad2:	bf4c      	ite	mi
   b5ad4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b5ad8:	6a23      	ldrpl	r3, [r4, #32]
   b5ada:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5adc:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b5ae0:	2e00      	cmp	r6, #0
   b5ae2:	d0d4      	beq.n	b5a8e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5ae4:	6921      	ldr	r1, [r4, #16]
   b5ae6:	68a0      	ldr	r0, [r4, #8]
   b5ae8:	4642      	mov	r2, r8
   b5aea:	f000 fa24 	bl	b5f36 <_ZN9FatVolume6fatGetEmPm>
   b5aee:	2800      	cmp	r0, #0
   b5af0:	f106 36ff 	add.w	r6, r6, #4294967295
   b5af4:	dcf4      	bgt.n	b5ae0 <_ZN7FatFile7seekSetEm+0x6a>
   b5af6:	e7d2      	b.n	b5a9e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b5af8:	1af6      	subs	r6, r6, r3
   b5afa:	e7ef      	b.n	b5adc <_ZN7FatFile7seekSetEm+0x66>

000b5afc <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b5afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5afe:	460f      	mov	r7, r1
   b5b00:	4604      	mov	r4, r0
   b5b02:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b5b04:	2100      	movs	r1, #0
   b5b06:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b5b08:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b5b0a:	f003 ff41 	bl	b9990 <memset>
  m_vol = dirFile->m_vol;
   b5b0e:	68b8      	ldr	r0, [r7, #8]
   b5b10:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b5b12:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b5b14:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b5b18:	6a3b      	ldr	r3, [r7, #32]
   b5b1a:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b5b1c:	016a      	lsls	r2, r5, #5
   b5b1e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b5b22:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5b26:	071f      	lsls	r7, r3, #28
   b5b28:	d444      	bmi.n	b5bb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b5b2a:	f003 0317 	and.w	r3, r3, #23
   b5b2e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b5b30:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b5b34:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b5b38:	bf04      	itt	eq
   b5b3a:	f043 0308 	orreq.w	r3, r3, #8
   b5b3e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b5b40:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5b44:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b5b46:	f006 0303 	and.w	r3, r6, #3
   b5b4a:	2b01      	cmp	r3, #1
   b5b4c:	d02c      	beq.n	b5ba8 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b5b4e:	2b02      	cmp	r3, #2
   b5b50:	d028      	beq.n	b5ba4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b5b52:	bb7b      	cbnz	r3, b5bb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b5b54:	0571      	lsls	r1, r6, #21
   b5b56:	d42d      	bmi.n	b5bb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b5b58:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b5b5a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b5b5c:	78a1      	ldrb	r1, [r4, #2]
   b5b5e:	078b      	lsls	r3, r1, #30
   b5b60:	d504      	bpl.n	b5b6c <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b5b62:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b5b64:	06df      	lsls	r7, r3, #27
   b5b66:	d425      	bmi.n	b5bb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b5b68:	07dd      	lsls	r5, r3, #31
   b5b6a:	d423      	bmi.n	b5bb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b5b6c:	11b3      	asrs	r3, r6, #6
   b5b6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b5b72:	f006 0508 	and.w	r5, r6, #8
   b5b76:	432b      	orrs	r3, r5
   b5b78:	430b      	orrs	r3, r1
   b5b7a:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b5b7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b5b7e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5b80:	1883      	adds	r3, r0, r2
   b5b82:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b5b86:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5b8a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b5b8e:	0572      	lsls	r2, r6, #21
   b5b90:	d513      	bpl.n	b5bba <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5b92:	b959      	cbnz	r1, b5bac <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b5b94:	78a3      	ldrb	r3, [r4, #2]
   b5b96:	f043 0304 	orr.w	r3, r3, #4
   b5b9a:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5b9c:	0473      	lsls	r3, r6, #17
   b5b9e:	d410      	bmi.n	b5bc2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b5ba0:	2001      	movs	r0, #1
}
   b5ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b5ba4:	2303      	movs	r3, #3
   b5ba6:	e7d8      	b.n	b5b5a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b5ba8:	2302      	movs	r3, #2
   b5baa:	e7d6      	b.n	b5b5a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5bac:	f000 fa63 	bl	b6076 <_ZN9FatVolume9freeChainEm>
   b5bb0:	2800      	cmp	r0, #0
   b5bb2:	d1ef      	bne.n	b5b94 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b5bb4:	2000      	movs	r0, #0
   b5bb6:	7020      	strb	r0, [r4, #0]
  return false;
   b5bb8:	e7f3      	b.n	b5ba2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b5bba:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b5bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5bbe:	61e3      	str	r3, [r4, #28]
   b5bc0:	e7ec      	b.n	b5b9c <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5bc2:	69e1      	ldr	r1, [r4, #28]
   b5bc4:	4620      	mov	r0, r4
   b5bc6:	f7ff ff56 	bl	b5a76 <_ZN7FatFile7seekSetEm>
   b5bca:	2800      	cmp	r0, #0
   b5bcc:	d1e8      	bne.n	b5ba0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b5bce:	e7f1      	b.n	b5bb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b5bd0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b5bd0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b5bd2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b5bd4:	4604      	mov	r4, r0
  if (!isOpen()) {
   b5bd6:	b90b      	cbnz	r3, b5bdc <_ZN7FatFile4syncEv+0xc>
    return true;
   b5bd8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b5bda:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b5bdc:	7883      	ldrb	r3, [r0, #2]
   b5bde:	075a      	lsls	r2, r3, #29
   b5be0:	d523      	bpl.n	b5c2a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5be2:	2101      	movs	r1, #1
   b5be4:	f7ff fe52 	bl	b588c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5be8:	4605      	mov	r5, r0
   b5bea:	b928      	cbnz	r0, b5bf8 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b5bec:	7863      	ldrb	r3, [r4, #1]
   b5bee:	f043 0301 	orr.w	r3, r3, #1
   b5bf2:	7063      	strb	r3, [r4, #1]
  return false;
   b5bf4:	2000      	movs	r0, #0
   b5bf6:	e7f0      	b.n	b5bda <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5bf8:	7803      	ldrb	r3, [r0, #0]
   b5bfa:	2be5      	cmp	r3, #229	; 0xe5
   b5bfc:	d0f6      	beq.n	b5bec <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b5bfe:	7823      	ldrb	r3, [r4, #0]
   b5c00:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b5c02:	bf44      	itt	mi
   b5c04:	69e3      	ldrmi	r3, [r4, #28]
   b5c06:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b5c08:	6a23      	ldr	r3, [r4, #32]
   b5c0a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b5c0c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5c0e:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b5c10:	4b09      	ldr	r3, [pc, #36]	; (b5c38 <_ZN7FatFile4syncEv+0x68>)
   b5c12:	681b      	ldr	r3, [r3, #0]
   b5c14:	b12b      	cbz	r3, b5c22 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b5c16:	f100 0116 	add.w	r1, r0, #22
   b5c1a:	3018      	adds	r0, #24
   b5c1c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b5c1e:	8b2b      	ldrh	r3, [r5, #24]
   b5c20:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b5c22:	78a3      	ldrb	r3, [r4, #2]
   b5c24:	f023 0304 	bic.w	r3, r3, #4
   b5c28:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b5c2a:	68a0      	ldr	r0, [r4, #8]
   b5c2c:	f7ff faca 	bl	b51c4 <_ZN9FatVolume9cacheSyncEv>
   b5c30:	2800      	cmp	r0, #0
   b5c32:	d0db      	beq.n	b5bec <_ZN7FatFile4syncEv+0x1c>
   b5c34:	e7d0      	b.n	b5bd8 <_ZN7FatFile4syncEv+0x8>
   b5c36:	bf00      	nop
   b5c38:	2003e64c 	.word	0x2003e64c

000b5c3c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b5c3c:	b510      	push	{r4, lr}
   b5c3e:	4604      	mov	r4, r0
  bool rtn = sync();
   b5c40:	f7ff ffc6 	bl	b5bd0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b5c44:	2300      	movs	r3, #0
   b5c46:	7023      	strb	r3, [r4, #0]
}
   b5c48:	bd10      	pop	{r4, pc}

000b5c4a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c4c:	b093      	sub	sp, #76	; 0x4c
   b5c4e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5c50:	2300      	movs	r3, #0
   b5c52:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b5c54:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5c56:	9201      	str	r2, [sp, #4]
   b5c58:	4606      	mov	r6, r0
   b5c5a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b5c5c:	b113      	cbz	r3, b5c64 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b5c5e:	2000      	movs	r0, #0
}
   b5c60:	b013      	add	sp, #76	; 0x4c
   b5c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b5c64:	780b      	ldrb	r3, [r1, #0]
   b5c66:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5c6a:	d0f8      	beq.n	b5c5e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b5c6c:	7813      	ldrb	r3, [r2, #0]
   b5c6e:	2b2f      	cmp	r3, #47	; 0x2f
   b5c70:	d112      	bne.n	b5c98 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b5c72:	9a01      	ldr	r2, [sp, #4]
   b5c74:	7813      	ldrb	r3, [r2, #0]
   b5c76:	2b2f      	cmp	r3, #47	; 0x2f
   b5c78:	d102      	bne.n	b5c80 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b5c7a:	3201      	adds	r2, #1
   b5c7c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b5c7e:	e7f8      	b.n	b5c72 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b5c80:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b5c82:	b91b      	cbnz	r3, b5c8c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b5c84:	4630      	mov	r0, r6
   b5c86:	f7ff fe10 	bl	b58aa <_ZN7FatFile8openRootEP9FatVolume>
   b5c8a:	e7e9      	b.n	b5c60 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b5c8c:	a809      	add	r0, sp, #36	; 0x24
   b5c8e:	f7ff fd9f 	bl	b57d0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b5c92:	2800      	cmp	r0, #0
   b5c94:	d0e3      	beq.n	b5c5e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b5c96:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b5c98:	9801      	ldr	r0, [sp, #4]
   b5c9a:	aa01      	add	r2, sp, #4
   b5c9c:	a903      	add	r1, sp, #12
   b5c9e:	f7ff faad 	bl	b51fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b5ca2:	2800      	cmp	r0, #0
   b5ca4:	d0db      	beq.n	b5c5e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b5ca6:	9b01      	ldr	r3, [sp, #4]
   b5ca8:	781b      	ldrb	r3, [r3, #0]
   b5caa:	b19b      	cbz	r3, b5cd4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b5cac:	2300      	movs	r3, #0
   b5cae:	aa03      	add	r2, sp, #12
   b5cb0:	4621      	mov	r1, r4
   b5cb2:	4630      	mov	r0, r6
   b5cb4:	f7ff fbd4 	bl	b5460 <_ZN7FatFile4openEPS_P7fname_ti>
   b5cb8:	2800      	cmp	r0, #0
   b5cba:	d0d0      	beq.n	b5c5e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b5cbc:	4635      	mov	r5, r6
   b5cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cc0:	ac09      	add	r4, sp, #36	; 0x24
   b5cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5cc8:	682b      	ldr	r3, [r5, #0]
   b5cca:	6023      	str	r3, [r4, #0]
    close();
   b5ccc:	4630      	mov	r0, r6
   b5cce:	f7ff ffb5 	bl	b5c3c <_ZN7FatFile5closeEv>
  while (1) {
   b5cd2:	e7e0      	b.n	b5c96 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b5cd4:	463b      	mov	r3, r7
   b5cd6:	aa03      	add	r2, sp, #12
   b5cd8:	4621      	mov	r1, r4
   b5cda:	4630      	mov	r0, r6
   b5cdc:	f7ff fbc0 	bl	b5460 <_ZN7FatFile4openEPS_P7fname_ti>
   b5ce0:	e7be      	b.n	b5c60 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b5ce4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b5ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5ce8:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b5cea:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5cec:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b5cee:	4604      	mov	r4, r0
   b5cf0:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5cf2:	d55b      	bpl.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
   b5cf4:	7883      	ldrb	r3, [r0, #2]
   b5cf6:	079a      	lsls	r2, r3, #30
   b5cf8:	d558      	bpl.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b5cfa:	071b      	lsls	r3, r3, #28
   b5cfc:	d451      	bmi.n	b5da2 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b5cfe:	6963      	ldr	r3, [r4, #20]
   b5d00:	43db      	mvns	r3, r3
   b5d02:	42bb      	cmp	r3, r7
   b5d04:	d352      	bcc.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
   b5d06:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5d08:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5d0c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b5d0e:	f1b8 0f00 	cmp.w	r8, #0
   b5d12:	f000 8091 	beq.w	b5e38 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5d16:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b5d18:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b5d1a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b5d1e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b5d22:	d10e      	bne.n	b5d42 <_ZN7FatFile5writeEPKvj+0x5e>
   b5d24:	b96d      	cbnz	r5, b5d42 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b5d26:	6921      	ldr	r1, [r4, #16]
   b5d28:	2900      	cmp	r1, #0
   b5d2a:	d046      	beq.n	b5dba <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5d2c:	4652      	mov	r2, sl
   b5d2e:	f000 f902 	bl	b5f36 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b5d32:	2800      	cmp	r0, #0
   b5d34:	db3a      	blt.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b5d36:	d104      	bne.n	b5d42 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b5d38:	4620      	mov	r0, r4
   b5d3a:	f7ff fd5f 	bl	b57fc <_ZN7FatFile10addClusterEv>
   b5d3e:	2800      	cmp	r0, #0
   b5d40:	d034      	beq.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5d42:	6921      	ldr	r1, [r4, #16]
   b5d44:	68a0      	ldr	r0, [r4, #8]
   b5d46:	f000 f8f0 	bl	b5f2a <_ZNK9FatVolume17clusterFirstBlockEm>
   b5d4a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b5d4c:	68a0      	ldr	r0, [r4, #8]
   b5d4e:	b915      	cbnz	r5, b5d56 <_ZN7FatFile5writeEPKvj+0x72>
   b5d50:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b5d54:	d23f      	bcs.n	b5dd6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b5d56:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b5d5a:	4546      	cmp	r6, r8
   b5d5c:	bf28      	it	cs
   b5d5e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b5d60:	2d00      	cmp	r5, #0
   b5d62:	d136      	bne.n	b5dd2 <_ZN7FatFile5writeEPKvj+0xee>
   b5d64:	6962      	ldr	r2, [r4, #20]
   b5d66:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b5d68:	429a      	cmp	r2, r3
   b5d6a:	bf34      	ite	cc
   b5d6c:	2201      	movcc	r2, #1
   b5d6e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b5d70:	3024      	adds	r0, #36	; 0x24
   b5d72:	f000 f8b7 	bl	b5ee4 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b5d76:	b1c8      	cbz	r0, b5dac <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b5d78:	4428      	add	r0, r5
   b5d7a:	4632      	mov	r2, r6
   b5d7c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b5d7e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b5d80:	f003 fdde 	bl	b9940 <memcpy>
      if (512 == (n + blockOffset)) {
   b5d84:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b5d88:	d104      	bne.n	b5d94 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b5d8a:	68a0      	ldr	r0, [r4, #8]
   b5d8c:	3024      	adds	r0, #36	; 0x24
   b5d8e:	f000 f881 	bl	b5e94 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b5d92:	b158      	cbz	r0, b5dac <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b5d94:	6963      	ldr	r3, [r4, #20]
   b5d96:	4433      	add	r3, r6
   b5d98:	6163      	str	r3, [r4, #20]
    src += n;
   b5d9a:	44b1      	add	r9, r6
    nToWrite -= n;
   b5d9c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b5da0:	e7b4      	b.n	b5d0c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b5da2:	69c1      	ldr	r1, [r0, #28]
   b5da4:	f7ff fe67 	bl	b5a76 <_ZN7FatFile7seekSetEm>
   b5da8:	2800      	cmp	r0, #0
   b5daa:	d1a8      	bne.n	b5cfe <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b5dac:	7863      	ldrb	r3, [r4, #1]
   b5dae:	f043 0301 	orr.w	r3, r3, #1
   b5db2:	7063      	strb	r3, [r4, #1]
  return -1;
   b5db4:	f04f 30ff 	mov.w	r0, #4294967295
   b5db8:	e050      	b.n	b5e5c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b5dba:	6a23      	ldr	r3, [r4, #32]
   b5dbc:	b93b      	cbnz	r3, b5dce <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	f7ff fd1c 	bl	b57fc <_ZN7FatFile10addClusterEv>
   b5dc4:	2800      	cmp	r0, #0
   b5dc6:	d0f1      	beq.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b5dc8:	6923      	ldr	r3, [r4, #16]
   b5dca:	6223      	str	r3, [r4, #32]
   b5dcc:	e7b9      	b.n	b5d42 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b5dce:	6123      	str	r3, [r4, #16]
   b5dd0:	e7b7      	b.n	b5d42 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b5dd2:	2201      	movs	r2, #1
   b5dd4:	e7cc      	b.n	b5d70 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b5dd6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b5dda:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b5ddc:	d31b      	bcc.n	b5e16 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b5dde:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5de2:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b5de6:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b5de8:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b5dec:	4573      	cmp	r3, lr
   b5dee:	bf28      	it	cs
   b5df0:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5df2:	4291      	cmp	r1, r2
      n = 512*nb;
   b5df4:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5df8:	d307      	bcc.n	b5e0a <_ZN7FatFile5writeEPKvj+0x126>
   b5dfa:	441a      	add	r2, r3
   b5dfc:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b5dfe:	bf82      	ittt	hi
   b5e00:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b5e04:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5e08:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b5e0a:	68a5      	ldr	r5, [r4, #8]
   b5e0c:	464a      	mov	r2, r9
   b5e0e:	6828      	ldr	r0, [r5, #0]
   b5e10:	f000 fc4b 	bl	b66aa <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b5e14:	e7bd      	b.n	b5d92 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b5e16:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b5e18:	bf02      	ittt	eq
   b5e1a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b5e1e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5e22:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b5e24:	68a3      	ldr	r3, [r4, #8]
   b5e26:	464a      	mov	r2, r9
   b5e28:	6818      	ldr	r0, [r3, #0]
   b5e2a:	f000 fbc8 	bl	b65be <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b5e2e:	2800      	cmp	r0, #0
   b5e30:	d0bc      	beq.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b5e32:	f44f 7600 	mov.w	r6, #512	; 0x200
   b5e36:	e7ad      	b.n	b5d94 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b5e38:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5e3a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b5e3c:	42b2      	cmp	r2, r6
   b5e3e:	d204      	bcs.n	b5e4a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b5e40:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5e42:	f043 0304 	orr.w	r3, r3, #4
   b5e46:	70a3      	strb	r3, [r4, #2]
   b5e48:	e003      	b.n	b5e52 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b5e4a:	4a08      	ldr	r2, [pc, #32]	; (b5e6c <_ZN7FatFile5writeEPKvj+0x188>)
   b5e4c:	6812      	ldr	r2, [r2, #0]
   b5e4e:	2a00      	cmp	r2, #0
   b5e50:	d1f7      	bne.n	b5e42 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b5e52:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b5e56:	2b00      	cmp	r3, #0
   b5e58:	db02      	blt.n	b5e60 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b5e5a:	4638      	mov	r0, r7
}
   b5e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b5e60:	4620      	mov	r0, r4
   b5e62:	f7ff feb5 	bl	b5bd0 <_ZN7FatFile4syncEv>
   b5e66:	2800      	cmp	r0, #0
   b5e68:	d1f7      	bne.n	b5e5a <_ZN7FatFile5writeEPKvj+0x176>
   b5e6a:	e79f      	b.n	b5dac <_ZN7FatFile5writeEPKvj+0xc8>
   b5e6c:	2003e64c 	.word	0x2003e64c

000b5e70 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5e70:	b513      	push	{r0, r1, r4, lr}
   b5e72:	4604      	mov	r4, r0
    }
   b5e74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5e76:	b159      	cbz	r1, b5e90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5e78:	9101      	str	r1, [sp, #4]
   b5e7a:	f7fe fcf7 	bl	b486c <strlen>
   b5e7e:	6823      	ldr	r3, [r4, #0]
   b5e80:	9901      	ldr	r1, [sp, #4]
   b5e82:	68db      	ldr	r3, [r3, #12]
   b5e84:	4602      	mov	r2, r0
   b5e86:	4620      	mov	r0, r4
    }
   b5e88:	b002      	add	sp, #8
   b5e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5e8e:	4718      	bx	r3
    }
   b5e90:	b002      	add	sp, #8
   b5e92:	bd10      	pop	{r4, pc}

000b5e94 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b5e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b5e96:	7803      	ldrb	r3, [r0, #0]
   b5e98:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b5e9a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b5e9c:	d520      	bpl.n	b5ee0 <_ZN8FatCache4syncEv+0x4c>
   b5e9e:	6843      	ldr	r3, [r0, #4]
   b5ea0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b5ea2:	f100 020c 	add.w	r2, r0, #12
   b5ea6:	6818      	ldr	r0, [r3, #0]
   b5ea8:	9201      	str	r2, [sp, #4]
   b5eaa:	f000 fb88 	bl	b65be <_ZN9SdSpiCard10writeBlockEmPKh>
   b5eae:	9a01      	ldr	r2, [sp, #4]
   b5eb0:	4605      	mov	r5, r0
   b5eb2:	b918      	cbnz	r0, b5ebc <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b5eb4:	2500      	movs	r5, #0
}
   b5eb6:	4628      	mov	r0, r5
   b5eb8:	b003      	add	sp, #12
   b5eba:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b5ebc:	7823      	ldrb	r3, [r4, #0]
   b5ebe:	079b      	lsls	r3, r3, #30
   b5ec0:	d404      	bmi.n	b5ecc <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b5ec2:	7823      	ldrb	r3, [r4, #0]
   b5ec4:	f023 0301 	bic.w	r3, r3, #1
   b5ec8:	7023      	strb	r3, [r4, #0]
   b5eca:	e7f4      	b.n	b5eb6 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b5ecc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b5ed0:	6919      	ldr	r1, [r3, #16]
   b5ed2:	4401      	add	r1, r0
   b5ed4:	6818      	ldr	r0, [r3, #0]
   b5ed6:	f000 fb72 	bl	b65be <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b5eda:	2800      	cmp	r0, #0
   b5edc:	d1f1      	bne.n	b5ec2 <_ZN8FatCache4syncEv+0x2e>
   b5ede:	e7e9      	b.n	b5eb4 <_ZN8FatCache4syncEv+0x20>
  return true;
   b5ee0:	2501      	movs	r5, #1
   b5ee2:	e7e8      	b.n	b5eb6 <_ZN8FatCache4syncEv+0x22>

000b5ee4 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5ee4:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b5ee6:	6883      	ldr	r3, [r0, #8]
   b5ee8:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5eea:	4604      	mov	r4, r0
   b5eec:	460e      	mov	r6, r1
   b5eee:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b5ef0:	d009      	beq.n	b5f06 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b5ef2:	f7ff ffcf 	bl	b5e94 <_ZN8FatCache4syncEv>
   b5ef6:	b908      	cbnz	r0, b5efc <_ZN8FatCache4readEmh+0x18>
  return 0;
   b5ef8:	2000      	movs	r0, #0
}
   b5efa:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b5efc:	076b      	lsls	r3, r5, #29
   b5efe:	d50a      	bpl.n	b5f16 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b5f00:	2300      	movs	r3, #0
   b5f02:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b5f04:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b5f06:	7822      	ldrb	r2, [r4, #0]
   b5f08:	f005 0503 	and.w	r5, r5, #3
   b5f0c:	4620      	mov	r0, r4
   b5f0e:	4315      	orrs	r5, r2
   b5f10:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b5f14:	e7f1      	b.n	b5efa <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b5f16:	6863      	ldr	r3, [r4, #4]
   b5f18:	f104 020c 	add.w	r2, r4, #12
   b5f1c:	6818      	ldr	r0, [r3, #0]
   b5f1e:	4631      	mov	r1, r6
   b5f20:	f000 fac4 	bl	b64ac <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b5f24:	2800      	cmp	r0, #0
   b5f26:	d1eb      	bne.n	b5f00 <_ZN8FatCache4readEmh+0x1c>
   b5f28:	e7e6      	b.n	b5ef8 <_ZN8FatCache4readEmh+0x14>

000b5f2a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b5f2a:	7983      	ldrb	r3, [r0, #6]
   b5f2c:	6940      	ldr	r0, [r0, #20]
   b5f2e:	3902      	subs	r1, #2
   b5f30:	4099      	lsls	r1, r3
}
   b5f32:	4408      	add	r0, r1
   b5f34:	4770      	bx	lr

000b5f36 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5f36:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b5f38:	b570      	push	{r4, r5, r6, lr}
   b5f3a:	4605      	mov	r5, r0
   b5f3c:	460c      	mov	r4, r1
   b5f3e:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5f40:	d802      	bhi.n	b5f48 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b5f42:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5f46:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5f48:	69c3      	ldr	r3, [r0, #28]
   b5f4a:	428b      	cmp	r3, r1
   b5f4c:	d3f9      	bcc.n	b5f42 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b5f4e:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5f50:	2b20      	cmp	r3, #32
   b5f52:	d116      	bne.n	b5f82 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b5f54:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5f56:	2202      	movs	r2, #2
   b5f58:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5f5c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5f60:	f7ff ffc0 	bl	b5ee4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5f64:	2800      	cmp	r0, #0
   b5f66:	d0ec      	beq.n	b5f42 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b5f68:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5f6c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b5f70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b5f74:	69ea      	ldr	r2, [r5, #28]
   b5f76:	429a      	cmp	r2, r3
  *value = next;
   b5f78:	bf26      	itte	cs
   b5f7a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b5f7c:	2001      	movcs	r0, #1
    return 0;
   b5f7e:	2000      	movcc	r0, #0
   b5f80:	e7e1      	b.n	b5f46 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b5f82:	2b10      	cmp	r3, #16
   b5f84:	d1dd      	bne.n	b5f42 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5f86:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5f8a:	6981      	ldr	r1, [r0, #24]
   b5f8c:	2202      	movs	r2, #2
   b5f8e:	4419      	add	r1, r3
   b5f90:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5f94:	f7ff ffa6 	bl	b5ee4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5f98:	2800      	cmp	r0, #0
   b5f9a:	d0d2      	beq.n	b5f42 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b5f9c:	b2e4      	uxtb	r4, r4
   b5f9e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b5fa2:	e7e7      	b.n	b5f74 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b5fa4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5fa4:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b5fa6:	b538      	push	{r3, r4, r5, lr}
   b5fa8:	460c      	mov	r4, r1
   b5faa:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5fac:	d801      	bhi.n	b5fb2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b5fae:	2000      	movs	r0, #0
}
   b5fb0:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5fb2:	69c3      	ldr	r3, [r0, #28]
   b5fb4:	428b      	cmp	r3, r1
   b5fb6:	d3fa      	bcc.n	b5fae <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b5fb8:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5fba:	2b20      	cmp	r3, #32
   b5fbc:	d10f      	bne.n	b5fde <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b5fbe:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5fc0:	2203      	movs	r2, #3
   b5fc2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5fc6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5fca:	f7ff ff8b 	bl	b5ee4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5fce:	2800      	cmp	r0, #0
   b5fd0:	d0ed      	beq.n	b5fae <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b5fd2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5fd6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b5fda:	2001      	movs	r0, #1
   b5fdc:	e7e8      	b.n	b5fb0 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b5fde:	2b10      	cmp	r3, #16
   b5fe0:	d1e5      	bne.n	b5fae <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5fe2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5fe6:	6981      	ldr	r1, [r0, #24]
   b5fe8:	2203      	movs	r2, #3
   b5fea:	4419      	add	r1, r3
   b5fec:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5ff0:	f7ff ff78 	bl	b5ee4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5ff4:	2800      	cmp	r0, #0
   b5ff6:	d0da      	beq.n	b5fae <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b5ff8:	b2e4      	uxtb	r4, r4
   b5ffa:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b5ffe:	e7ec      	b.n	b5fda <_ZN9FatVolume6fatPutEmm+0x36>

000b6000 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6004:	68c4      	ldr	r4, [r0, #12]
   b6006:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6008:	4605      	mov	r5, r0
   b600a:	460e      	mov	r6, r1
   b600c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b600e:	d301      	bcc.n	b6014 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6010:	2701      	movs	r7, #1
   b6012:	e001      	b.n	b6018 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6014:	460c      	mov	r4, r1
    setStart = false;
   b6016:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6018:	69eb      	ldr	r3, [r5, #28]
    find++;
   b601a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b601c:	42a3      	cmp	r3, r4
   b601e:	d202      	bcs.n	b6026 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6020:	b9c7      	cbnz	r7, b6054 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6022:	68ec      	ldr	r4, [r5, #12]
   b6024:	e7f4      	b.n	b6010 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6026:	42a6      	cmp	r6, r4
   b6028:	d014      	beq.n	b6054 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b602a:	aa01      	add	r2, sp, #4
   b602c:	4621      	mov	r1, r4
   b602e:	4628      	mov	r0, r5
   b6030:	f7ff ff81 	bl	b5f36 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6034:	2800      	cmp	r0, #0
   b6036:	db0d      	blt.n	b6054 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6038:	d0ee      	beq.n	b6018 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b603a:	9b01      	ldr	r3, [sp, #4]
   b603c:	2b00      	cmp	r3, #0
   b603e:	d1eb      	bne.n	b6018 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6040:	b107      	cbz	r7, b6044 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6042:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6044:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6048:	4621      	mov	r1, r4
   b604a:	4628      	mov	r0, r5
   b604c:	f7ff ffaa 	bl	b5fa4 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6050:	4607      	mov	r7, r0
   b6052:	b920      	cbnz	r0, b605e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6054:	2700      	movs	r7, #0
}
   b6056:	4638      	mov	r0, r7
   b6058:	b002      	add	sp, #8
   b605a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b605e:	b916      	cbnz	r6, b6066 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6060:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6064:	e7f7      	b.n	b6056 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6066:	4622      	mov	r2, r4
   b6068:	4631      	mov	r1, r6
   b606a:	4628      	mov	r0, r5
   b606c:	f7ff ff9a 	bl	b5fa4 <_ZN9FatVolume6fatPutEmm>
   b6070:	2800      	cmp	r0, #0
   b6072:	d1f5      	bne.n	b6060 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6074:	e7ee      	b.n	b6054 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6076 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6076:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6078:	4605      	mov	r5, r0
   b607a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b607c:	aa01      	add	r2, sp, #4
   b607e:	4621      	mov	r1, r4
   b6080:	4628      	mov	r0, r5
   b6082:	f7ff ff58 	bl	b5f36 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6086:	1e06      	subs	r6, r0, #0
   b6088:	db10      	blt.n	b60ac <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b608a:	2200      	movs	r2, #0
   b608c:	4621      	mov	r1, r4
   b608e:	4628      	mov	r0, r5
   b6090:	f7ff ff88 	bl	b5fa4 <_ZN9FatVolume6fatPutEmm>
   b6094:	b150      	cbz	r0, b60ac <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6096:	68eb      	ldr	r3, [r5, #12]
   b6098:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b609a:	bf24      	itt	cs
   b609c:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b60a0:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b60a2:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b60a4:	2e00      	cmp	r6, #0
   b60a6:	d1e9      	bne.n	b607c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b60a8:	b002      	add	sp, #8
   b60aa:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b60ac:	2000      	movs	r0, #0
   b60ae:	e7fb      	b.n	b60a8 <_ZN9FatVolume9freeChainEm+0x32>

000b60b0 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b60b0:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b60b2:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b60b4:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b60b6:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b60b8:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b60bc:	4604      	mov	r4, r0
  m_fatType = 0;
   b60be:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b60c0:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b60c4:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b60c6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b60ca:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b60cc:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b60d0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b60d4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b60d8:	460d      	mov	r5, r1
   b60da:	b1b9      	cbz	r1, b610c <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b60dc:	2904      	cmp	r1, #4
   b60de:	d901      	bls.n	b60e4 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b60e0:	2000      	movs	r0, #0
}
   b60e2:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b60e4:	4611      	mov	r1, r2
   b60e6:	4630      	mov	r0, r6
   b60e8:	f7ff fefc 	bl	b5ee4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b60ec:	2800      	cmp	r0, #0
   b60ee:	d0f7      	beq.n	b60e0 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b60f0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b60f4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b60f8:	065b      	lsls	r3, r3, #25
   b60fa:	d1f1      	bne.n	b60e0 <_ZN9FatVolume4initEh+0x30>
   b60fc:	f105 011b 	add.w	r1, r5, #27
   b6100:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6104:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6108:	2d00      	cmp	r5, #0
   b610a:	d0e9      	beq.n	b60e0 <_ZN9FatVolume4initEh+0x30>
   b610c:	2200      	movs	r2, #0
   b610e:	4629      	mov	r1, r5
   b6110:	4630      	mov	r0, r6
   b6112:	f7ff fee7 	bl	b5ee4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6116:	2800      	cmp	r0, #0
   b6118:	d0e2      	beq.n	b60e0 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b611a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b611e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6122:	d1dd      	bne.n	b60e0 <_ZN9FatVolume4initEh+0x30>
   b6124:	7c03      	ldrb	r3, [r0, #16]
   b6126:	2b02      	cmp	r3, #2
   b6128:	d1da      	bne.n	b60e0 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b612a:	89c3      	ldrh	r3, [r0, #14]
   b612c:	2b00      	cmp	r3, #0
   b612e:	d0d7      	beq.n	b60e0 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6130:	7b41      	ldrb	r1, [r0, #13]
   b6132:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6134:	1e4b      	subs	r3, r1, #1
   b6136:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6138:	2300      	movs	r3, #0
   b613a:	71a3      	strb	r3, [r4, #6]
   b613c:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b613e:	2301      	movs	r3, #1
   b6140:	4299      	cmp	r1, r3
   b6142:	d007      	beq.n	b6154 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6144:	3e01      	subs	r6, #1
   b6146:	d0cb      	beq.n	b60e0 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6148:	79a2      	ldrb	r2, [r4, #6]
   b614a:	005b      	lsls	r3, r3, #1
   b614c:	3201      	adds	r2, #1
   b614e:	b2db      	uxtb	r3, r3
   b6150:	71a2      	strb	r2, [r4, #6]
   b6152:	e7f5      	b.n	b6140 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6154:	8ac1      	ldrh	r1, [r0, #22]
   b6156:	b901      	cbnz	r1, b615a <_ZN9FatVolume4initEh+0xaa>
   b6158:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b615a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b615c:	89c3      	ldrh	r3, [r0, #14]
   b615e:	442b      	add	r3, r5
   b6160:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6162:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6166:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6168:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b616c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b616e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6172:	0149      	lsls	r1, r1, #5
   b6174:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6178:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b617c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b617e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6182:	b902      	cbnz	r2, b6186 <_ZN9FatVolume4initEh+0xd6>
   b6184:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6186:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6188:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b618a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b618c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b618e:	1c4b      	adds	r3, r1, #1
   b6190:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6192:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6196:	4299      	cmp	r1, r3
   b6198:	d802      	bhi.n	b61a0 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b619a:	230c      	movs	r3, #12
   b619c:	71e3      	strb	r3, [r4, #7]
   b619e:	e79f      	b.n	b60e0 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b61a0:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b61a4:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b61a6:	bf85      	ittet	hi
   b61a8:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b61aa:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b61ac:	2310      	movls	r3, #16
    m_fatType = 32;
   b61ae:	2320      	movhi	r3, #32
   b61b0:	71e3      	strb	r3, [r4, #7]
  return true;
   b61b2:	2001      	movs	r0, #1
   b61b4:	e795      	b.n	b60e2 <_ZN9FatVolume4initEh+0x32>

000b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b61b6:	f000 bacb 	b.w	b6750 <_ZN14SdSpiAltDriver4sendEh>

000b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b61ba:	f000 baae 	b.w	b671a <_ZN14SdSpiAltDriver7receiveEv>
	...

000b61c0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b61c0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b61c2:	4e0e      	ldr	r6, [pc, #56]	; (b61fc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b61c4:	460d      	mov	r5, r1
   b61c6:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b61c8:	f000 fb22 	bl	b6810 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b61cc:	6833      	ldr	r3, [r6, #0]
   b61ce:	1ac0      	subs	r0, r0, r3
   b61d0:	4b0b      	ldr	r3, [pc, #44]	; (b6200 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b61d2:	4298      	cmp	r0, r3
   b61d4:	d908      	bls.n	b61e8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b61d6:	f000 fb23 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b61da:	4b0a      	ldr	r3, [pc, #40]	; (b6204 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b61dc:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b61de:	f000 fd97 	bl	b6d10 <spark_process>
   b61e2:	f000 fb15 	bl	b6810 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b61e6:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b61e8:	f000 fb1a 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b61ec:	b280      	uxth	r0, r0
   b61ee:	1b40      	subs	r0, r0, r5
}
   b61f0:	42a0      	cmp	r0, r4
   b61f2:	bfd4      	ite	le
   b61f4:	2000      	movle	r0, #0
   b61f6:	2001      	movgt	r0, #1
   b61f8:	bd70      	pop	{r4, r5, r6, pc}
   b61fa:	bf00      	nop
   b61fc:	2003e654 	.word	0x2003e654
   b6200:	000186a0 	.word	0x000186a0
   b6204:	2003e734 	.word	0x2003e734

000b6208 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6208:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b620a:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b620c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b620e:	b94d      	cbnz	r5, b6224 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6210:	6840      	ldr	r0, [r0, #4]
   b6212:	f000 fa6b 	bl	b66ec <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6216:	6863      	ldr	r3, [r4, #4]
   b6218:	4629      	mov	r1, r5
   b621a:	7d18      	ldrb	r0, [r3, #20]
   b621c:	f003 fa7d 	bl	b971a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6220:	2301      	movs	r3, #1
   b6222:	7223      	strb	r3, [r4, #8]
  }
}
   b6224:	bd38      	pop	{r3, r4, r5, pc}

000b6226 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6226:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6228:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b622a:	4604      	mov	r4, r0
  if (m_spiActive) {
   b622c:	b16b      	cbz	r3, b624a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b622e:	6843      	ldr	r3, [r0, #4]
   b6230:	2101      	movs	r1, #1
   b6232:	7d18      	ldrb	r0, [r3, #20]
   b6234:	f003 fa71 	bl	b971a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6238:	6860      	ldr	r0, [r4, #4]
   b623a:	21ff      	movs	r1, #255	; 0xff
   b623c:	f7ff ffbb 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6240:	6860      	ldr	r0, [r4, #4]
   b6242:	f000 fa67 	bl	b6714 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6246:	2300      	movs	r3, #0
   b6248:	7223      	strb	r3, [r4, #8]
  }
}
   b624a:	bd10      	pop	{r4, pc}

000b624c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b624e:	4604      	mov	r4, r0
   b6250:	460d      	mov	r5, r1
   b6252:	4616      	mov	r6, r2
   b6254:	f000 fae4 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6258:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b625a:	6860      	ldr	r0, [r4, #4]
   b625c:	f7ff ffad 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6260:	28ff      	cmp	r0, #255	; 0xff
   b6262:	7260      	strb	r0, [r4, #9]
   b6264:	d10e      	bne.n	b6284 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b626a:	4639      	mov	r1, r7
   b626c:	4620      	mov	r0, r4
   b626e:	f7ff ffa7 	bl	b61c0 <_ZN9SdSpiCard10isTimedOutEtt>
   b6272:	2800      	cmp	r0, #0
   b6274:	d0f1      	beq.n	b625a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6276:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6278:	4620      	mov	r0, r4
   b627a:	7023      	strb	r3, [r4, #0]
   b627c:	f7ff ffd3 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6280:	2000      	movs	r0, #0
}
   b6282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6284:	28fe      	cmp	r0, #254	; 0xfe
   b6286:	d001      	beq.n	b628c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6288:	2350      	movs	r3, #80	; 0x50
   b628a:	e7f5      	b.n	b6278 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b628c:	6860      	ldr	r0, [r4, #4]
   b628e:	4632      	mov	r2, r6
   b6290:	4629      	mov	r1, r5
   b6292:	f000 fa47 	bl	b6724 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6296:	7260      	strb	r0, [r4, #9]
   b6298:	b108      	cbz	r0, b629e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b629a:	2360      	movs	r3, #96	; 0x60
   b629c:	e7ec      	b.n	b6278 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b629e:	6860      	ldr	r0, [r4, #4]
   b62a0:	f7ff ff8b 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b62a4:	6860      	ldr	r0, [r4, #4]
   b62a6:	f7ff ff88 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b62aa:	2001      	movs	r0, #1
   b62ac:	e7e9      	b.n	b6282 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b62ae <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b62ae:	b570      	push	{r4, r5, r6, lr}
   b62b0:	4604      	mov	r4, r0
   b62b2:	460e      	mov	r6, r1
   b62b4:	f000 fab4 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
   b62b8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b62ba:	4632      	mov	r2, r6
   b62bc:	4629      	mov	r1, r5
   b62be:	4620      	mov	r0, r4
   b62c0:	f7ff ff7e 	bl	b61c0 <_ZN9SdSpiCard10isTimedOutEtt>
   b62c4:	b930      	cbnz	r0, b62d4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b62c6:	6860      	ldr	r0, [r4, #4]
   b62c8:	f7ff ff77 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b62cc:	28ff      	cmp	r0, #255	; 0xff
   b62ce:	d1f4      	bne.n	b62ba <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b62d0:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b62d2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b62d4:	2000      	movs	r0, #0
   b62d6:	e7fc      	b.n	b62d2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b62d8 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b62d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b62da:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b62dc:	9201      	str	r2, [sp, #4]
   b62de:	4604      	mov	r4, r0
   b62e0:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b62e2:	b90b      	cbnz	r3, b62e8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b62e4:	f7ff ff90 	bl	b6208 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b62e8:	b125      	cbz	r5, b62f4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b62ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b62ee:	4620      	mov	r0, r4
   b62f0:	f7ff ffdd 	bl	b62ae <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b62f4:	6860      	ldr	r0, [r4, #4]
   b62f6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b62fa:	f7ff ff5c 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b62fe:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6300:	af01      	add	r7, sp, #4
   b6302:	5db9      	ldrb	r1, [r7, r6]
   b6304:	6860      	ldr	r0, [r4, #4]
   b6306:	f7ff ff56 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b630a:	3e01      	subs	r6, #1
   b630c:	d2f9      	bcs.n	b6302 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b630e:	2d00      	cmp	r5, #0
   b6310:	6860      	ldr	r0, [r4, #4]
   b6312:	bf0c      	ite	eq
   b6314:	2195      	moveq	r1, #149	; 0x95
   b6316:	2187      	movne	r1, #135	; 0x87
   b6318:	f7ff ff4d 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b631c:	6860      	ldr	r0, [r4, #4]
   b631e:	f7ff ff4c 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6322:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6324:	6860      	ldr	r0, [r4, #4]
   b6326:	f7ff ff48 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b632a:	0603      	lsls	r3, r0, #24
   b632c:	7260      	strb	r0, [r4, #9]
   b632e:	d503      	bpl.n	b6338 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6330:	3d01      	subs	r5, #1
   b6332:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6336:	d1f5      	bne.n	b6324 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6338:	b003      	add	sp, #12
   b633a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b633c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b633c:	b570      	push	{r4, r5, r6, lr}
   b633e:	4604      	mov	r4, r0
   b6340:	460d      	mov	r5, r1
   b6342:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6344:	2137      	movs	r1, #55	; 0x37
   b6346:	2200      	movs	r2, #0
   b6348:	f7ff ffc6 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b634c:	4632      	mov	r2, r6
   b634e:	4629      	mov	r1, r5
   b6350:	4620      	mov	r0, r4
  }
   b6352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b6356:	f7ff bfbf 	b.w	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b635c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6360:	2500      	movs	r5, #0
   b6362:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6364:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b6366:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b6368:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b636a:	4604      	mov	r4, r0
   b636c:	4690      	mov	r8, r2
   b636e:	461e      	mov	r6, r3
   b6370:	f000 fa56 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6374:	4641      	mov	r1, r8
   b6376:	4607      	mov	r7, r0
   b6378:	6860      	ldr	r0, [r4, #4]
   b637a:	f000 f9bb 	bl	b66f4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b637e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6380:	4a49      	ldr	r2, [pc, #292]	; (b64a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6382:	721d      	strb	r5, [r3, #8]
   b6384:	2501      	movs	r5, #1
   b6386:	60da      	str	r2, [r3, #12]
   b6388:	821d      	strh	r5, [r3, #16]
  spiStart();
   b638a:	4620      	mov	r0, r4
   b638c:	f7ff ff3c 	bl	b6208 <_ZN9SdSpiCard8spiStartEv>
   b6390:	6863      	ldr	r3, [r4, #4]
   b6392:	4629      	mov	r1, r5
   b6394:	7d18      	ldrb	r0, [r3, #20]
   b6396:	f003 f9c0 	bl	b971a <digitalWrite>
   b639a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b639c:	6860      	ldr	r0, [r4, #4]
   b639e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b63a0:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b63a2:	f7ff ff08 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b63a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b63aa:	d1f7      	bne.n	b639c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b63ac:	6863      	ldr	r3, [r4, #4]
   b63ae:	4629      	mov	r1, r5
   b63b0:	7d18      	ldrb	r0, [r3, #20]
   b63b2:	f003 f9b2 	bl	b971a <digitalWrite>
  }
   b63b6:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b63b8:	2200      	movs	r2, #0
   b63ba:	4611      	mov	r1, r2
   b63bc:	4620      	mov	r0, r4
   b63be:	f7ff ff8b 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b63c2:	2801      	cmp	r0, #1
   b63c4:	4680      	mov	r8, r0
   b63c6:	d018      	beq.n	b63fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b63c8:	3d01      	subs	r5, #1
   b63ca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b63ce:	d107      	bne.n	b63e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b63d0:	2320      	movs	r3, #32
  spiStop();
   b63d2:	4620      	mov	r0, r4
   b63d4:	7023      	strb	r3, [r4, #0]
   b63d6:	f7ff ff26 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b63da:	2000      	movs	r0, #0
}
   b63dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b63e0:	6860      	ldr	r0, [r4, #4]
   b63e2:	21fd      	movs	r1, #253	; 0xfd
   b63e4:	f7ff fee7 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b63e8:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b63ec:	6860      	ldr	r0, [r4, #4]
   b63ee:	f7ff fee4 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b63f2:	f1b8 0801 	subs.w	r8, r8, #1
   b63f6:	d1f9      	bne.n	b63ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b63f8:	e7de      	b.n	b63b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b63fa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b63fe:	2108      	movs	r1, #8
   b6400:	4620      	mov	r0, r4
   b6402:	f7ff ff69 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b6406:	2805      	cmp	r0, #5
   b6408:	d114      	bne.n	b6434 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b640a:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b640e:	2500      	movs	r5, #0
   b6410:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6412:	462a      	mov	r2, r5
   b6414:	2129      	movs	r1, #41	; 0x29
   b6416:	4620      	mov	r0, r4
   b6418:	f7ff ff90 	bl	b633c <_ZN9SdSpiCard8cardAcmdEhm>
   b641c:	4602      	mov	r2, r0
   b641e:	b1d8      	cbz	r0, b6458 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6420:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6424:	4639      	mov	r1, r7
   b6426:	4620      	mov	r0, r4
   b6428:	f7ff feca 	bl	b61c0 <_ZN9SdSpiCard10isTimedOutEtt>
   b642c:	2800      	cmp	r0, #0
   b642e:	d0f0      	beq.n	b6412 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6430:	2343      	movs	r3, #67	; 0x43
   b6432:	e7ce      	b.n	b63d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6434:	2504      	movs	r5, #4
      m_status = spiReceive();
   b6436:	6860      	ldr	r0, [r4, #4]
   b6438:	f7ff febf 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b643c:	3d01      	subs	r5, #1
   b643e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b6442:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b6444:	d1f7      	bne.n	b6436 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b6446:	28aa      	cmp	r0, #170	; 0xaa
   b6448:	d104      	bne.n	b6454 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b644a:	2302      	movs	r3, #2
   b644c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b644e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b6452:	e7dd      	b.n	b6410 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b6454:	2325      	movs	r3, #37	; 0x25
   b6456:	e7bc      	b.n	b63d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b6458:	7aa3      	ldrb	r3, [r4, #10]
   b645a:	2b02      	cmp	r3, #2
   b645c:	d118      	bne.n	b6490 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b645e:	213a      	movs	r1, #58	; 0x3a
   b6460:	4620      	mov	r0, r4
   b6462:	f7ff ff39 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b6466:	b108      	cbz	r0, b646c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b6468:	2337      	movs	r3, #55	; 0x37
   b646a:	e7b2      	b.n	b63d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b646c:	6860      	ldr	r0, [r4, #4]
   b646e:	f7ff fea4 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6472:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b6476:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b6478:	bf04      	itt	eq
   b647a:	2303      	moveq	r3, #3
   b647c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b647e:	6860      	ldr	r0, [r4, #4]
   b6480:	f7ff fe9b 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6484:	6860      	ldr	r0, [r4, #4]
   b6486:	f7ff fe98 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b648a:	6860      	ldr	r0, [r4, #4]
   b648c:	f7ff fe95 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b6490:	4620      	mov	r0, r4
   b6492:	f7ff fec8 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b6496:	6863      	ldr	r3, [r4, #4]
   b6498:	7930      	ldrb	r0, [r6, #4]
   b649a:	68b1      	ldr	r1, [r6, #8]
   b649c:	89b2      	ldrh	r2, [r6, #12]
   b649e:	821a      	strh	r2, [r3, #16]
   b64a0:	7218      	strb	r0, [r3, #8]
   b64a2:	60d9      	str	r1, [r3, #12]
  return true;
   b64a4:	2001      	movs	r0, #1
   b64a6:	e799      	b.n	b63dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b64a8:	0003d090 	.word	0x0003d090

000b64ac <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b64ac:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b64ae:	7a83      	ldrb	r3, [r0, #10]
   b64b0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b64b2:	bf18      	it	ne
   b64b4:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b64b6:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b64b8:	460a      	mov	r2, r1
   b64ba:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b64bc:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b64be:	f7ff ff0b 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b64c2:	b130      	cbz	r0, b64d2 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b64c4:	2330      	movs	r3, #48	; 0x30
   b64c6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b64c8:	4620      	mov	r0, r4
   b64ca:	f7ff feac 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b64ce:	2500      	movs	r5, #0
   b64d0:	e00b      	b.n	b64ea <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b64d2:	4629      	mov	r1, r5
   b64d4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff feb7 	bl	b624c <_ZN9SdSpiCard8readDataEPhj>
   b64de:	4605      	mov	r5, r0
   b64e0:	2800      	cmp	r0, #0
   b64e2:	d0f1      	beq.n	b64c8 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b64e4:	4620      	mov	r0, r4
   b64e6:	f7ff fe9e 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
}
   b64ea:	4628      	mov	r0, r5
   b64ec:	bd38      	pop	{r3, r4, r5, pc}

000b64ee <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b64ee:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b64f0:	7a83      	ldrb	r3, [r0, #10]
   b64f2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b64f4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b64f6:	bf18      	it	ne
   b64f8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b64fa:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b64fc:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b64fe:	f7ff feeb 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b6502:	b130      	cbz	r0, b6512 <_ZN9SdSpiCard9readStartEm+0x24>
   b6504:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6506:	4620      	mov	r0, r4
   b6508:	7023      	strb	r3, [r4, #0]
   b650a:	f7ff fe8c 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b650e:	2000      	movs	r0, #0
}
   b6510:	bd10      	pop	{r4, pc}
  return true;
   b6512:	2001      	movs	r0, #1
   b6514:	e7fc      	b.n	b6510 <_ZN9SdSpiCard9readStartEm+0x22>

000b6516 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6516:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6518:	2200      	movs	r2, #0
   b651a:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b651c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b651e:	f7ff fedb 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b6522:	b130      	cbz	r0, b6532 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6524:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6526:	4620      	mov	r0, r4
   b6528:	7023      	strb	r3, [r4, #0]
   b652a:	f7ff fe7c 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b652e:	2000      	movs	r0, #0
}
   b6530:	bd10      	pop	{r4, pc}
  spiStop();
   b6532:	4620      	mov	r0, r4
   b6534:	f7ff fe77 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b6538:	2001      	movs	r0, #1
   b653a:	e7f9      	b.n	b6530 <_ZN9SdSpiCard8readStopEv+0x1a>

000b653c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b653e:	4604      	mov	r4, r0
   b6540:	4616      	mov	r6, r2
   b6542:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6544:	f7ff ffd3 	bl	b64ee <_ZN9SdSpiCard9readStartEm>
   b6548:	b168      	cbz	r0, b6566 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b654a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b654c:	b2ab      	uxth	r3, r5
   b654e:	429f      	cmp	r7, r3
   b6550:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6554:	d909      	bls.n	b656a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b6556:	f44f 7200 	mov.w	r2, #512	; 0x200
   b655a:	4620      	mov	r0, r4
   b655c:	f7ff fe76 	bl	b624c <_ZN9SdSpiCard8readDataEPhj>
   b6560:	3501      	adds	r5, #1
   b6562:	2800      	cmp	r0, #0
   b6564:	d1f2      	bne.n	b654c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b6566:	2000      	movs	r0, #0
   b6568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b656a:	4620      	mov	r0, r4
}
   b656c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6570:	f7ff bfd1 	b.w	b6516 <_ZN9SdSpiCard8readStopEv>

000b6574 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6574:	b538      	push	{r3, r4, r5, lr}
   b6576:	4604      	mov	r4, r0
   b6578:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b657a:	6840      	ldr	r0, [r0, #4]
   b657c:	f7ff fe1b 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b6580:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6584:	6860      	ldr	r0, [r4, #4]
   b6586:	4629      	mov	r1, r5
   b6588:	f000 f8e6 	bl	b6758 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b658c:	6860      	ldr	r0, [r4, #4]
   b658e:	21ff      	movs	r1, #255	; 0xff
   b6590:	f7ff fe11 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6594:	6860      	ldr	r0, [r4, #4]
   b6596:	21ff      	movs	r1, #255	; 0xff
   b6598:	f7ff fe0d 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b659c:	6860      	ldr	r0, [r4, #4]
   b659e:	f7ff fe0c 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b65a2:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b65a4:	f000 001f 	and.w	r0, r0, #31
   b65a8:	2805      	cmp	r0, #5
   b65aa:	d006      	beq.n	b65ba <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b65ac:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b65ae:	4620      	mov	r0, r4
   b65b0:	7023      	strb	r3, [r4, #0]
   b65b2:	f7ff fe38 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b65b6:	2000      	movs	r0, #0
}
   b65b8:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b65ba:	2001      	movs	r0, #1
   b65bc:	e7fc      	b.n	b65b8 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b65be <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b65be:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b65c0:	7a83      	ldrb	r3, [r0, #10]
   b65c2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b65c4:	bf18      	it	ne
   b65c6:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b65c8:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b65ca:	460a      	mov	r2, r1
   b65cc:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b65ce:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b65d0:	f7ff fe82 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b65d4:	4606      	mov	r6, r0
   b65d6:	b130      	cbz	r0, b65e6 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b65d8:	2332      	movs	r3, #50	; 0x32
   b65da:	7023      	strb	r3, [r4, #0]
  spiStop();
   b65dc:	4620      	mov	r0, r4
   b65de:	f7ff fe22 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b65e2:	2500      	movs	r5, #0
   b65e4:	e01f      	b.n	b6626 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b65e6:	462a      	mov	r2, r5
   b65e8:	21fe      	movs	r1, #254	; 0xfe
   b65ea:	4620      	mov	r0, r4
   b65ec:	f7ff ffc2 	bl	b6574 <_ZN9SdSpiCard9writeDataEhPKh>
   b65f0:	2800      	cmp	r0, #0
   b65f2:	d0f3      	beq.n	b65dc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b65f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b65f8:	4620      	mov	r0, r4
   b65fa:	f7ff fe58 	bl	b62ae <_ZN9SdSpiCard11waitNotBusyEt>
   b65fe:	4605      	mov	r5, r0
   b6600:	b908      	cbnz	r0, b6606 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6602:	235a      	movs	r3, #90	; 0x5a
   b6604:	e7e9      	b.n	b65da <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6606:	4632      	mov	r2, r6
   b6608:	210d      	movs	r1, #13
   b660a:	4620      	mov	r0, r4
   b660c:	f7ff fe64 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b6610:	b108      	cbz	r0, b6616 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6612:	2329      	movs	r3, #41	; 0x29
   b6614:	e7e1      	b.n	b65da <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6616:	6860      	ldr	r0, [r4, #4]
   b6618:	f7ff fdcf 	bl	b61ba <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b661c:	2800      	cmp	r0, #0
   b661e:	d1f8      	bne.n	b6612 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6620:	4620      	mov	r0, r4
   b6622:	f7ff fe00 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
}
   b6626:	4628      	mov	r0, r5
   b6628:	bd70      	pop	{r4, r5, r6, pc}

000b662a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b662a:	b513      	push	{r0, r1, r4, lr}
   b662c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b662e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6632:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6634:	f7ff fe3b 	bl	b62ae <_ZN9SdSpiCard11waitNotBusyEt>
   b6638:	9a01      	ldr	r2, [sp, #4]
   b663a:	b930      	cbnz	r0, b664a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b663c:	235b      	movs	r3, #91	; 0x5b
   b663e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6640:	4620      	mov	r0, r4
   b6642:	f7ff fdf0 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6646:	2000      	movs	r0, #0
   b6648:	e005      	b.n	b6656 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b664a:	21fc      	movs	r1, #252	; 0xfc
   b664c:	4620      	mov	r0, r4
   b664e:	f7ff ff91 	bl	b6574 <_ZN9SdSpiCard9writeDataEhPKh>
   b6652:	2800      	cmp	r0, #0
   b6654:	d0f4      	beq.n	b6640 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b6656:	b002      	add	sp, #8
   b6658:	bd10      	pop	{r4, pc}

000b665a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b665a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b665c:	7a83      	ldrb	r3, [r0, #10]
   b665e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6660:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6662:	bf18      	it	ne
   b6664:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b6666:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6668:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b666a:	f7ff fe35 	bl	b62d8 <_ZN9SdSpiCard11cardCommandEhm>
   b666e:	b130      	cbz	r0, b667e <_ZN9SdSpiCard10writeStartEm+0x24>
   b6670:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6672:	4620      	mov	r0, r4
   b6674:	7023      	strb	r3, [r4, #0]
   b6676:	f7ff fdd6 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b667a:	2000      	movs	r0, #0
}
   b667c:	bd10      	pop	{r4, pc}
  return true;
   b667e:	2001      	movs	r0, #1
   b6680:	e7fc      	b.n	b667c <_ZN9SdSpiCard10writeStartEm+0x22>

000b6682 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b6682:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6684:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b6688:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b668a:	f7ff fe10 	bl	b62ae <_ZN9SdSpiCard11waitNotBusyEt>
   b668e:	4605      	mov	r5, r0
   b6690:	b930      	cbnz	r0, b66a0 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b6692:	2356      	movs	r3, #86	; 0x56
   b6694:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b6696:	4620      	mov	r0, r4
   b6698:	f7ff fdc5 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b669c:	4628      	mov	r0, r5
   b669e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b66a0:	6860      	ldr	r0, [r4, #4]
   b66a2:	21fd      	movs	r1, #253	; 0xfd
   b66a4:	f7ff fd87 	bl	b61b6 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b66a8:	e7f5      	b.n	b6696 <_ZN9SdSpiCard9writeStopEv+0x14>

000b66aa <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b66aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66ac:	4604      	mov	r4, r0
   b66ae:	4616      	mov	r6, r2
   b66b0:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b66b2:	f7ff ffd2 	bl	b665a <_ZN9SdSpiCard10writeStartEm>
   b66b6:	b170      	cbz	r0, b66d6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b66b8:	2500      	movs	r5, #0
   b66ba:	42bd      	cmp	r5, r7
   b66bc:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b66c0:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b66c2:	d004      	beq.n	b66ce <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b66c4:	f7ff ffb1 	bl	b662a <_ZN9SdSpiCard9writeDataEPKh>
   b66c8:	b128      	cbz	r0, b66d6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b66ca:	3501      	adds	r5, #1
   b66cc:	e7f5      	b.n	b66ba <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b66ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b66d2:	f7ff bfd6 	b.w	b6682 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b66d6:	4620      	mov	r0, r4
   b66d8:	f7ff fda5 	bl	b6226 <_ZN9SdSpiCard7spiStopEv>
}
   b66dc:	2000      	movs	r0, #0
   b66de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66e0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b66e0:	4b01      	ldr	r3, [pc, #4]	; (b66e8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b66e2:	2201      	movs	r2, #1
   b66e4:	701a      	strb	r2, [r3, #0]
}
   b66e6:	4770      	bx	lr
   b66e8:	2003e658 	.word	0x2003e658

000b66ec <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b66ec:	1d01      	adds	r1, r0, #4
   b66ee:	6800      	ldr	r0, [r0, #0]
   b66f0:	f000 bc30 	b.w	b6f54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b66f4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b66f4:	b510      	push	{r4, lr}
   b66f6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b66f8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b66fa:	6800      	ldr	r0, [r0, #0]
   b66fc:	f000 fbfd 	bl	b6efa <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6700:	7d20      	ldrb	r0, [r4, #20]
   b6702:	2101      	movs	r1, #1
   b6704:	f002 fff8 	bl	b96f8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b6708:	7d20      	ldrb	r0, [r4, #20]
   b670a:	2101      	movs	r1, #1
}
   b670c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6710:	f003 b803 	b.w	b971a <digitalWrite>

000b6714 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6714:	6800      	ldr	r0, [r0, #0]
   b6716:	f000 bc04 	b.w	b6f22 <_ZN8SPIClass14endTransactionEv>

000b671a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b671a:	6800      	ldr	r0, [r0, #0]
   b671c:	21ff      	movs	r1, #255	; 0xff
   b671e:	f000 bc87 	b.w	b7030 <_ZN8SPIClass8transferEh>
	...

000b6724 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6724:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6726:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6728:	4a07      	ldr	r2, [pc, #28]	; (b6748 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b672a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b672c:	2500      	movs	r5, #0
   b672e:	4c07      	ldr	r4, [pc, #28]	; (b674c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6730:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6732:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6734:	460a      	mov	r2, r1
   b6736:	4629      	mov	r1, r5
   b6738:	f000 fc80 	bl	b703c <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b673c:	7823      	ldrb	r3, [r4, #0]
   b673e:	2b00      	cmp	r3, #0
   b6740:	d0fc      	beq.n	b673c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b6742:	2000      	movs	r0, #0
   b6744:	b003      	add	sp, #12
   b6746:	bd30      	pop	{r4, r5, pc}
   b6748:	000b66e1 	.word	0x000b66e1
   b674c:	2003e658 	.word	0x2003e658

000b6750 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b6750:	6800      	ldr	r0, [r0, #0]
   b6752:	f000 bc6d 	b.w	b7030 <_ZN8SPIClass8transferEh>
	...

000b6758 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b6758:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b675a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b675c:	4a06      	ldr	r2, [pc, #24]	; (b6778 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b675e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6760:	2500      	movs	r5, #0
   b6762:	4c06      	ldr	r4, [pc, #24]	; (b677c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6764:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6766:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6768:	462a      	mov	r2, r5
   b676a:	f000 fc67 	bl	b703c <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b676e:	7823      	ldrb	r3, [r4, #0]
   b6770:	2b00      	cmp	r3, #0
   b6772:	d0fc      	beq.n	b676e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b6774:	b003      	add	sp, #12
   b6776:	bd30      	pop	{r4, r5, pc}
   b6778:	000b66e1 	.word	0x000b66e1
   b677c:	2003e658 	.word	0x2003e658

000b6780 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <netdb_freeaddrinfo+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	689b      	ldr	r3, [r3, #8]
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	00030268 	.word	0x00030268

000b6790 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <netdb_getaddrinfo+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	68db      	ldr	r3, [r3, #12]
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	00030268 	.word	0x00030268

000b67a0 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <hal_pin_validate_function+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	685b      	ldr	r3, [r3, #4]
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	0003022c 	.word	0x0003022c

000b67b0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b02      	ldr	r3, [pc, #8]	; (b67bc <hal_gpio_mode+0xc>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	689b      	ldr	r3, [r3, #8]
   b67b8:	9301      	str	r3, [sp, #4]
   b67ba:	bd08      	pop	{r3, pc}
   b67bc:	0003022c 	.word	0x0003022c

000b67c0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b67c0:	b508      	push	{r3, lr}
   b67c2:	4b02      	ldr	r3, [pc, #8]	; (b67cc <hal_gpio_get_mode+0xc>)
   b67c4:	681b      	ldr	r3, [r3, #0]
   b67c6:	68db      	ldr	r3, [r3, #12]
   b67c8:	9301      	str	r3, [sp, #4]
   b67ca:	bd08      	pop	{r3, pc}
   b67cc:	0003022c 	.word	0x0003022c

000b67d0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b67d0:	b508      	push	{r3, lr}
   b67d2:	4b02      	ldr	r3, [pc, #8]	; (b67dc <hal_gpio_write+0xc>)
   b67d4:	681b      	ldr	r3, [r3, #0]
   b67d6:	691b      	ldr	r3, [r3, #16]
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	bd08      	pop	{r3, pc}
   b67dc:	0003022c 	.word	0x0003022c

000b67e0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b67e0:	b508      	push	{r3, lr}
   b67e2:	4b02      	ldr	r3, [pc, #8]	; (b67ec <hal_adc_read+0xc>)
   b67e4:	681b      	ldr	r3, [r3, #0]
   b67e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67e8:	9301      	str	r3, [sp, #4]
   b67ea:	bd08      	pop	{r3, pc}
   b67ec:	0003022c 	.word	0x0003022c

000b67f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b67f0:	b508      	push	{r3, lr}
   b67f2:	4b02      	ldr	r3, [pc, #8]	; (b67fc <HAL_RNG_GetRandomNumber+0xc>)
   b67f4:	681b      	ldr	r3, [r3, #0]
   b67f6:	685b      	ldr	r3, [r3, #4]
   b67f8:	9301      	str	r3, [sp, #4]
   b67fa:	bd08      	pop	{r3, pc}
   b67fc:	00030218 	.word	0x00030218

000b6800 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6800:	b508      	push	{r3, lr}
   b6802:	4b02      	ldr	r3, [pc, #8]	; (b680c <HAL_Delay_Microseconds+0xc>)
   b6804:	681b      	ldr	r3, [r3, #0]
   b6806:	68db      	ldr	r3, [r3, #12]
   b6808:	9301      	str	r3, [sp, #4]
   b680a:	bd08      	pop	{r3, pc}
   b680c:	00030218 	.word	0x00030218

000b6810 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6810:	b508      	push	{r3, lr}
   b6812:	4b02      	ldr	r3, [pc, #8]	; (b681c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6814:	681b      	ldr	r3, [r3, #0]
   b6816:	691b      	ldr	r3, [r3, #16]
   b6818:	9301      	str	r3, [sp, #4]
   b681a:	bd08      	pop	{r3, pc}
   b681c:	00030218 	.word	0x00030218

000b6820 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6820:	b508      	push	{r3, lr}
   b6822:	4b02      	ldr	r3, [pc, #8]	; (b682c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6824:	681b      	ldr	r3, [r3, #0]
   b6826:	695b      	ldr	r3, [r3, #20]
   b6828:	9301      	str	r3, [sp, #4]
   b682a:	bd08      	pop	{r3, pc}
   b682c:	00030218 	.word	0x00030218

000b6830 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6830:	b508      	push	{r3, lr}
   b6832:	4b02      	ldr	r3, [pc, #8]	; (b683c <hal_rtc_time_is_valid+0xc>)
   b6834:	681b      	ldr	r3, [r3, #0]
   b6836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6838:	9301      	str	r3, [sp, #4]
   b683a:	bd08      	pop	{r3, pc}
   b683c:	00030218 	.word	0x00030218

000b6840 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6840:	b508      	push	{r3, lr}
   b6842:	4b02      	ldr	r3, [pc, #8]	; (b684c <hal_rtc_get_time+0xc>)
   b6844:	681b      	ldr	r3, [r3, #0]
   b6846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6848:	9301      	str	r3, [sp, #4]
   b684a:	bd08      	pop	{r3, pc}
   b684c:	00030218 	.word	0x00030218

000b6850 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6850:	b508      	push	{r3, lr}
   b6852:	4b02      	ldr	r3, [pc, #8]	; (b685c <os_mutex_recursive_create+0xc>)
   b6854:	681b      	ldr	r3, [r3, #0]
   b6856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6858:	9301      	str	r3, [sp, #4]
   b685a:	bd08      	pop	{r3, pc}
   b685c:	00030248 	.word	0x00030248

000b6860 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6860:	b508      	push	{r3, lr}
   b6862:	4b02      	ldr	r3, [pc, #8]	; (b686c <os_mutex_recursive_destroy+0xc>)
   b6864:	681b      	ldr	r3, [r3, #0]
   b6866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6868:	9301      	str	r3, [sp, #4]
   b686a:	bd08      	pop	{r3, pc}
   b686c:	00030248 	.word	0x00030248

000b6870 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6870:	b508      	push	{r3, lr}
   b6872:	4b02      	ldr	r3, [pc, #8]	; (b687c <os_mutex_recursive_lock+0xc>)
   b6874:	681b      	ldr	r3, [r3, #0]
   b6876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	bd08      	pop	{r3, pc}
   b687c:	00030248 	.word	0x00030248

000b6880 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6880:	b508      	push	{r3, lr}
   b6882:	4b02      	ldr	r3, [pc, #8]	; (b688c <os_mutex_recursive_unlock+0xc>)
   b6884:	681b      	ldr	r3, [r3, #0]
   b6886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6888:	9301      	str	r3, [sp, #4]
   b688a:	bd08      	pop	{r3, pc}
   b688c:	00030248 	.word	0x00030248

000b6890 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6890:	b508      	push	{r3, lr}
   b6892:	4b02      	ldr	r3, [pc, #8]	; (b689c <inet_inet_ntop+0xc>)
   b6894:	681b      	ldr	r3, [r3, #0]
   b6896:	695b      	ldr	r3, [r3, #20]
   b6898:	9301      	str	r3, [sp, #4]
   b689a:	bd08      	pop	{r3, pc}
   b689c:	00030264 	.word	0x00030264

000b68a0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b68a0:	b508      	push	{r3, lr}
   b68a2:	4b02      	ldr	r3, [pc, #8]	; (b68ac <hal_usart_end+0xc>)
   b68a4:	681b      	ldr	r3, [r3, #0]
   b68a6:	689b      	ldr	r3, [r3, #8]
   b68a8:	9301      	str	r3, [sp, #4]
   b68aa:	bd08      	pop	{r3, pc}
   b68ac:	0003023c 	.word	0x0003023c

000b68b0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b68b0:	b508      	push	{r3, lr}
   b68b2:	4b02      	ldr	r3, [pc, #8]	; (b68bc <hal_usart_write+0xc>)
   b68b4:	681b      	ldr	r3, [r3, #0]
   b68b6:	68db      	ldr	r3, [r3, #12]
   b68b8:	9301      	str	r3, [sp, #4]
   b68ba:	bd08      	pop	{r3, pc}
   b68bc:	0003023c 	.word	0x0003023c

000b68c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b68c0:	b508      	push	{r3, lr}
   b68c2:	4b02      	ldr	r3, [pc, #8]	; (b68cc <hal_usart_available+0xc>)
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	691b      	ldr	r3, [r3, #16]
   b68c8:	9301      	str	r3, [sp, #4]
   b68ca:	bd08      	pop	{r3, pc}
   b68cc:	0003023c 	.word	0x0003023c

000b68d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b02      	ldr	r3, [pc, #8]	; (b68dc <hal_usart_read+0xc>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	695b      	ldr	r3, [r3, #20]
   b68d8:	9301      	str	r3, [sp, #4]
   b68da:	bd08      	pop	{r3, pc}
   b68dc:	0003023c 	.word	0x0003023c

000b68e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b68e0:	b508      	push	{r3, lr}
   b68e2:	4b02      	ldr	r3, [pc, #8]	; (b68ec <hal_usart_peek+0xc>)
   b68e4:	681b      	ldr	r3, [r3, #0]
   b68e6:	699b      	ldr	r3, [r3, #24]
   b68e8:	9301      	str	r3, [sp, #4]
   b68ea:	bd08      	pop	{r3, pc}
   b68ec:	0003023c 	.word	0x0003023c

000b68f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b68f0:	b508      	push	{r3, lr}
   b68f2:	4b02      	ldr	r3, [pc, #8]	; (b68fc <hal_usart_flush+0xc>)
   b68f4:	681b      	ldr	r3, [r3, #0]
   b68f6:	69db      	ldr	r3, [r3, #28]
   b68f8:	9301      	str	r3, [sp, #4]
   b68fa:	bd08      	pop	{r3, pc}
   b68fc:	0003023c 	.word	0x0003023c

000b6900 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b02      	ldr	r3, [pc, #8]	; (b690c <hal_usart_is_enabled+0xc>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	6a1b      	ldr	r3, [r3, #32]
   b6908:	9301      	str	r3, [sp, #4]
   b690a:	bd08      	pop	{r3, pc}
   b690c:	0003023c 	.word	0x0003023c

000b6910 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6910:	b508      	push	{r3, lr}
   b6912:	4b02      	ldr	r3, [pc, #8]	; (b691c <hal_usart_available_data_for_write+0xc>)
   b6914:	681b      	ldr	r3, [r3, #0]
   b6916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6918:	9301      	str	r3, [sp, #4]
   b691a:	bd08      	pop	{r3, pc}
   b691c:	0003023c 	.word	0x0003023c

000b6920 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <hal_usart_begin_config+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	0003023c 	.word	0x0003023c

000b6930 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <hal_usart_init_ex+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	0003023c 	.word	0x0003023c

000b6940 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <hal_i2c_begin_transmission+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	699b      	ldr	r3, [r3, #24]
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	00030228 	.word	0x00030228

000b6950 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <hal_i2c_end_transmission+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	69db      	ldr	r3, [r3, #28]
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	00030228 	.word	0x00030228

000b6960 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <hal_i2c_write+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	6a1b      	ldr	r3, [r3, #32]
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	00030228 	.word	0x00030228

000b6970 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <hal_i2c_available+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	00030228 	.word	0x00030228

000b6980 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <hal_i2c_read+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	00030228 	.word	0x00030228

000b6990 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <hal_i2c_peek+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	00030228 	.word	0x00030228

000b69a0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b02      	ldr	r3, [pc, #8]	; (b69ac <hal_i2c_flush+0xc>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69a8:	9301      	str	r3, [sp, #4]
   b69aa:	bd08      	pop	{r3, pc}
   b69ac:	00030228 	.word	0x00030228

000b69b0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b69b0:	b508      	push	{r3, lr}
   b69b2:	4b02      	ldr	r3, [pc, #8]	; (b69bc <hal_i2c_is_enabled+0xc>)
   b69b4:	681b      	ldr	r3, [r3, #0]
   b69b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b69b8:	9301      	str	r3, [sp, #4]
   b69ba:	bd08      	pop	{r3, pc}
   b69bc:	00030228 	.word	0x00030228

000b69c0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b69c0:	b508      	push	{r3, lr}
   b69c2:	4b02      	ldr	r3, [pc, #8]	; (b69cc <hal_i2c_init+0xc>)
   b69c4:	681b      	ldr	r3, [r3, #0]
   b69c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b69c8:	9301      	str	r3, [sp, #4]
   b69ca:	bd08      	pop	{r3, pc}
   b69cc:	00030228 	.word	0x00030228

000b69d0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <hal_i2c_lock+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	00030228 	.word	0x00030228

000b69e0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <hal_i2c_unlock+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	00030228 	.word	0x00030228

000b69f0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b69f0:	b508      	push	{r3, lr}
   b69f2:	4b02      	ldr	r3, [pc, #8]	; (b69fc <hal_i2c_request_ex+0xc>)
   b69f4:	681b      	ldr	r3, [r3, #0]
   b69f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b69f8:	9301      	str	r3, [sp, #4]
   b69fa:	bd08      	pop	{r3, pc}
   b69fc:	00030228 	.word	0x00030228

000b6a00 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6a00:	b508      	push	{r3, lr}
   b6a02:	4b02      	ldr	r3, [pc, #8]	; (b6a0c <hal_spi_begin+0xc>)
   b6a04:	681b      	ldr	r3, [r3, #0]
   b6a06:	681b      	ldr	r3, [r3, #0]
   b6a08:	9301      	str	r3, [sp, #4]
   b6a0a:	bd08      	pop	{r3, pc}
   b6a0c:	00030230 	.word	0x00030230

000b6a10 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b02      	ldr	r3, [pc, #8]	; (b6a1c <hal_spi_transfer+0xc>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	695b      	ldr	r3, [r3, #20]
   b6a18:	9301      	str	r3, [sp, #4]
   b6a1a:	bd08      	pop	{r3, pc}
   b6a1c:	00030230 	.word	0x00030230

000b6a20 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6a20:	b508      	push	{r3, lr}
   b6a22:	4b02      	ldr	r3, [pc, #8]	; (b6a2c <hal_spi_init+0xc>)
   b6a24:	681b      	ldr	r3, [r3, #0]
   b6a26:	69db      	ldr	r3, [r3, #28]
   b6a28:	9301      	str	r3, [sp, #4]
   b6a2a:	bd08      	pop	{r3, pc}
   b6a2c:	00030230 	.word	0x00030230

000b6a30 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6a30:	b508      	push	{r3, lr}
   b6a32:	4b02      	ldr	r3, [pc, #8]	; (b6a3c <hal_spi_is_enabled+0xc>)
   b6a34:	681b      	ldr	r3, [r3, #0]
   b6a36:	6a1b      	ldr	r3, [r3, #32]
   b6a38:	9301      	str	r3, [sp, #4]
   b6a3a:	bd08      	pop	{r3, pc}
   b6a3c:	00030230 	.word	0x00030230

000b6a40 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6a40:	b508      	push	{r3, lr}
   b6a42:	4b02      	ldr	r3, [pc, #8]	; (b6a4c <hal_spi_info+0xc>)
   b6a44:	681b      	ldr	r3, [r3, #0]
   b6a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a48:	9301      	str	r3, [sp, #4]
   b6a4a:	bd08      	pop	{r3, pc}
   b6a4c:	00030230 	.word	0x00030230

000b6a50 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b6a50:	b508      	push	{r3, lr}
   b6a52:	4b02      	ldr	r3, [pc, #8]	; (b6a5c <hal_spi_transfer_dma+0xc>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a58:	9301      	str	r3, [sp, #4]
   b6a5a:	bd08      	pop	{r3, pc}
   b6a5c:	00030230 	.word	0x00030230

000b6a60 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b02      	ldr	r3, [pc, #8]	; (b6a6c <hal_spi_transfer_dma_status+0xc>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6a68:	9301      	str	r3, [sp, #4]
   b6a6a:	bd08      	pop	{r3, pc}
   b6a6c:	00030230 	.word	0x00030230

000b6a70 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <hal_spi_set_settings+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030230 	.word	0x00030230

000b6a80 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <hal_spi_acquire+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030230 	.word	0x00030230

000b6a90 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <hal_spi_release+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	00030230 	.word	0x00030230

000b6aa0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <HAL_USB_USART_Init+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	681b      	ldr	r3, [r3, #0]
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	0003024c 	.word	0x0003024c

000b6ab0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <HAL_USB_USART_Begin+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	685b      	ldr	r3, [r3, #4]
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	0003024c 	.word	0x0003024c

000b6ac0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <HAL_USB_USART_End+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	689b      	ldr	r3, [r3, #8]
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	0003024c 	.word	0x0003024c

000b6ad0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <HAL_USB_USART_Available_Data+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	691b      	ldr	r3, [r3, #16]
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	0003024c 	.word	0x0003024c

000b6ae0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b02      	ldr	r3, [pc, #8]	; (b6aec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	695b      	ldr	r3, [r3, #20]
   b6ae8:	9301      	str	r3, [sp, #4]
   b6aea:	bd08      	pop	{r3, pc}
   b6aec:	0003024c 	.word	0x0003024c

000b6af0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6af0:	b508      	push	{r3, lr}
   b6af2:	4b02      	ldr	r3, [pc, #8]	; (b6afc <HAL_USB_USART_Receive_Data+0xc>)
   b6af4:	681b      	ldr	r3, [r3, #0]
   b6af6:	699b      	ldr	r3, [r3, #24]
   b6af8:	9301      	str	r3, [sp, #4]
   b6afa:	bd08      	pop	{r3, pc}
   b6afc:	0003024c 	.word	0x0003024c

000b6b00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6b00:	b508      	push	{r3, lr}
   b6b02:	4b02      	ldr	r3, [pc, #8]	; (b6b0c <HAL_USB_USART_Send_Data+0xc>)
   b6b04:	681b      	ldr	r3, [r3, #0]
   b6b06:	69db      	ldr	r3, [r3, #28]
   b6b08:	9301      	str	r3, [sp, #4]
   b6b0a:	bd08      	pop	{r3, pc}
   b6b0c:	0003024c 	.word	0x0003024c

000b6b10 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b6b10:	b508      	push	{r3, lr}
   b6b12:	4b02      	ldr	r3, [pc, #8]	; (b6b1c <HAL_USB_USART_Flush_Data+0xc>)
   b6b14:	681b      	ldr	r3, [r3, #0]
   b6b16:	6a1b      	ldr	r3, [r3, #32]
   b6b18:	9301      	str	r3, [sp, #4]
   b6b1a:	bd08      	pop	{r3, pc}
   b6b1c:	0003024c 	.word	0x0003024c

000b6b20 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6b20:	b508      	push	{r3, lr}
   b6b22:	4b02      	ldr	r3, [pc, #8]	; (b6b2c <panic_+0xc>)
   b6b24:	681b      	ldr	r3, [r3, #0]
   b6b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b28:	9301      	str	r3, [sp, #4]
   b6b2a:	bd08      	pop	{r3, pc}
   b6b2c:	00030260 	.word	0x00030260

000b6b30 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6b30:	b508      	push	{r3, lr}
   b6b32:	4b02      	ldr	r3, [pc, #8]	; (b6b3c <log_message+0xc>)
   b6b34:	681b      	ldr	r3, [r3, #0]
   b6b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6b38:	9301      	str	r3, [sp, #4]
   b6b3a:	bd08      	pop	{r3, pc}
   b6b3c:	00030260 	.word	0x00030260

000b6b40 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b6b40:	b508      	push	{r3, lr}
   b6b42:	4b02      	ldr	r3, [pc, #8]	; (b6b4c <log_message_v+0xc>)
   b6b44:	681b      	ldr	r3, [r3, #0]
   b6b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6b48:	9301      	str	r3, [sp, #4]
   b6b4a:	bd08      	pop	{r3, pc}
   b6b4c:	00030260 	.word	0x00030260

000b6b50 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b6b50:	b508      	push	{r3, lr}
   b6b52:	4b02      	ldr	r3, [pc, #8]	; (b6b5c <log_level_name+0xc>)
   b6b54:	681b      	ldr	r3, [r3, #0]
   b6b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6b58:	9301      	str	r3, [sp, #4]
   b6b5a:	bd08      	pop	{r3, pc}
   b6b5c:	00030260 	.word	0x00030260

000b6b60 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6b60:	b508      	push	{r3, lr}
   b6b62:	4b02      	ldr	r3, [pc, #8]	; (b6b6c <log_set_callbacks+0xc>)
   b6b64:	681b      	ldr	r3, [r3, #0]
   b6b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6b68:	9301      	str	r3, [sp, #4]
   b6b6a:	bd08      	pop	{r3, pc}
   b6b6c:	00030260 	.word	0x00030260

000b6b70 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6b70:	b508      	push	{r3, lr}
   b6b72:	4b02      	ldr	r3, [pc, #8]	; (b6b7c <system_mode+0xc>)
   b6b74:	681b      	ldr	r3, [r3, #0]
   b6b76:	681b      	ldr	r3, [r3, #0]
   b6b78:	9301      	str	r3, [sp, #4]
   b6b7a:	bd08      	pop	{r3, pc}
   b6b7c:	00030220 	.word	0x00030220

000b6b80 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6b80:	b508      	push	{r3, lr}
   b6b82:	4b02      	ldr	r3, [pc, #8]	; (b6b8c <set_system_mode+0xc>)
   b6b84:	681b      	ldr	r3, [r3, #0]
   b6b86:	685b      	ldr	r3, [r3, #4]
   b6b88:	9301      	str	r3, [sp, #4]
   b6b8a:	bd08      	pop	{r3, pc}
   b6b8c:	00030220 	.word	0x00030220

000b6b90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6b90:	b508      	push	{r3, lr}
   b6b92:	4b02      	ldr	r3, [pc, #8]	; (b6b9c <system_delay_ms+0xc>)
   b6b94:	681b      	ldr	r3, [r3, #0]
   b6b96:	695b      	ldr	r3, [r3, #20]
   b6b98:	9301      	str	r3, [sp, #4]
   b6b9a:	bd08      	pop	{r3, pc}
   b6b9c:	00030220 	.word	0x00030220

000b6ba0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6ba0:	b508      	push	{r3, lr}
   b6ba2:	4b02      	ldr	r3, [pc, #8]	; (b6bac <system_thread_set_state+0xc>)
   b6ba4:	681b      	ldr	r3, [r3, #0]
   b6ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6ba8:	9301      	str	r3, [sp, #4]
   b6baa:	bd08      	pop	{r3, pc}
   b6bac:	00030220 	.word	0x00030220

000b6bb0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	4b02      	ldr	r3, [pc, #8]	; (b6bbc <application_thread_current+0xc>)
   b6bb4:	681b      	ldr	r3, [r3, #0]
   b6bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6bb8:	9301      	str	r3, [sp, #4]
   b6bba:	bd08      	pop	{r3, pc}
   b6bbc:	00030220 	.word	0x00030220

000b6bc0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6bc0:	b508      	push	{r3, lr}
   b6bc2:	4b02      	ldr	r3, [pc, #8]	; (b6bcc <application_thread_invoke+0xc>)
   b6bc4:	681b      	ldr	r3, [r3, #0]
   b6bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6bc8:	9301      	str	r3, [sp, #4]
   b6bca:	bd08      	pop	{r3, pc}
   b6bcc:	00030220 	.word	0x00030220

000b6bd0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6bd0:	b508      	push	{r3, lr}
   b6bd2:	4b02      	ldr	r3, [pc, #8]	; (b6bdc <system_thread_get_state+0xc>)
   b6bd4:	681b      	ldr	r3, [r3, #0]
   b6bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6bd8:	9301      	str	r3, [sp, #4]
   b6bda:	bd08      	pop	{r3, pc}
   b6bdc:	00030220 	.word	0x00030220

000b6be0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b03      	ldr	r3, [pc, #12]	; (b6bf0 <system_ctrl_set_app_request_handler+0x10>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6bea:	9301      	str	r3, [sp, #4]
   b6bec:	bd08      	pop	{r3, pc}
   b6bee:	0000      	.short	0x0000
   b6bf0:	00030220 	.word	0x00030220

000b6bf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b03      	ldr	r3, [pc, #12]	; (b6c04 <system_ctrl_set_result+0x10>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6bfe:	9301      	str	r3, [sp, #4]
   b6c00:	bd08      	pop	{r3, pc}
   b6c02:	0000      	.short	0x0000
   b6c04:	00030220 	.word	0x00030220

000b6c08 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b6c08:	b508      	push	{r3, lr}
   b6c0a:	4b03      	ldr	r3, [pc, #12]	; (b6c18 <system_sleep_ext+0x10>)
   b6c0c:	681b      	ldr	r3, [r3, #0]
   b6c0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b6c12:	9301      	str	r3, [sp, #4]
   b6c14:	bd08      	pop	{r3, pc}
   b6c16:	0000      	.short	0x0000
   b6c18:	00030220 	.word	0x00030220

000b6c1c <system_power_management_get_config>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b03      	ldr	r3, [pc, #12]	; (b6c2c <system_power_management_get_config+0x10>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6c26:	9301      	str	r3, [sp, #4]
   b6c28:	bd08      	pop	{r3, pc}
   b6c2a:	0000      	.short	0x0000
   b6c2c:	00030220 	.word	0x00030220

000b6c30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c30:	b508      	push	{r3, lr}
   b6c32:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <network_connect+0xc>)
   b6c34:	681b      	ldr	r3, [r3, #0]
   b6c36:	685b      	ldr	r3, [r3, #4]
   b6c38:	9301      	str	r3, [sp, #4]
   b6c3a:	bd08      	pop	{r3, pc}
   b6c3c:	00030240 	.word	0x00030240

000b6c40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6c40:	b508      	push	{r3, lr}
   b6c42:	4b02      	ldr	r3, [pc, #8]	; (b6c4c <network_connecting+0xc>)
   b6c44:	681b      	ldr	r3, [r3, #0]
   b6c46:	689b      	ldr	r3, [r3, #8]
   b6c48:	9301      	str	r3, [sp, #4]
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	00030240 	.word	0x00030240

000b6c50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <network_disconnect+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	68db      	ldr	r3, [r3, #12]
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	00030240 	.word	0x00030240

000b6c60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <network_ready+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	691b      	ldr	r3, [r3, #16]
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	00030240 	.word	0x00030240

000b6c70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <network_on+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	695b      	ldr	r3, [r3, #20]
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	00030240 	.word	0x00030240

000b6c80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <network_off+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	699b      	ldr	r3, [r3, #24]
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	00030240 	.word	0x00030240

000b6c90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <network_listen+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	69db      	ldr	r3, [r3, #28]
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	00030240 	.word	0x00030240

000b6ca0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <network_listening+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	6a1b      	ldr	r3, [r3, #32]
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	00030240 	.word	0x00030240

000b6cb0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <network_set_listen_timeout+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	00030240 	.word	0x00030240

000b6cc0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <network_get_listen_timeout+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	00030240 	.word	0x00030240

000b6cd0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b02      	ldr	r3, [pc, #8]	; (b6cdc <network_is_on+0xc>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6cd8:	9301      	str	r3, [sp, #4]
   b6cda:	bd08      	pop	{r3, pc}
   b6cdc:	00030240 	.word	0x00030240

000b6ce0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b02      	ldr	r3, [pc, #8]	; (b6cec <network_is_off+0xc>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ce8:	9301      	str	r3, [sp, #4]
   b6cea:	bd08      	pop	{r3, pc}
   b6cec:	00030240 	.word	0x00030240

000b6cf0 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b6cf0:	b508      	push	{r3, lr}
   b6cf2:	4b02      	ldr	r3, [pc, #8]	; (b6cfc <network_prefer+0xc>)
   b6cf4:	681b      	ldr	r3, [r3, #0]
   b6cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6cf8:	9301      	str	r3, [sp, #4]
   b6cfa:	bd08      	pop	{r3, pc}
   b6cfc:	00030240 	.word	0x00030240

000b6d00 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b6d00:	b508      	push	{r3, lr}
   b6d02:	4b02      	ldr	r3, [pc, #8]	; (b6d0c <network_is_preferred+0xc>)
   b6d04:	681b      	ldr	r3, [r3, #0]
   b6d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6d08:	9301      	str	r3, [sp, #4]
   b6d0a:	bd08      	pop	{r3, pc}
   b6d0c:	00030240 	.word	0x00030240

000b6d10 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b6d10:	b508      	push	{r3, lr}
   b6d12:	4b02      	ldr	r3, [pc, #8]	; (b6d1c <spark_process+0xc>)
   b6d14:	681b      	ldr	r3, [r3, #0]
   b6d16:	689b      	ldr	r3, [r3, #8]
   b6d18:	9301      	str	r3, [sp, #4]
   b6d1a:	bd08      	pop	{r3, pc}
   b6d1c:	00030244 	.word	0x00030244

000b6d20 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6d20:	b508      	push	{r3, lr}
   b6d22:	4b02      	ldr	r3, [pc, #8]	; (b6d2c <spark_cloud_flag_connect+0xc>)
   b6d24:	681b      	ldr	r3, [r3, #0]
   b6d26:	68db      	ldr	r3, [r3, #12]
   b6d28:	9301      	str	r3, [sp, #4]
   b6d2a:	bd08      	pop	{r3, pc}
   b6d2c:	00030244 	.word	0x00030244

000b6d30 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6d30:	b508      	push	{r3, lr}
   b6d32:	4b02      	ldr	r3, [pc, #8]	; (b6d3c <spark_cloud_flag_connected+0xc>)
   b6d34:	681b      	ldr	r3, [r3, #0]
   b6d36:	695b      	ldr	r3, [r3, #20]
   b6d38:	9301      	str	r3, [sp, #4]
   b6d3a:	bd08      	pop	{r3, pc}
   b6d3c:	00030244 	.word	0x00030244

000b6d40 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6d40:	b508      	push	{r3, lr}
   b6d42:	4b02      	ldr	r3, [pc, #8]	; (b6d4c <spark_send_event+0xc>)
   b6d44:	681b      	ldr	r3, [r3, #0]
   b6d46:	6a1b      	ldr	r3, [r3, #32]
   b6d48:	9301      	str	r3, [sp, #4]
   b6d4a:	bd08      	pop	{r3, pc}
   b6d4c:	00030244 	.word	0x00030244

000b6d50 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6d50:	b508      	push	{r3, lr}
   b6d52:	4b02      	ldr	r3, [pc, #8]	; (b6d5c <spark_sync_time_pending+0xc>)
   b6d54:	681b      	ldr	r3, [r3, #0]
   b6d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d58:	9301      	str	r3, [sp, #4]
   b6d5a:	bd08      	pop	{r3, pc}
   b6d5c:	00030244 	.word	0x00030244

000b6d60 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b6d60:	b508      	push	{r3, lr}
   b6d62:	4b02      	ldr	r3, [pc, #8]	; (b6d6c <spark_set_connection_property+0xc>)
   b6d64:	681b      	ldr	r3, [r3, #0]
   b6d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6d68:	9301      	str	r3, [sp, #4]
   b6d6a:	bd08      	pop	{r3, pc}
   b6d6c:	00030244 	.word	0x00030244

000b6d70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6d70:	b508      	push	{r3, lr}
   b6d72:	4b02      	ldr	r3, [pc, #8]	; (b6d7c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6d74:	681b      	ldr	r3, [r3, #0]
   b6d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d78:	9301      	str	r3, [sp, #4]
   b6d7a:	bd08      	pop	{r3, pc}
   b6d7c:	00030244 	.word	0x00030244

000b6d80 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6d80:	b508      	push	{r3, lr}
   b6d82:	4b02      	ldr	r3, [pc, #8]	; (b6d8c <malloc+0xc>)
   b6d84:	681b      	ldr	r3, [r3, #0]
   b6d86:	681b      	ldr	r3, [r3, #0]
   b6d88:	9301      	str	r3, [sp, #4]
   b6d8a:	bd08      	pop	{r3, pc}
   b6d8c:	0003021c 	.word	0x0003021c

000b6d90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6d90:	b508      	push	{r3, lr}
   b6d92:	4b02      	ldr	r3, [pc, #8]	; (b6d9c <free+0xc>)
   b6d94:	681b      	ldr	r3, [r3, #0]
   b6d96:	685b      	ldr	r3, [r3, #4]
   b6d98:	9301      	str	r3, [sp, #4]
   b6d9a:	bd08      	pop	{r3, pc}
   b6d9c:	0003021c 	.word	0x0003021c

000b6da0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6da0:	b508      	push	{r3, lr}
   b6da2:	4b02      	ldr	r3, [pc, #8]	; (b6dac <realloc+0xc>)
   b6da4:	681b      	ldr	r3, [r3, #0]
   b6da6:	689b      	ldr	r3, [r3, #8]
   b6da8:	9301      	str	r3, [sp, #4]
   b6daa:	bd08      	pop	{r3, pc}
   b6dac:	0003021c 	.word	0x0003021c

000b6db0 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6db0:	b508      	push	{r3, lr}
   b6db2:	4b02      	ldr	r3, [pc, #8]	; (b6dbc <snprintf+0xc>)
   b6db4:	681b      	ldr	r3, [r3, #0]
   b6db6:	69db      	ldr	r3, [r3, #28]
   b6db8:	9301      	str	r3, [sp, #4]
   b6dba:	bd08      	pop	{r3, pc}
   b6dbc:	0003021c 	.word	0x0003021c

000b6dc0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6dc0:	b508      	push	{r3, lr}
   b6dc2:	4b02      	ldr	r3, [pc, #8]	; (b6dcc <vsnprintf+0xc>)
   b6dc4:	681b      	ldr	r3, [r3, #0]
   b6dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6dc8:	9301      	str	r3, [sp, #4]
   b6dca:	bd08      	pop	{r3, pc}
   b6dcc:	0003021c 	.word	0x0003021c

000b6dd0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6dd0:	b508      	push	{r3, lr}
   b6dd2:	4b02      	ldr	r3, [pc, #8]	; (b6ddc <abort+0xc>)
   b6dd4:	681b      	ldr	r3, [r3, #0]
   b6dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6dd8:	9301      	str	r3, [sp, #4]
   b6dda:	bd08      	pop	{r3, pc}
   b6ddc:	0003021c 	.word	0x0003021c

000b6de0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6de0:	b508      	push	{r3, lr}
   b6de2:	4b02      	ldr	r3, [pc, #8]	; (b6dec <_malloc_r+0xc>)
   b6de4:	681b      	ldr	r3, [r3, #0]
   b6de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6de8:	9301      	str	r3, [sp, #4]
   b6dea:	bd08      	pop	{r3, pc}
   b6dec:	0003021c 	.word	0x0003021c

000b6df0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6df0:	b508      	push	{r3, lr}
   b6df2:	4b02      	ldr	r3, [pc, #8]	; (b6dfc <__errno+0xc>)
   b6df4:	681b      	ldr	r3, [r3, #0]
   b6df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6df8:	9301      	str	r3, [sp, #4]
   b6dfa:	bd08      	pop	{r3, pc}
   b6dfc:	0003021c 	.word	0x0003021c

000b6e00 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6e00:	b508      	push	{r3, lr}
   b6e02:	4b02      	ldr	r3, [pc, #8]	; (b6e0c <__assert_func+0xc>)
   b6e04:	681b      	ldr	r3, [r3, #0]
   b6e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e08:	9301      	str	r3, [sp, #4]
   b6e0a:	bd08      	pop	{r3, pc}
   b6e0c:	0003021c 	.word	0x0003021c

000b6e10 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6e10:	b508      	push	{r3, lr}
   b6e12:	4b02      	ldr	r3, [pc, #8]	; (b6e1c <newlib_impure_ptr_callback+0xc>)
   b6e14:	681b      	ldr	r3, [r3, #0]
   b6e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e18:	9301      	str	r3, [sp, #4]
   b6e1a:	bd08      	pop	{r3, pc}
   b6e1c:	0003021c 	.word	0x0003021c

000b6e20 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6e20:	2200      	movs	r2, #0
   b6e22:	6840      	ldr	r0, [r0, #4]
   b6e24:	4611      	mov	r1, r2
   b6e26:	f7ff bf3b 	b.w	b6ca0 <network_listening>

000b6e2a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6e2a:	2200      	movs	r2, #0
   b6e2c:	6840      	ldr	r0, [r0, #4]
   b6e2e:	4611      	mov	r1, r2
   b6e30:	f7ff bf46 	b.w	b6cc0 <network_get_listen_timeout>

000b6e34 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6e34:	6840      	ldr	r0, [r0, #4]
   b6e36:	2200      	movs	r2, #0
   b6e38:	f7ff bf3a 	b.w	b6cb0 <network_set_listen_timeout>

000b6e3c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6e3c:	6840      	ldr	r0, [r0, #4]
   b6e3e:	2200      	movs	r2, #0
   b6e40:	f081 0101 	eor.w	r1, r1, #1
   b6e44:	f7ff bf24 	b.w	b6c90 <network_listen>

000b6e48 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6e48:	2300      	movs	r3, #0
   b6e4a:	6840      	ldr	r0, [r0, #4]
   b6e4c:	461a      	mov	r2, r3
   b6e4e:	4619      	mov	r1, r3
   b6e50:	f7ff bf16 	b.w	b6c80 <network_off>

000b6e54 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6e54:	2300      	movs	r3, #0
   b6e56:	6840      	ldr	r0, [r0, #4]
   b6e58:	461a      	mov	r2, r3
   b6e5a:	4619      	mov	r1, r3
   b6e5c:	f7ff bf08 	b.w	b6c70 <network_on>

000b6e60 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6e60:	2200      	movs	r2, #0
   b6e62:	6840      	ldr	r0, [r0, #4]
   b6e64:	4611      	mov	r1, r2
   b6e66:	f7ff befb 	b.w	b6c60 <network_ready>

000b6e6a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6e6a:	2200      	movs	r2, #0
   b6e6c:	6840      	ldr	r0, [r0, #4]
   b6e6e:	4611      	mov	r1, r2
   b6e70:	f7ff bee6 	b.w	b6c40 <network_connecting>

000b6e74 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6e74:	6840      	ldr	r0, [r0, #4]
   b6e76:	2200      	movs	r2, #0
   b6e78:	2102      	movs	r1, #2
   b6e7a:	f7ff bee9 	b.w	b6c50 <network_disconnect>

000b6e7e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6e7e:	2300      	movs	r3, #0
   b6e80:	6840      	ldr	r0, [r0, #4]
   b6e82:	461a      	mov	r2, r3
   b6e84:	f7ff bed4 	b.w	b6c30 <network_connect>

000b6e88 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6e88:	4b02      	ldr	r3, [pc, #8]	; (b6e94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6e8a:	2203      	movs	r2, #3
   b6e8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6e8e:	4a02      	ldr	r2, [pc, #8]	; (b6e98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6e90:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6e92:	4770      	bx	lr
   b6e94:	2003e65c 	.word	0x2003e65c
   b6e98:	000b9ed8 	.word	0x000b9ed8

000b6e9c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6e9c:	680b      	ldr	r3, [r1, #0]
   b6e9e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6ea0:	684b      	ldr	r3, [r1, #4]
   b6ea2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6ea4:	b113      	cbz	r3, b6eac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6ea6:	685a      	ldr	r2, [r3, #4]
   b6ea8:	3201      	adds	r2, #1
   b6eaa:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6eac:	4770      	bx	lr

000b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6eae:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6eb0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b6eb2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b6eb4:	b17c      	cbz	r4, b6ed6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b6eb6:	6863      	ldr	r3, [r4, #4]
   b6eb8:	3b01      	subs	r3, #1
   b6eba:	6063      	str	r3, [r4, #4]
   b6ebc:	b95b      	cbnz	r3, b6ed6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6ebe:	6823      	ldr	r3, [r4, #0]
   b6ec0:	4620      	mov	r0, r4
   b6ec2:	689b      	ldr	r3, [r3, #8]
   b6ec4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6ec6:	68a3      	ldr	r3, [r4, #8]
   b6ec8:	3b01      	subs	r3, #1
   b6eca:	60a3      	str	r3, [r4, #8]
   b6ecc:	b91b      	cbnz	r3, b6ed6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b6ece:	6823      	ldr	r3, [r4, #0]
   b6ed0:	4620      	mov	r0, r4
   b6ed2:	68db      	ldr	r3, [r3, #12]
   b6ed4:	4798      	blx	r3
      }
   b6ed6:	4628      	mov	r0, r5
   b6ed8:	bd38      	pop	{r3, r4, r5, pc}

000b6eda <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6eda:	2100      	movs	r1, #0
   b6edc:	f7ff bdd8 	b.w	b6a90 <hal_spi_release>

000b6ee0 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6ee0:	2100      	movs	r1, #0
   b6ee2:	f7ff bdcd 	b.w	b6a80 <hal_spi_acquire>

000b6ee6 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6ee6:	b510      	push	{r4, lr}
   b6ee8:	4604      	mov	r4, r0
   b6eea:	4608      	mov	r0, r1
{
    _spi = spi;
   b6eec:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6eee:	f7ff fd97 	bl	b6a20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6ef2:	2300      	movs	r3, #0
   b6ef4:	6063      	str	r3, [r4, #4]
}
   b6ef6:	4620      	mov	r0, r4
   b6ef8:	bd10      	pop	{r4, pc}

000b6efa <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6efa:	b513      	push	{r0, r1, r4, lr}
   b6efc:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6efe:	7800      	ldrb	r0, [r0, #0]
   b6f00:	f7ff ffee 	bl	b6ee0 <_ZN8SPIClass4lockEv.isra.0>
   b6f04:	b958      	cbnz	r0, b6f1e <_ZN8SPIClass5beginEv+0x24>
   b6f06:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6f08:	9001      	str	r0, [sp, #4]
   b6f0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6f0e:	f7ff fd77 	bl	b6a00 <hal_spi_begin>
        unlock();
   b6f12:	9801      	ldr	r0, [sp, #4]
    }
}
   b6f14:	b002      	add	sp, #8
   b6f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f1a:	f7ff bfde 	b.w	b6eda <_ZN8SPIClass6unlockEv.isra.0>
   b6f1e:	b002      	add	sp, #8
   b6f20:	bd10      	pop	{r4, pc}

000b6f22 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6f22:	7800      	ldrb	r0, [r0, #0]
   b6f24:	f7ff bfd9 	b.w	b6eda <_ZN8SPIClass6unlockEv.isra.0>

000b6f28 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6f28:	0840      	lsrs	r0, r0, #1
{
   b6f2a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6f2c:	6018      	str	r0, [r3, #0]
   b6f2e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6f30:	6818      	ldr	r0, [r3, #0]
   b6f32:	4288      	cmp	r0, r1
   b6f34:	b2e5      	uxtb	r5, r4
   b6f36:	d906      	bls.n	b6f46 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6f38:	3401      	adds	r4, #1
   b6f3a:	2c08      	cmp	r4, #8
   b6f3c:	d002      	beq.n	b6f44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6f3e:	0840      	lsrs	r0, r0, #1
   b6f40:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6f42:	e7f5      	b.n	b6f30 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6f44:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6f46:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6f48:	5d5b      	ldrb	r3, [r3, r5]
   b6f4a:	7013      	strb	r3, [r2, #0]
}
   b6f4c:	bd30      	pop	{r4, r5, pc}
   b6f4e:	bf00      	nop
   b6f50:	000b9f14 	.word	0x000b9f14

000b6f54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f58:	4606      	mov	r6, r0
   b6f5a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6f5c:	7800      	ldrb	r0, [r0, #0]
{
   b6f5e:	460c      	mov	r4, r1
    CHECK(lock());
   b6f60:	f7ff ffbe 	bl	b6ee0 <_ZN8SPIClass4lockEv.isra.0>
   b6f64:	2800      	cmp	r0, #0
   b6f66:	db1b      	blt.n	b6fa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6f68:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6f6a:	2214      	movs	r2, #20
   b6f6c:	2100      	movs	r1, #0
   b6f6e:	a809      	add	r0, sp, #36	; 0x24
   b6f70:	f002 fd0e 	bl	b9990 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6f74:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6f76:	2200      	movs	r2, #0
   b6f78:	a909      	add	r1, sp, #36	; 0x24
   b6f7a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6f7c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6f80:	f7ff fd5e 	bl	b6a40 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6f84:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6f88:	b113      	cbz	r3, b6f90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6f8a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6f8e:	b155      	cbz	r5, b6fa6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6f90:	2700      	movs	r7, #0
   b6f92:	46b9      	mov	r9, r7
   b6f94:	46b8      	mov	r8, r7
   b6f96:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6f98:	7923      	ldrb	r3, [r4, #4]
   b6f9a:	b15d      	cbz	r5, b6fb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6f9c:	b1c3      	cbz	r3, b6fd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6f9e:	2000      	movs	r0, #0
}
   b6fa0:	b00f      	add	sp, #60	; 0x3c
   b6fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6fa6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6faa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6fae:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6fb2:	e7f1      	b.n	b6f98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6fb4:	2b00      	cmp	r3, #0
   b6fb6:	d135      	bne.n	b7024 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6fb8:	68a3      	ldr	r3, [r4, #8]
   b6fba:	4543      	cmp	r3, r8
   b6fbc:	d108      	bne.n	b6fd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6fbe:	f88d 9020 	strb.w	r9, [sp, #32]
   b6fc2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6fc6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6fca:	89a3      	ldrh	r3, [r4, #12]
   b6fcc:	429a      	cmp	r2, r3
   b6fce:	d0e6      	beq.n	b6f9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6fd0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6fd2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6fd4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6fd8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6fda:	ab04      	add	r3, sp, #16
   b6fdc:	f10d 020f 	add.w	r2, sp, #15
   b6fe0:	f7ff ffa2 	bl	b6f28 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6fe4:	7921      	ldrb	r1, [r4, #4]
   b6fe6:	b985      	cbnz	r5, b700a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6fe8:	b989      	cbnz	r1, b700e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6fea:	68a3      	ldr	r3, [r4, #8]
   b6fec:	4543      	cmp	r3, r8
   b6fee:	d30e      	bcc.n	b700e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6ff0:	f88d 9020 	strb.w	r9, [sp, #32]
   b6ff4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6ff8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6ffc:	89a3      	ldrh	r3, [r4, #12]
   b6ffe:	429a      	cmp	r2, r3
   b7000:	d105      	bne.n	b700e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7002:	9b04      	ldr	r3, [sp, #16]
   b7004:	4543      	cmp	r3, r8
   b7006:	d102      	bne.n	b700e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7008:	e7c9      	b.n	b6f9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b700a:	2900      	cmp	r1, #0
   b700c:	d1f9      	bne.n	b7002 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b700e:	2300      	movs	r3, #0
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	7b63      	ldrb	r3, [r4, #13]
   b7014:	9300      	str	r3, [sp, #0]
   b7016:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b701a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b701c:	7830      	ldrb	r0, [r6, #0]
   b701e:	f7ff fd27 	bl	b6a70 <hal_spi_set_settings>
   b7022:	e7bc      	b.n	b6f9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7024:	e9cd 5500 	strd	r5, r5, [sp]
   b7028:	462b      	mov	r3, r5
   b702a:	462a      	mov	r2, r5
   b702c:	2101      	movs	r1, #1
   b702e:	e7f5      	b.n	b701c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7030 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7030:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7032:	7800      	ldrb	r0, [r0, #0]
   b7034:	f7ff fcec 	bl	b6a10 <hal_spi_transfer>
}
   b7038:	b2c0      	uxtb	r0, r0
   b703a:	bd08      	pop	{r3, pc}

000b703c <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b703c:	b530      	push	{r4, r5, lr}
   b703e:	b087      	sub	sp, #28
   b7040:	4604      	mov	r4, r0
   b7042:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b7044:	9500      	str	r5, [sp, #0]
   b7046:	7800      	ldrb	r0, [r0, #0]
   b7048:	f7ff fd02 	bl	b6a50 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b704c:	b93d      	cbnz	r5, b705e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b704e:	7820      	ldrb	r0, [r4, #0]
   b7050:	a902      	add	r1, sp, #8
   b7052:	f7ff fd05 	bl	b6a60 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b7056:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b705a:	07db      	lsls	r3, r3, #31
   b705c:	d4f7      	bmi.n	b704e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b705e:	b007      	add	sp, #28
   b7060:	bd30      	pop	{r4, r5, pc}

000b7062 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b7062:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b7064:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7066:	4604      	mov	r4, r0
      if (_M_manager)
   b7068:	b113      	cbz	r3, b7070 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b706a:	2203      	movs	r2, #3
   b706c:	4601      	mov	r1, r0
   b706e:	4798      	blx	r3
    }
   b7070:	4620      	mov	r0, r4
   b7072:	bd10      	pop	{r4, pc}

000b7074 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b7074:	b510      	push	{r4, lr}
   b7076:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b7078:	6800      	ldr	r0, [r0, #0]
   b707a:	b118      	cbz	r0, b7084 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b707c:	f7ff fe88 	bl	b6d90 <free>
            wakeupSource_ = nullptr;
   b7080:	2300      	movs	r3, #0
   b7082:	6023      	str	r3, [r4, #0]
        }
    }
   b7084:	bd10      	pop	{r4, pc}

000b7086 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b7086:	b538      	push	{r3, r4, r5, lr}
   b7088:	460c      	mov	r4, r1
   b708a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b708c:	f7ff fff2 	bl	b7074 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b7090:	b154      	cbz	r4, b70a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b7092:	8820      	ldrh	r0, [r4, #0]
   b7094:	f7ff fe74 	bl	b6d80 <malloc>
   b7098:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b709a:	b128      	cbz	r0, b70a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b709c:	8822      	ldrh	r2, [r4, #0]
   b709e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b70a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b70a4:	f002 bc4c 	b.w	b9940 <memcpy>
    }
   b70a8:	bd38      	pop	{r3, r4, r5, pc}

000b70aa <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b70aa:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b70ac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b70b0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b70b2:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b70b6:	f8c0 3006 	str.w	r3, [r0, #6]
   b70ba:	894b      	ldrh	r3, [r1, #10]
   b70bc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b70be:	460c      	mov	r4, r1
   b70c0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b70c2:	f7ff ffd7 	bl	b7074 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b70c6:	6823      	ldr	r3, [r4, #0]
   b70c8:	b113      	cbz	r3, b70d0 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b70ca:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b70cc:	2300      	movs	r3, #0
   b70ce:	6023      	str	r3, [r4, #0]
    }
   b70d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b70d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b70d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b70d6:	4d2b      	ldr	r5, [pc, #172]	; (b7184 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b70d8:	7d0b      	ldrb	r3, [r1, #20]
   b70da:	4604      	mov	r4, r0
   b70dc:	b08b      	sub	sp, #44	; 0x2c
   b70de:	4608      	mov	r0, r1
   b70e0:	1daf      	adds	r7, r5, #6
   b70e2:	2b00      	cmp	r3, #0
   b70e4:	d036      	beq.n	b7154 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b70e6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b70e8:	791b      	ldrb	r3, [r3, #4]
   b70ea:	2b00      	cmp	r3, #0
   b70ec:	d032      	beq.n	b7154 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b70ee:	4b26      	ldr	r3, [pc, #152]	; (b7188 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b70f0:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b70f2:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b70f4:	a902      	add	r1, sp, #8
   b70f6:	3004      	adds	r0, #4
   b70f8:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b70fc:	f7ff fd84 	bl	b6c08 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b7100:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b7104:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b7108:	b200      	sxth	r0, r0
   b710a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b710e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b7112:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b7114:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b7116:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b7118:	4628      	mov	r0, r5
   b711a:	f7ff ffb4 	bl	b7086 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b711e:	a802      	add	r0, sp, #8
   b7120:	f7ff ffa8 	bl	b7074 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b7124:	2300      	movs	r3, #0
   b7126:	6023      	str	r3, [r4, #0]
   b7128:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b712a:	71a3      	strb	r3, [r4, #6]
   b712c:	8123      	strh	r3, [r4, #8]
   b712e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7132:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b7134:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b7138:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b713a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b713e:	f8c4 3006 	str.w	r3, [r4, #6]
   b7142:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b7144:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b7146:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b7148:	4620      	mov	r0, r4
   b714a:	f7ff ff9c 	bl	b7086 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b714e:	4620      	mov	r0, r4
   b7150:	b00b      	add	sp, #44	; 0x2c
   b7152:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b7154:	2600      	movs	r6, #0
   b7156:	2320      	movs	r3, #32
   b7158:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b715c:	4b0b      	ldr	r3, [pc, #44]	; (b718c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b715e:	9300      	str	r3, [sp, #0]
   b7160:	aa02      	add	r2, sp, #8
   b7162:	4633      	mov	r3, r6
   b7164:	490a      	ldr	r1, [pc, #40]	; (b7190 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b7166:	2032      	movs	r0, #50	; 0x32
   b7168:	f7ff fce2 	bl	b6b30 <log_message>
            : wakeupSource_(nullptr),
   b716c:	4b06      	ldr	r3, [pc, #24]	; (b7188 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b716e:	4805      	ldr	r0, [pc, #20]	; (b7184 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b7170:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b7172:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b7176:	a902      	add	r1, sp, #8
   b7178:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b717c:	f7ff ff95 	bl	b70aa <_ZN17SystemSleepResultaSEOS_.isra.0>
   b7180:	e7cd      	b.n	b711e <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b7182:	bf00      	nop
   b7184:	2003e664 	.word	0x2003e664
   b7188:	ffff0000 	.word	0xffff0000
   b718c:	000b9f23 	.word	0x000b9f23
   b7190:	000b9f1c 	.word	0x000b9f1c

000b7194 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7194:	4b05      	ldr	r3, [pc, #20]	; (b71ac <_GLOBAL__sub_I_System+0x18>)
   b7196:	2202      	movs	r2, #2
   b7198:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b719a:	4b05      	ldr	r3, [pc, #20]	; (b71b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b719c:	4a05      	ldr	r2, [pc, #20]	; (b71b4 <_GLOBAL__sub_I_System+0x20>)
   b719e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b71a0:	2000      	movs	r0, #0
   b71a2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b71a6:	f7ff bceb 	b.w	b6b80 <set_system_mode>
   b71aa:	bf00      	nop
   b71ac:	2003e670 	.word	0x2003e670
   b71b0:	2003e664 	.word	0x2003e664
   b71b4:	ffff0000 	.word	0xffff0000

000b71b8 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b71b8:	b510      	push	{r4, lr}
   b71ba:	4604      	mov	r4, r0
{
    free(buffer);
   b71bc:	6800      	ldr	r0, [r0, #0]
   b71be:	f7ff fde7 	bl	b6d90 <free>
}
   b71c2:	4620      	mov	r0, r4
   b71c4:	bd10      	pop	{r4, pc}

000b71c6 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b71c6:	b510      	push	{r4, lr}
   b71c8:	4604      	mov	r4, r0
    if (buffer) {
   b71ca:	6800      	ldr	r0, [r0, #0]
   b71cc:	b108      	cbz	r0, b71d2 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b71ce:	f7ff fddf 	bl	b6d90 <free>
    }
    buffer = nullptr;
   b71d2:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b71d4:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b71d8:	6023      	str	r3, [r4, #0]
}
   b71da:	bd10      	pop	{r4, pc}

000b71dc <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b71dc:	b538      	push	{r3, r4, r5, lr}
   b71de:	4604      	mov	r4, r0
   b71e0:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b71e2:	6800      	ldr	r0, [r0, #0]
   b71e4:	3101      	adds	r1, #1
   b71e6:	f7ff fddb 	bl	b6da0 <realloc>
    if (newbuffer) {
   b71ea:	b110      	cbz	r0, b71f2 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b71ec:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b71f0:	2001      	movs	r0, #1
    }
    return 0;
}
   b71f2:	bd38      	pop	{r3, r4, r5, pc}

000b71f4 <_ZN6String7reserveEj>:
{
   b71f4:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b71f6:	6803      	ldr	r3, [r0, #0]
{
   b71f8:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b71fa:	b123      	cbz	r3, b7206 <_ZN6String7reserveEj+0x12>
   b71fc:	6843      	ldr	r3, [r0, #4]
   b71fe:	428b      	cmp	r3, r1
   b7200:	d301      	bcc.n	b7206 <_ZN6String7reserveEj+0x12>
   b7202:	2001      	movs	r0, #1
}
   b7204:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b7206:	4620      	mov	r0, r4
   b7208:	f7ff ffe8 	bl	b71dc <_ZN6String12changeBufferEj>
   b720c:	2800      	cmp	r0, #0
   b720e:	d0f9      	beq.n	b7204 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b7210:	68a3      	ldr	r3, [r4, #8]
   b7212:	2b00      	cmp	r3, #0
   b7214:	d1f5      	bne.n	b7202 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b7216:	6822      	ldr	r2, [r4, #0]
   b7218:	7013      	strb	r3, [r2, #0]
   b721a:	e7f2      	b.n	b7202 <_ZN6String7reserveEj+0xe>

000b721c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b721c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b721e:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b7220:	4611      	mov	r1, r2
   b7222:	9201      	str	r2, [sp, #4]
{
   b7224:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b7226:	f7ff ffe5 	bl	b71f4 <_ZN6String7reserveEj>
   b722a:	9a01      	ldr	r2, [sp, #4]
   b722c:	b928      	cbnz	r0, b723a <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b722e:	4620      	mov	r0, r4
   b7230:	f7ff ffc9 	bl	b71c6 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b7234:	4620      	mov	r0, r4
   b7236:	b003      	add	sp, #12
   b7238:	bd30      	pop	{r4, r5, pc}
    len = length;
   b723a:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b723c:	4629      	mov	r1, r5
   b723e:	6820      	ldr	r0, [r4, #0]
   b7240:	f002 fb7e 	bl	b9940 <memcpy>
    buffer[len] = 0;
   b7244:	6822      	ldr	r2, [r4, #0]
   b7246:	68a3      	ldr	r3, [r4, #8]
   b7248:	2100      	movs	r1, #0
   b724a:	54d1      	strb	r1, [r2, r3]
    return *this;
   b724c:	e7f2      	b.n	b7234 <_ZN6String4copyEPKcj+0x18>

000b724e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b724e:	b538      	push	{r3, r4, r5, lr}
   b7250:	4605      	mov	r5, r0
    if (buffer) {
   b7252:	6800      	ldr	r0, [r0, #0]
{
   b7254:	460c      	mov	r4, r1
    if (buffer) {
   b7256:	b170      	cbz	r0, b7276 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b7258:	686a      	ldr	r2, [r5, #4]
   b725a:	688b      	ldr	r3, [r1, #8]
   b725c:	429a      	cmp	r2, r3
   b725e:	d308      	bcc.n	b7272 <_ZN6String4moveERS_+0x24>
   b7260:	6809      	ldr	r1, [r1, #0]
   b7262:	b131      	cbz	r1, b7272 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b7264:	f002 fbe1 	bl	b9a2a <strcpy>
            len = rhs.len;
   b7268:	68a3      	ldr	r3, [r4, #8]
   b726a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b726c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b726e:	60a3      	str	r3, [r4, #8]
}
   b7270:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b7272:	f7ff fd8d 	bl	b6d90 <free>
    buffer = rhs.buffer;
   b7276:	6823      	ldr	r3, [r4, #0]
   b7278:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b727a:	6863      	ldr	r3, [r4, #4]
   b727c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b727e:	68a3      	ldr	r3, [r4, #8]
   b7280:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b7282:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b7284:	e9c4 3300 	strd	r3, r3, [r4]
   b7288:	e7f1      	b.n	b726e <_ZN6String4moveERS_+0x20>

000b728a <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b728a:	b510      	push	{r4, lr}
    buffer = nullptr;
   b728c:	2300      	movs	r3, #0
    capacity_ = 0;
   b728e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7292:	4604      	mov	r4, r0
    len = 0;
   b7294:	6083      	str	r3, [r0, #8]
    flags = 0;
   b7296:	7303      	strb	r3, [r0, #12]
    move(rval);
   b7298:	f7ff ffd9 	bl	b724e <_ZN6String4moveERS_>
}
   b729c:	4620      	mov	r0, r4
   b729e:	bd10      	pop	{r4, pc}

000b72a0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b72a0:	4288      	cmp	r0, r1
{
   b72a2:	b510      	push	{r4, lr}
   b72a4:	4604      	mov	r4, r0
    if (this == &rhs) {
   b72a6:	d005      	beq.n	b72b4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b72a8:	680b      	ldr	r3, [r1, #0]
   b72aa:	b12b      	cbz	r3, b72b8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b72ac:	688a      	ldr	r2, [r1, #8]
   b72ae:	4619      	mov	r1, r3
   b72b0:	f7ff ffb4 	bl	b721c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b72b4:	4620      	mov	r0, r4
   b72b6:	bd10      	pop	{r4, pc}
        invalidate();
   b72b8:	f7ff ff85 	bl	b71c6 <_ZN6String10invalidateEv>
   b72bc:	e7fa      	b.n	b72b4 <_ZN6StringaSERKS_+0x14>

000b72be <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b72be:	b510      	push	{r4, lr}
    buffer = nullptr;
   b72c0:	2300      	movs	r3, #0
String::String(const String &value)
   b72c2:	4604      	mov	r4, r0
    capacity_ = 0;
   b72c4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b72c8:	6083      	str	r3, [r0, #8]
    flags = 0;
   b72ca:	7303      	strb	r3, [r0, #12]
    *this = value;
   b72cc:	f7ff ffe8 	bl	b72a0 <_ZN6StringaSERKS_>
}
   b72d0:	4620      	mov	r0, r4
   b72d2:	bd10      	pop	{r4, pc}

000b72d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b72d4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b72d6:	6843      	ldr	r3, [r0, #4]
   b72d8:	3b01      	subs	r3, #1
    {
   b72da:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b72dc:	6043      	str	r3, [r0, #4]
   b72de:	b963      	cbnz	r3, b72fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b72e0:	6803      	ldr	r3, [r0, #0]
   b72e2:	689b      	ldr	r3, [r3, #8]
   b72e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b72e6:	68a3      	ldr	r3, [r4, #8]
   b72e8:	3b01      	subs	r3, #1
   b72ea:	60a3      	str	r3, [r4, #8]
   b72ec:	b92b      	cbnz	r3, b72fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b72ee:	6823      	ldr	r3, [r4, #0]
   b72f0:	4620      	mov	r0, r4
   b72f2:	68db      	ldr	r3, [r3, #12]
    }
   b72f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b72f8:	4718      	bx	r3
    }
   b72fa:	bd10      	pop	{r4, pc}

000b72fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b72fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b72fe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7302:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7304:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b7308:	42ae      	cmp	r6, r5
   b730a:	d004      	beq.n	b7316 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b730c:	4628      	mov	r0, r5
   b730e:	f7ff ff53 	bl	b71b8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b7312:	3510      	adds	r5, #16
   b7314:	e7f8      	b.n	b7308 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7316:	6820      	ldr	r0, [r4, #0]
   b7318:	f7ff fd3a 	bl	b6d90 <free>
    AllocatorT::free(data_);
}
   b731c:	4620      	mov	r0, r4
   b731e:	bd70      	pop	{r4, r5, r6, pc}

000b7320 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b7320:	b513      	push	{r0, r1, r4, lr}
   b7322:	460b      	mov	r3, r1
   b7324:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7326:	e9d0 0100 	ldrd	r0, r1, [r0]
   b732a:	466c      	mov	r4, sp
   b732c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7330:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7334:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7338:	e894 0003 	ldmia.w	r4, {r0, r1}
   b733c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7340:	b002      	add	sp, #8
   b7342:	bd10      	pop	{r4, pc}

000b7344 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7344:	4802      	ldr	r0, [pc, #8]	; (b7350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7346:	2300      	movs	r3, #0
   b7348:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b734a:	f7ff ba81 	b.w	b6850 <os_mutex_recursive_create>
   b734e:	bf00      	nop
   b7350:	2003e674 	.word	0x2003e674

000b7354 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   b7354:	b510      	push	{r4, lr}
   b7356:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   b7358:	6880      	ldr	r0, [r0, #8]
   b735a:	6803      	ldr	r3, [r0, #0]
   b735c:	68db      	ldr	r3, [r3, #12]
   b735e:	4798      	blx	r3
   b7360:	68e3      	ldr	r3, [r4, #12]
   b7362:	4418      	add	r0, r3
   b7364:	60e0      	str	r0, [r4, #12]
}
   b7366:	bd10      	pop	{r4, pc}

000b7368 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b736a:	4606      	mov	r6, r0
   b736c:	460d      	mov	r5, r1
  size_t n = 0;
   b736e:	188f      	adds	r7, r1, r2
   b7370:	2400      	movs	r4, #0
  while (size--) {
   b7372:	42bd      	cmp	r5, r7
   b7374:	d00c      	beq.n	b7390 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7376:	6833      	ldr	r3, [r6, #0]
   b7378:	f815 1b01 	ldrb.w	r1, [r5], #1
   b737c:	689b      	ldr	r3, [r3, #8]
   b737e:	4630      	mov	r0, r6
   b7380:	4798      	blx	r3
     if (chunk>=0)
   b7382:	1e03      	subs	r3, r0, #0
   b7384:	db01      	blt.n	b738a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7386:	441c      	add	r4, r3
  while (size--) {
   b7388:	e7f3      	b.n	b7372 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b738a:	2c00      	cmp	r4, #0
   b738c:	bf08      	it	eq
   b738e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7390:	4620      	mov	r0, r4
   b7392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7394 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b7394:	4770      	bx	lr

000b7396 <_ZN5spark16JSONStreamWriterD0Ev>:
   b7396:	b510      	push	{r4, lr}
   b7398:	2110      	movs	r1, #16
   b739a:	4604      	mov	r4, r0
   b739c:	f7fd faad 	bl	b48fa <_ZdlPvj>
   b73a0:	4620      	mov	r0, r4
   b73a2:	bd10      	pop	{r4, pc}

000b73a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b73a4:	b508      	push	{r3, lr}
  return write(str);
   b73a6:	f7fe fd63 	bl	b5e70 <_ZN5Print5writeEPKc>
}
   b73aa:	bd08      	pop	{r3, pc}

000b73ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b73ac:	6803      	ldr	r3, [r0, #0]
   b73ae:	689b      	ldr	r3, [r3, #8]
   b73b0:	4718      	bx	r3

000b73b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b73b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b73b4:	210d      	movs	r1, #13
{
   b73b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b73b8:	f7ff fff8 	bl	b73ac <_ZN5Print5printEc>
  n += print('\n');
   b73bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b73be:	4604      	mov	r4, r0
  n += print('\n');
   b73c0:	4628      	mov	r0, r5
   b73c2:	f7ff fff3 	bl	b73ac <_ZN5Print5printEc>
  return n;
}
   b73c6:	4420      	add	r0, r4
   b73c8:	bd38      	pop	{r3, r4, r5, pc}

000b73ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b73ca:	b530      	push	{r4, r5, lr}
   b73cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b73ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b73d0:	2a01      	cmp	r2, #1
  *str = '\0';
   b73d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b73d6:	bf98      	it	ls
   b73d8:	220a      	movls	r2, #10
   b73da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b73dc:	460d      	mov	r5, r1
   b73de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b73e2:	fb01 5312 	mls	r3, r1, r2, r5
   b73e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b73ea:	2b09      	cmp	r3, #9
   b73ec:	bf94      	ite	ls
   b73ee:	3330      	addls	r3, #48	; 0x30
   b73f0:	3337      	addhi	r3, #55	; 0x37
   b73f2:	b2db      	uxtb	r3, r3
  } while(n);
   b73f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b73f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b73fa:	d9ef      	bls.n	b73dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b73fc:	4621      	mov	r1, r4
   b73fe:	f7fe fd37 	bl	b5e70 <_ZN5Print5writeEPKc>
}
   b7402:	b00b      	add	sp, #44	; 0x2c
   b7404:	bd30      	pop	{r4, r5, pc}

000b7406 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b740a:	b086      	sub	sp, #24
   b740c:	af00      	add	r7, sp, #0
   b740e:	4605      	mov	r5, r0
   b7410:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7412:	1d38      	adds	r0, r7, #4
   b7414:	2114      	movs	r1, #20
{
   b7416:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7418:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b741a:	f7ff fcd1 	bl	b6dc0 <vsnprintf>

    if (n<bufsize)
   b741e:	2813      	cmp	r0, #19
   b7420:	d80e      	bhi.n	b7440 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7422:	1d39      	adds	r1, r7, #4
   b7424:	4628      	mov	r0, r5
   b7426:	f7fe fd23 	bl	b5e70 <_ZN5Print5writeEPKc>
   b742a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b742c:	b11e      	cbz	r6, b7436 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b742e:	4628      	mov	r0, r5
   b7430:	f7ff ffbf 	bl	b73b2 <_ZN5Print7printlnEv>
   b7434:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7436:	4620      	mov	r0, r4
   b7438:	3718      	adds	r7, #24
   b743a:	46bd      	mov	sp, r7
   b743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7440:	f100 0308 	add.w	r3, r0, #8
   b7444:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7448:	46e8      	mov	r8, sp
        char bigger[n+1];
   b744a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b744e:	4622      	mov	r2, r4
   b7450:	1c41      	adds	r1, r0, #1
   b7452:	683b      	ldr	r3, [r7, #0]
   b7454:	4668      	mov	r0, sp
   b7456:	f7ff fcb3 	bl	b6dc0 <vsnprintf>
  return write(str);
   b745a:	4669      	mov	r1, sp
   b745c:	4628      	mov	r0, r5
   b745e:	f7fe fd07 	bl	b5e70 <_ZN5Print5writeEPKc>
   b7462:	4604      	mov	r4, r0
   b7464:	46c5      	mov	sp, r8
   b7466:	e7e1      	b.n	b742c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7468 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7468:	b510      	push	{r4, lr}
   b746a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b746c:	f7ff f9d8 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7470:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7472:	6823      	ldr	r3, [r4, #0]
   b7474:	4620      	mov	r0, r4
   b7476:	695b      	ldr	r3, [r3, #20]
   b7478:	4798      	blx	r3
    if (c >= 0) return c;
   b747a:	2800      	cmp	r0, #0
   b747c:	da08      	bge.n	b7490 <_ZN6Stream9timedReadEv+0x28>
   b747e:	f7ff f9cf 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7482:	68e3      	ldr	r3, [r4, #12]
   b7484:	1ac0      	subs	r0, r0, r3
   b7486:	68a3      	ldr	r3, [r4, #8]
   b7488:	4298      	cmp	r0, r3
   b748a:	d3f2      	bcc.n	b7472 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b748c:	f04f 30ff 	mov.w	r0, #4294967295
}
   b7490:	bd10      	pop	{r4, pc}

000b7492 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b7492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7496:	4607      	mov	r7, r0
   b7498:	460c      	mov	r4, r1
   b749a:	188e      	adds	r6, r1, r2
   b749c:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b749e:	42b5      	cmp	r5, r6
   b74a0:	eba5 0804 	sub.w	r8, r5, r4
   b74a4:	d007      	beq.n	b74b6 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b74a6:	4638      	mov	r0, r7
   b74a8:	f7ff ffde 	bl	b7468 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b74ac:	1e03      	subs	r3, r0, #0
   b74ae:	db02      	blt.n	b74b6 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b74b0:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b74b4:	e7f3      	b.n	b749e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b74b6:	4640      	mov	r0, r8
   b74b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b74bc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b74bc:	4770      	bx	lr

000b74be <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b74be:	4608      	mov	r0, r1
   b74c0:	b111      	cbz	r1, b74c8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b74c2:	680b      	ldr	r3, [r1, #0]
   b74c4:	685b      	ldr	r3, [r3, #4]
   b74c6:	4718      	bx	r3
}
   b74c8:	4770      	bx	lr

000b74ca <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b74ca:	4770      	bx	lr

000b74cc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b74cc:	4770      	bx	lr

000b74ce <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b74ce:	4770      	bx	lr

000b74d0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b74d0:	b538      	push	{r3, r4, r5, lr}
   b74d2:	4604      	mov	r4, r0
   b74d4:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b74d6:	6800      	ldr	r0, [r0, #0]
   b74d8:	212e      	movs	r1, #46	; 0x2e
   b74da:	f002 fa9c 	bl	b9a16 <strchrnul>
    size = s - category;
   b74de:	6823      	ldr	r3, [r4, #0]
   b74e0:	1ac3      	subs	r3, r0, r3
   b74e2:	602b      	str	r3, [r5, #0]
    if (size) {
   b74e4:	b123      	cbz	r3, b74f0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b74e6:	7803      	ldrb	r3, [r0, #0]
   b74e8:	b103      	cbz	r3, b74ec <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b74ea:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b74ec:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b74ee:	6020      	str	r0, [r4, #0]
}
   b74f0:	4618      	mov	r0, r3
   b74f2:	bd38      	pop	{r3, r4, r5, pc}

000b74f4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b74f4:	b510      	push	{r4, lr}
   b74f6:	2104      	movs	r1, #4
   b74f8:	4604      	mov	r4, r0
   b74fa:	f7fd f9fe 	bl	b48fa <_ZdlPvj>
   b74fe:	4620      	mov	r0, r4
   b7500:	bd10      	pop	{r4, pc}

000b7502 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7502:	b510      	push	{r4, lr}
   b7504:	2104      	movs	r1, #4
   b7506:	4604      	mov	r4, r0
   b7508:	f7fd f9f7 	bl	b48fa <_ZdlPvj>
   b750c:	4620      	mov	r0, r4
   b750e:	bd10      	pop	{r4, pc}

000b7510 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7510:	f7ff b9ae 	b.w	b6870 <os_mutex_recursive_lock>

000b7514 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b7514:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b7516:	f7fd f99f 	bl	b4858 <strcmp>
}
   b751a:	fab0 f080 	clz	r0, r0
   b751e:	0940      	lsrs	r0, r0, #5
   b7520:	bd08      	pop	{r3, pc}

000b7522 <__tcf_1>:
   b7522:	4770      	bx	lr

000b7524 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b7524:	b510      	push	{r4, lr}
   b7526:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b7528:	f001 fc8c 	bl	b8e44 <_Z16_fetch_usbserialv>
   b752c:	4284      	cmp	r4, r0
   b752e:	d010      	beq.n	b7552 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b7530:	f002 f93e 	bl	b97b0 <_Z22__fetch_global_Serial1v>
   b7534:	4284      	cmp	r4, r0
   b7536:	d105      	bne.n	b7544 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b7538:	f002 f93a 	bl	b97b0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b7540:	f001 bd4b 	b.w	b8fda <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b7544:	b12c      	cbz	r4, b7552 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b7546:	6823      	ldr	r3, [r4, #0]
   b7548:	4620      	mov	r0, r4
   b754a:	685b      	ldr	r3, [r3, #4]
}
   b754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7550:	4718      	bx	r3
   b7552:	bd10      	pop	{r4, pc}

000b7554 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b7554:	b513      	push	{r0, r1, r4, lr}
   b7556:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b7558:	4608      	mov	r0, r1
   b755a:	9101      	str	r1, [sp, #4]
   b755c:	f7fd f986 	bl	b486c <strlen>
   b7560:	9901      	ldr	r1, [sp, #4]
   b7562:	4602      	mov	r2, r0
   b7564:	4620      	mov	r0, r4
}
   b7566:	b002      	add	sp, #8
   b7568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b756c:	f002 b876 	b.w	b965c <_ZN5spark10JSONWriter5valueEPKcj>

000b7570 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b7570:	b513      	push	{r0, r1, r4, lr}
   b7572:	4604      	mov	r4, r0
    write(str, strlen(str));
   b7574:	4608      	mov	r0, r1
   b7576:	9101      	str	r1, [sp, #4]
   b7578:	f7fd f978 	bl	b486c <strlen>
   b757c:	6823      	ldr	r3, [r4, #0]
   b757e:	9901      	ldr	r1, [sp, #4]
   b7580:	68db      	ldr	r3, [r3, #12]
   b7582:	4602      	mov	r2, r0
   b7584:	4620      	mov	r0, r4
}
   b7586:	b002      	add	sp, #8
   b7588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b758c:	4718      	bx	r3

000b758e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b758e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7590:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b7592:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7596:	68db      	ldr	r3, [r3, #12]
   b7598:	2201      	movs	r2, #1
   b759a:	f10d 0107 	add.w	r1, sp, #7
   b759e:	4798      	blx	r3
}
   b75a0:	b003      	add	sp, #12
   b75a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b75a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b75a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b75ac:	e9d0 8400 	ldrd	r8, r4, [r0]
   b75b0:	f04f 0a14 	mov.w	sl, #20
   b75b4:	9300      	str	r3, [sp, #0]
   b75b6:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b75ba:	4b18      	ldr	r3, [pc, #96]	; (b761c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b75bc:	10a4      	asrs	r4, r4, #2
   b75be:	4617      	mov	r7, r2
   b75c0:	435c      	muls	r4, r3
   b75c2:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b75c4:	2c00      	cmp	r4, #0
   b75c6:	dd21      	ble.n	b760c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b75c8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b75ca:	fb0a f006 	mul.w	r0, sl, r6
   b75ce:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b75d2:	463a      	mov	r2, r7
   b75d4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b75d8:	5828      	ldr	r0, [r5, r0]
   b75da:	9101      	str	r1, [sp, #4]
   b75dc:	455f      	cmp	r7, fp
   b75de:	bf28      	it	cs
   b75e0:	465a      	movcs	r2, fp
   b75e2:	f002 fa48 	bl	b9a76 <strncmp>
                if (cmp == 0) {
   b75e6:	2800      	cmp	r0, #0
   b75e8:	9901      	ldr	r1, [sp, #4]
   b75ea:	f04f 0301 	mov.w	r3, #1
   b75ee:	d10b      	bne.n	b7608 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b75f0:	455f      	cmp	r7, fp
   b75f2:	d103      	bne.n	b75fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b75f4:	9a00      	ldr	r2, [sp, #0]
   b75f6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b75f8:	4634      	mov	r4, r6
   b75fa:	e7e3      	b.n	b75c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b75fc:	d9fc      	bls.n	b75f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b75fe:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b7600:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b7604:	3e01      	subs	r6, #1
   b7606:	e7f7      	b.n	b75f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b7608:	dbf9      	blt.n	b75fe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b760a:	e7f5      	b.n	b75f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b760c:	eba5 0508 	sub.w	r5, r5, r8
}
   b7610:	4802      	ldr	r0, [pc, #8]	; (b761c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b7612:	10ad      	asrs	r5, r5, #2
   b7614:	4368      	muls	r0, r5
   b7616:	b003      	add	sp, #12
   b7618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b761c:	cccccccd 	.word	0xcccccccd

000b7620 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b7622:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b7624:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7626:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b7628:	b303      	cbz	r3, b766c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b762a:	b1f9      	cbz	r1, b766c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b762c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b762e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b7632:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b7634:	a903      	add	r1, sp, #12
   b7636:	a801      	add	r0, sp, #4
   b7638:	f7ff ff4a 	bl	b74d0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b763c:	4601      	mov	r1, r0
   b763e:	b1a8      	cbz	r0, b766c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b7640:	f10d 030b 	add.w	r3, sp, #11
   b7644:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b7646:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b764a:	4620      	mov	r0, r4
   b764c:	f7ff ffac 	bl	b75a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b7650:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b7654:	b153      	cbz	r3, b766c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b7656:	6823      	ldr	r3, [r4, #0]
   b7658:	2414      	movs	r4, #20
   b765a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b765e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b7660:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b7664:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b7666:	bfa8      	it	ge
   b7668:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b766a:	e7e3      	b.n	b7634 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b766c:	4628      	mov	r0, r5
   b766e:	b004      	add	sp, #16
   b7670:	bd70      	pop	{r4, r5, r6, pc}

000b7672 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7672:	b40e      	push	{r1, r2, r3}
   b7674:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7676:	b08c      	sub	sp, #48	; 0x30
   b7678:	af00      	add	r7, sp, #0
   b767a:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b767e:	4604      	mov	r4, r0
   b7680:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7684:	607a      	str	r2, [r7, #4]
   b7686:	462b      	mov	r3, r5
   b7688:	2120      	movs	r1, #32
   b768a:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b768e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7690:	f7ff fb96 	bl	b6dc0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b7694:	281f      	cmp	r0, #31
   b7696:	687a      	ldr	r2, [r7, #4]
   b7698:	d91a      	bls.n	b76d0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b769a:	f100 0308 	add.w	r3, r0, #8
   b769e:	f023 0307 	bic.w	r3, r3, #7
        }
   b76a2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b76a4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b76a8:	1c41      	adds	r1, r0, #1
   b76aa:	462b      	mov	r3, r5
   b76ac:	4668      	mov	r0, sp
        va_start(args, fmt);
   b76ae:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b76b0:	f7ff fb86 	bl	b6dc0 <vsnprintf>
        if (n > 0) {
   b76b4:	1e02      	subs	r2, r0, #0
   b76b6:	dd04      	ble.n	b76c2 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b76b8:	6823      	ldr	r3, [r4, #0]
   b76ba:	4669      	mov	r1, sp
   b76bc:	68db      	ldr	r3, [r3, #12]
   b76be:	4620      	mov	r0, r4
   b76c0:	4798      	blx	r3
   b76c2:	46b5      	mov	sp, r6
}
   b76c4:	3730      	adds	r7, #48	; 0x30
   b76c6:	46bd      	mov	sp, r7
   b76c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b76cc:	b003      	add	sp, #12
   b76ce:	4770      	bx	lr
    } else if (n > 0) {
   b76d0:	2800      	cmp	r0, #0
   b76d2:	d0f7      	beq.n	b76c4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b76d4:	6823      	ldr	r3, [r4, #0]
   b76d6:	4602      	mov	r2, r0
   b76d8:	68db      	ldr	r3, [r3, #12]
   b76da:	f107 0110 	add.w	r1, r7, #16
   b76de:	4620      	mov	r0, r4
   b76e0:	4798      	blx	r3
}
   b76e2:	e7ef      	b.n	b76c4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b76e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b76e4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b76e6:	4c09      	ldr	r4, [pc, #36]	; (b770c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b76e8:	7823      	ldrb	r3, [r4, #0]
   b76ea:	f3bf 8f5b 	dmb	ish
   b76ee:	07db      	lsls	r3, r3, #31
   b76f0:	d409      	bmi.n	b7706 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b76f2:	4620      	mov	r0, r4
   b76f4:	f7fd f910 	bl	b4918 <__cxa_guard_acquire>
   b76f8:	b128      	cbz	r0, b7706 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b76fa:	4620      	mov	r0, r4
   b76fc:	f7fd f911 	bl	b4922 <__cxa_guard_release>
   b7700:	4803      	ldr	r0, [pc, #12]	; (b7710 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b7702:	f002 f8fe 	bl	b9902 <atexit>
}
   b7706:	4803      	ldr	r0, [pc, #12]	; (b7714 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b7708:	bd10      	pop	{r4, pc}
   b770a:	bf00      	nop
   b770c:	2003e67c 	.word	0x2003e67c
   b7710:	000b74cb 	.word	0x000b74cb
   b7714:	2003dd44 	.word	0x2003dd44

000b7718 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b7718:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b771a:	4c09      	ldr	r4, [pc, #36]	; (b7740 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b771c:	7823      	ldrb	r3, [r4, #0]
   b771e:	f3bf 8f5b 	dmb	ish
   b7722:	07db      	lsls	r3, r3, #31
   b7724:	d409      	bmi.n	b773a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b7726:	4620      	mov	r0, r4
   b7728:	f7fd f8f6 	bl	b4918 <__cxa_guard_acquire>
   b772c:	b128      	cbz	r0, b773a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b772e:	4620      	mov	r0, r4
   b7730:	f7fd f8f7 	bl	b4922 <__cxa_guard_release>
   b7734:	4803      	ldr	r0, [pc, #12]	; (b7744 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b7736:	f002 f8e4 	bl	b9902 <atexit>
    return &factory;
}
   b773a:	4803      	ldr	r0, [pc, #12]	; (b7748 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b773c:	bd10      	pop	{r4, pc}
   b773e:	bf00      	nop
   b7740:	2003e680 	.word	0x2003e680
   b7744:	000b7523 	.word	0x000b7523
   b7748:	2003dd48 	.word	0x2003dd48

000b774c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b774c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b774e:	2500      	movs	r5, #0
   b7750:	4604      	mov	r4, r0
   b7752:	e9c0 5500 	strd	r5, r5, [r0]
   b7756:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b775a:	6085      	str	r5, [r0, #8]
   b775c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b775e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b7762:	f7ff f875 	bl	b6850 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b7766:	f7ff ffbd 	bl	b76e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b776a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b776c:	f7ff ffd4 	bl	b7718 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b7770:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b7772:	6220      	str	r0, [r4, #32]
}
   b7774:	4620      	mov	r0, r4
   b7776:	bd38      	pop	{r3, r4, r5, pc}

000b7778 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b7778:	b510      	push	{r4, lr}
    static LogManager mgr;
   b777a:	4c0a      	ldr	r4, [pc, #40]	; (b77a4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b777c:	7823      	ldrb	r3, [r4, #0]
   b777e:	f3bf 8f5b 	dmb	ish
   b7782:	07db      	lsls	r3, r3, #31
   b7784:	d40c      	bmi.n	b77a0 <_ZN5spark10LogManager8instanceEv+0x28>
   b7786:	4620      	mov	r0, r4
   b7788:	f7fd f8c6 	bl	b4918 <__cxa_guard_acquire>
   b778c:	b140      	cbz	r0, b77a0 <_ZN5spark10LogManager8instanceEv+0x28>
   b778e:	4806      	ldr	r0, [pc, #24]	; (b77a8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b7790:	f7ff ffdc 	bl	b774c <_ZN5spark10LogManagerC1Ev>
   b7794:	4620      	mov	r0, r4
   b7796:	f7fd f8c4 	bl	b4922 <__cxa_guard_release>
   b779a:	4804      	ldr	r0, [pc, #16]	; (b77ac <_ZN5spark10LogManager8instanceEv+0x34>)
   b779c:	f002 f8b1 	bl	b9902 <atexit>
    return &mgr;
}
   b77a0:	4801      	ldr	r0, [pc, #4]	; (b77a8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b77a2:	bd10      	pop	{r4, pc}
   b77a4:	2003e678 	.word	0x2003e678
   b77a8:	2003e688 	.word	0x2003e688
   b77ac:	000b7cf1 	.word	0x000b7cf1

000b77b0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b77b0:	4a02      	ldr	r2, [pc, #8]	; (b77bc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b77b2:	4903      	ldr	r1, [pc, #12]	; (b77c0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b77b4:	4803      	ldr	r0, [pc, #12]	; (b77c4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b77b6:	2300      	movs	r3, #0
   b77b8:	f7ff b9d2 	b.w	b6b60 <log_set_callbacks>
   b77bc:	000b7ad5 	.word	0x000b7ad5
   b77c0:	000b7a61 	.word	0x000b7a61
   b77c4:	000b79e1 	.word	0x000b79e1

000b77c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b77c8:	2300      	movs	r3, #0
   b77ca:	461a      	mov	r2, r3
   b77cc:	4619      	mov	r1, r3
   b77ce:	4618      	mov	r0, r3
   b77d0:	f7ff b9c6 	b.w	b6b60 <log_set_callbacks>

000b77d4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b77d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b77d6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b77d8:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b77da:	4668      	mov	r0, sp
   b77dc:	f7ff fb5e 	bl	b6e9c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b77e0:	466a      	mov	r2, sp
   b77e2:	4629      	mov	r1, r5
   b77e4:	4620      	mov	r0, r4
   b77e6:	f001 fe59 	bl	b949c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b77ea:	a801      	add	r0, sp, #4
   b77ec:	f7ff fb5f 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b77f0:	4620      	mov	r0, r4
   b77f2:	b003      	add	sp, #12
   b77f4:	bd30      	pop	{r4, r5, pc}

000b77f6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b77f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b77f8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b77fa:	4604      	mov	r4, r0
   b77fc:	4668      	mov	r0, sp
   b77fe:	f7ff fb4d 	bl	b6e9c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7802:	466a      	mov	r2, sp
   b7804:	4629      	mov	r1, r5
   b7806:	4620      	mov	r0, r4
   b7808:	f001 fe24 	bl	b9454 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b780c:	a801      	add	r0, sp, #4
   b780e:	f7ff fb4e 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7812:	4620      	mov	r0, r4
   b7814:	b003      	add	sp, #12
   b7816:	bd30      	pop	{r4, r5, pc}

000b7818 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7818:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b781a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b781c:	4604      	mov	r4, r0
   b781e:	4668      	mov	r0, sp
   b7820:	f7ff fb3c 	bl	b6e9c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7824:	466a      	mov	r2, sp
   b7826:	4629      	mov	r1, r5
   b7828:	4620      	mov	r0, r4
   b782a:	f001 fdbc 	bl	b93a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b782e:	a801      	add	r0, sp, #4
   b7830:	f7ff fb3d 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7834:	4620      	mov	r0, r4
   b7836:	b003      	add	sp, #12
   b7838:	bd30      	pop	{r4, r5, pc}
	...

000b783c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b783c:	b570      	push	{r4, r5, r6, lr}
   b783e:	b08a      	sub	sp, #40	; 0x28
   b7840:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b7842:	4601      	mov	r1, r0
   b7844:	a804      	add	r0, sp, #16
   b7846:	f7ff ffc5 	bl	b77d4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b784a:	4e14      	ldr	r6, [pc, #80]	; (b789c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b784c:	a804      	add	r0, sp, #16
   b784e:	f001 fe3d 	bl	b94cc <_ZN5spark18JSONObjectIterator4nextEv>
   b7852:	b1e8      	cbz	r0, b7890 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b7854:	a904      	add	r1, sp, #16
   b7856:	4668      	mov	r0, sp
   b7858:	f7ff ffcd 	bl	b77f6 <_ZNK5spark18JSONObjectIterator4nameEv>
   b785c:	9802      	ldr	r0, [sp, #8]
   b785e:	4631      	mov	r1, r6
   b7860:	f7ff fe58 	bl	b7514 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b7864:	4604      	mov	r4, r0
   b7866:	b110      	cbz	r0, b786e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b7868:	1e2c      	subs	r4, r5, #0
   b786a:	bf18      	it	ne
   b786c:	2401      	movne	r4, #1
   b786e:	a801      	add	r0, sp, #4
   b7870:	f7ff fb1d 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7874:	2c00      	cmp	r4, #0
   b7876:	d0e9      	beq.n	b784c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b7878:	a904      	add	r1, sp, #16
   b787a:	4668      	mov	r0, sp
   b787c:	f7ff ffcc 	bl	b7818 <_ZNK5spark18JSONObjectIterator5valueEv>
   b7880:	4668      	mov	r0, sp
   b7882:	f001 fdc6 	bl	b9412 <_ZNK5spark9JSONValue5toIntEv>
   b7886:	6028      	str	r0, [r5, #0]
   b7888:	a801      	add	r0, sp, #4
   b788a:	f7ff fb10 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b788e:	e7dd      	b.n	b784c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b7890:	a805      	add	r0, sp, #20
   b7892:	f7ff fb0c 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7896:	b00a      	add	sp, #40	; 0x28
   b7898:	bd70      	pop	{r4, r5, r6, pc}
   b789a:	bf00      	nop
   b789c:	000b9f64 	.word	0x000b9f64

000b78a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b78a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b78a2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b78a4:	4620      	mov	r0, r4
   b78a6:	4913      	ldr	r1, [pc, #76]	; (b78f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b78a8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b78aa:	f7fc ffd5 	bl	b4858 <strcmp>
   b78ae:	b950      	cbnz	r0, b78c6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b78b0:	f001 fac8 	bl	b8e44 <_Z16_fetch_usbserialv>
   b78b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b78b8:	f001 fab4 	bl	b8e24 <_ZN9USBSerial5beginEl>
}
   b78bc:	b003      	add	sp, #12
   b78be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b78c2:	f001 babf 	b.w	b8e44 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b78c6:	490c      	ldr	r1, [pc, #48]	; (b78f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b78c8:	4620      	mov	r0, r4
   b78ca:	f7fc ffc5 	bl	b4858 <strcmp>
   b78ce:	b978      	cbnz	r0, b78f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b78d0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b78d4:	a901      	add	r1, sp, #4
   b78d6:	4628      	mov	r0, r5
        int baud = 9600;
   b78d8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b78da:	f7ff ffaf 	bl	b783c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b78de:	f001 ff67 	bl	b97b0 <_Z22__fetch_global_Serial1v>
   b78e2:	9901      	ldr	r1, [sp, #4]
   b78e4:	f001 fb76 	bl	b8fd4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b78e8:	f001 ff62 	bl	b97b0 <_Z22__fetch_global_Serial1v>
}
   b78ec:	b003      	add	sp, #12
   b78ee:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b78f0:	2000      	movs	r0, #0
   b78f2:	e7fb      	b.n	b78ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b78f4:	000b9f69 	.word	0x000b9f69
   b78f8:	000b9f70 	.word	0x000b9f70

000b78fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b78fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b78fe:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7902:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7904:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7906:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b790a:	42ae      	cmp	r6, r5
   b790c:	d005      	beq.n	b791a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b790e:	f105 0008 	add.w	r0, r5, #8
   b7912:	f7ff fff3 	bl	b78fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7916:	3514      	adds	r5, #20
   b7918:	e7f7      	b.n	b790a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b791a:	6820      	ldr	r0, [r4, #0]
   b791c:	f7ff fa38 	bl	b6d90 <free>
}
   b7920:	4620      	mov	r0, r4
   b7922:	bd70      	pop	{r4, r5, r6, pc}

000b7924 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b7924:	b510      	push	{r4, lr}
   b7926:	4604      	mov	r4, r0
   b7928:	300c      	adds	r0, #12
   b792a:	f7ff ffe7 	bl	b78fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b792e:	4620      	mov	r0, r4
   b7930:	f7ff fce4 	bl	b72fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7934:	4620      	mov	r0, r4
   b7936:	bd10      	pop	{r4, pc}

000b7938 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b7938:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b793a:	4b04      	ldr	r3, [pc, #16]	; (b794c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b793c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b793e:	f840 3b04 	str.w	r3, [r0], #4
   b7942:	f7ff ffef 	bl	b7924 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b7946:	4620      	mov	r0, r4
   b7948:	bd10      	pop	{r4, pc}
   b794a:	bf00      	nop
   b794c:	000b9e70 	.word	0x000b9e70

000b7950 <_ZN5spark16StreamLogHandlerD0Ev>:
   b7950:	b510      	push	{r4, lr}
   b7952:	4604      	mov	r4, r0
   b7954:	f7ff fff0 	bl	b7938 <_ZN5spark16StreamLogHandlerD1Ev>
   b7958:	4620      	mov	r0, r4
   b795a:	2124      	movs	r1, #36	; 0x24
   b795c:	f7fc ffcd 	bl	b48fa <_ZdlPvj>
   b7960:	4620      	mov	r0, r4
   b7962:	bd10      	pop	{r4, pc}

000b7964 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b7964:	b510      	push	{r4, lr}
   b7966:	4b03      	ldr	r3, [pc, #12]	; (b7974 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b7968:	6003      	str	r3, [r0, #0]
   b796a:	4604      	mov	r4, r0
   b796c:	f7ff ffe4 	bl	b7938 <_ZN5spark16StreamLogHandlerD1Ev>
   b7970:	4620      	mov	r0, r4
   b7972:	bd10      	pop	{r4, pc}
   b7974:	000b9ff0 	.word	0x000b9ff0

000b7978 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b7978:	b510      	push	{r4, lr}
   b797a:	4604      	mov	r4, r0
   b797c:	f7ff fff2 	bl	b7964 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b7980:	4620      	mov	r0, r4
   b7982:	2124      	movs	r1, #36	; 0x24
   b7984:	f7fc ffb9 	bl	b48fa <_ZdlPvj>
   b7988:	4620      	mov	r0, r4
   b798a:	bd10      	pop	{r4, pc}

000b798c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b798c:	680a      	ldr	r2, [r1, #0]
   b798e:	6002      	str	r2, [r0, #0]
   b7990:	684a      	ldr	r2, [r1, #4]
   b7992:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b7994:	2200      	movs	r2, #0
   b7996:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b799a:	b510      	push	{r4, lr}
   b799c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b799e:	688c      	ldr	r4, [r1, #8]
   b79a0:	6084      	str	r4, [r0, #8]
   b79a2:	68cc      	ldr	r4, [r1, #12]
   b79a4:	60c4      	str	r4, [r0, #12]
   b79a6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b79a8:	608a      	str	r2, [r1, #8]
   b79aa:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b79ac:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b79ae:	610a      	str	r2, [r1, #16]
   b79b0:	bd10      	pop	{r4, pc}

000b79b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   b79b2:	2200      	movs	r2, #0
   b79b4:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b79b8:	b510      	push	{r4, lr}
        capacity_(0) {
   b79ba:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b79bc:	680c      	ldr	r4, [r1, #0]
   b79be:	6004      	str	r4, [r0, #0]
   b79c0:	684c      	ldr	r4, [r1, #4]
   b79c2:	6044      	str	r4, [r0, #4]
   b79c4:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b79c6:	600a      	str	r2, [r1, #0]
   b79c8:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b79ca:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b79cc:	608a      	str	r2, [r1, #8]
}
   b79ce:	bd10      	pop	{r4, pc}

000b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b79d0:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b79d2:	6803      	ldr	r3, [r0, #0]
   b79d4:	4604      	mov	r4, r0
   b79d6:	6818      	ldr	r0, [r3, #0]
   b79d8:	f7fe ff52 	bl	b6880 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b79dc:	4620      	mov	r0, r4
   b79de:	bd10      	pop	{r4, pc}

000b79e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b79e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79e4:	b087      	sub	sp, #28
   b79e6:	4680      	mov	r8, r0
   b79e8:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b79ea:	4b1c      	ldr	r3, [pc, #112]	; (b7a5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b79ec:	685b      	ldr	r3, [r3, #4]
   b79ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b79f2:	4689      	mov	r9, r1
   b79f4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b79f6:	b96b      	cbnz	r3, b7a14 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b79f8:	f7ff febe 	bl	b7778 <_ZN5spark10LogManager8instanceEv>
   b79fc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b79fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b7a02:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7a04:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b7a06:	f7ff fd83 	bl	b7510 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b7a0a:	7b23      	ldrb	r3, [r4, #12]
   b7a0c:	b12b      	cbz	r3, b7a1a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b7a0e:	a805      	add	r0, sp, #20
   b7a10:	f7ff ffde 	bl	b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b7a14:	b007      	add	sp, #28
   b7a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b7a1a:	2301      	movs	r3, #1
   b7a1c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b7a1e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b7a22:	fa5f f989 	uxtb.w	r9, r9
   b7a26:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7a2a:	45aa      	cmp	sl, r5
   b7a2c:	d012      	beq.n	b7a54 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b7a2e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b7a32:	4631      	mov	r1, r6
   b7a34:	1d38      	adds	r0, r7, #4
   b7a36:	f7ff fdf3 	bl	b7620 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7a3a:	4581      	cmp	r9, r0
   b7a3c:	d3f5      	bcc.n	b7a2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b7a3e:	683b      	ldr	r3, [r7, #0]
   b7a40:	9a03      	ldr	r2, [sp, #12]
   b7a42:	9200      	str	r2, [sp, #0]
   b7a44:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b7a48:	464a      	mov	r2, r9
   b7a4a:	4633      	mov	r3, r6
   b7a4c:	4641      	mov	r1, r8
   b7a4e:	4638      	mov	r0, r7
   b7a50:	47d8      	blx	fp
   b7a52:	e7ea      	b.n	b7a2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b7a54:	2300      	movs	r3, #0
   b7a56:	7323      	strb	r3, [r4, #12]
   b7a58:	e7d9      	b.n	b7a0e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b7a5a:	bf00      	nop
   b7a5c:	e000ed00 	.word	0xe000ed00

000b7a60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b7a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a64:	469b      	mov	fp, r3
   b7a66:	4b1a      	ldr	r3, [pc, #104]	; (b7ad0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b7a68:	685b      	ldr	r3, [r3, #4]
   b7a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7a6e:	4680      	mov	r8, r0
   b7a70:	4689      	mov	r9, r1
   b7a72:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b7a74:	b96b      	cbnz	r3, b7a92 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b7a76:	f7ff fe7f 	bl	b7778 <_ZN5spark10LogManager8instanceEv>
   b7a7a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7a7c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b7a80:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7a82:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7a84:	f7ff fd44 	bl	b7510 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b7a88:	7b23      	ldrb	r3, [r4, #12]
   b7a8a:	b12b      	cbz	r3, b7a98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b7a8c:	a801      	add	r0, sp, #4
   b7a8e:	f7ff ff9f 	bl	b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7a92:	b003      	add	sp, #12
   b7a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b7a98:	2301      	movs	r3, #1
   b7a9a:	7323      	strb	r3, [r4, #12]
   b7a9c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b7aa0:	b2f6      	uxtb	r6, r6
   b7aa2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7aa6:	4555      	cmp	r5, sl
   b7aa8:	d00e      	beq.n	b7ac8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b7aaa:	f855 7b04 	ldr.w	r7, [r5], #4
   b7aae:	4659      	mov	r1, fp
   b7ab0:	1d38      	adds	r0, r7, #4
   b7ab2:	f7ff fdb5 	bl	b7620 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7ab6:	4286      	cmp	r6, r0
   b7ab8:	d3f5      	bcc.n	b7aa6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b7aba:	683b      	ldr	r3, [r7, #0]
   b7abc:	464a      	mov	r2, r9
   b7abe:	68db      	ldr	r3, [r3, #12]
   b7ac0:	4641      	mov	r1, r8
   b7ac2:	4638      	mov	r0, r7
   b7ac4:	4798      	blx	r3
   b7ac6:	e7ee      	b.n	b7aa6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b7ac8:	2300      	movs	r3, #0
   b7aca:	7323      	strb	r3, [r4, #12]
   b7acc:	e7de      	b.n	b7a8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b7ace:	bf00      	nop
   b7ad0:	e000ed00 	.word	0xe000ed00

000b7ad4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b7ad4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7ad8:	4b16      	ldr	r3, [pc, #88]	; (b7b34 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b7ada:	685b      	ldr	r3, [r3, #4]
   b7adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7ae0:	4605      	mov	r5, r0
   b7ae2:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b7ae4:	bb1b      	cbnz	r3, b7b2e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b7ae6:	f7ff fe47 	bl	b7778 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b7aea:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b7aee:	4604      	mov	r4, r0
   b7af0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7af2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7af4:	f7ff fd0c 	bl	b7510 <_ZN14RecursiveMutex4lockEv.isra.0>
   b7af8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b7afc:	2446      	movs	r4, #70	; 0x46
   b7afe:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7b02:	45b0      	cmp	r8, r6
   b7b04:	d109      	bne.n	b7b1a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b7b06:	a801      	add	r0, sp, #4
   b7b08:	f7ff ff62 	bl	b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b7b0c:	42a5      	cmp	r5, r4
   b7b0e:	bfb4      	ite	lt
   b7b10:	2000      	movlt	r0, #0
   b7b12:	2001      	movge	r0, #1
}
   b7b14:	b002      	add	sp, #8
   b7b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b7b1a:	f856 0b04 	ldr.w	r0, [r6], #4
   b7b1e:	4639      	mov	r1, r7
   b7b20:	3004      	adds	r0, #4
   b7b22:	f7ff fd7d 	bl	b7620 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b7b26:	4284      	cmp	r4, r0
   b7b28:	bfa8      	it	ge
   b7b2a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b7b2c:	e7e9      	b.n	b7b02 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b7b2e:	2000      	movs	r0, #0
   b7b30:	e7f0      	b.n	b7b14 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b7b32:	bf00      	nop
   b7b34:	e000ed00 	.word	0xe000ed00

000b7b38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b3a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b7b3e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7b40:	4604      	mov	r4, r0
   b7b42:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b44:	db0d      	blt.n	b7b62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b7b46:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b7b48:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7b4a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7b4c:	dd04      	ble.n	b7b58 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b7b4e:	00b9      	lsls	r1, r7, #2
   b7b50:	f7ff f926 	bl	b6da0 <realloc>
            if (!d) {
   b7b54:	b918      	cbnz	r0, b7b5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b7b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b7b58:	f7ff f91a 	bl	b6d90 <free>
        T* d = nullptr;
   b7b5c:	2000      	movs	r0, #0
        data_ = d;
   b7b5e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7b60:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7b62:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7b64:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b66:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b7b6a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b6c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b7b70:	1d08      	adds	r0, r1, #4
   b7b72:	f001 fef3 	bl	b995c <memmove>
    new(p) T(std::move(value));
   b7b76:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b7b7a:	6863      	ldr	r3, [r4, #4]
   b7b7c:	3301      	adds	r3, #1
   b7b7e:	6063      	str	r3, [r4, #4]
    return true;
   b7b80:	2001      	movs	r0, #1
   b7b82:	e7e8      	b.n	b7b56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b7b84 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b7b86:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7b8a:	4604      	mov	r4, r0
   b7b8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7b8e:	9301      	str	r3, [sp, #4]
   b7b90:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b7b92:	f7ff fcbd 	bl	b7510 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b7b96:	e9d4 3200 	ldrd	r3, r2, [r4]
   b7b9a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b7b9e:	4293      	cmp	r3, r2
   b7ba0:	4619      	mov	r1, r3
   b7ba2:	d00b      	beq.n	b7bbc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b7ba4:	6809      	ldr	r1, [r1, #0]
   b7ba6:	42a9      	cmp	r1, r5
   b7ba8:	f103 0304 	add.w	r3, r3, #4
   b7bac:	d1f7      	bne.n	b7b9e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b7bae:	a801      	add	r0, sp, #4
   b7bb0:	f7ff ff0e 	bl	b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7bb4:	2500      	movs	r5, #0
}
   b7bb6:	4628      	mov	r0, r5
   b7bb8:	b003      	add	sp, #12
   b7bba:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b7bbc:	4629      	mov	r1, r5
   b7bbe:	4620      	mov	r0, r4
   b7bc0:	f7ff ffba 	bl	b7b38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b7bc4:	4605      	mov	r5, r0
   b7bc6:	2800      	cmp	r0, #0
   b7bc8:	d0f1      	beq.n	b7bae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b7bca:	6863      	ldr	r3, [r4, #4]
   b7bcc:	2b01      	cmp	r3, #1
   b7bce:	d101      	bne.n	b7bd4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b7bd0:	f7ff fdee 	bl	b77b0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7bd4:	a801      	add	r0, sp, #4
   b7bd6:	f7ff fefb 	bl	b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7bda:	e7ec      	b.n	b7bb6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b7bdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7bdc:	b570      	push	{r4, r5, r6, lr}
   b7bde:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b7be0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7be4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b7be6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b7bea:	4282      	cmp	r2, r0
   b7bec:	d00f      	beq.n	b7c0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b7bee:	4601      	mov	r1, r0
            if (*p == value) {
   b7bf0:	681d      	ldr	r5, [r3, #0]
   b7bf2:	f851 6b04 	ldr.w	r6, [r1], #4
   b7bf6:	42ae      	cmp	r6, r5
   b7bf8:	d107      	bne.n	b7c0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7bfa:	1a52      	subs	r2, r2, r1
   b7bfc:	f001 feae 	bl	b995c <memmove>
    --size_;
   b7c00:	6863      	ldr	r3, [r4, #4]
   b7c02:	3b01      	subs	r3, #1
   b7c04:	6063      	str	r3, [r4, #4]
    return true;
   b7c06:	2001      	movs	r0, #1
}
   b7c08:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b7c0a:	4608      	mov	r0, r1
   b7c0c:	e7ed      	b.n	b7bea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b7c0e:	2000      	movs	r0, #0
   b7c10:	e7fa      	b.n	b7c08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b7c12 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7c12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b7c14:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7c18:	4604      	mov	r4, r0
   b7c1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7c1c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7c1e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b7c20:	f7ff fc76 	bl	b7510 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b7c24:	a901      	add	r1, sp, #4
   b7c26:	4620      	mov	r0, r4
   b7c28:	f7ff ffd8 	bl	b7bdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b7c2c:	b118      	cbz	r0, b7c36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b7c2e:	6863      	ldr	r3, [r4, #4]
   b7c30:	b90b      	cbnz	r3, b7c36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b7c32:	f7ff fdc9 	bl	b77c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7c36:	a803      	add	r0, sp, #12
   b7c38:	f7ff feca 	bl	b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7c3c:	b004      	add	sp, #16
   b7c3e:	bd10      	pop	{r4, pc}

000b7c40 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b7c40:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b7c42:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b7c46:	2318      	movs	r3, #24
   b7c48:	4604      	mov	r4, r0
   b7c4a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b7c4e:	42ae      	cmp	r6, r5
   b7c50:	d015      	beq.n	b7c7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b7c52:	f105 0110 	add.w	r1, r5, #16
   b7c56:	4620      	mov	r0, r4
   b7c58:	f7ff ffc0 	bl	b7bdc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b7c5c:	6863      	ldr	r3, [r4, #4]
   b7c5e:	b90b      	cbnz	r3, b7c64 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b7c60:	f7ff fdb2 	bl	b77c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b7c64:	69e0      	ldr	r0, [r4, #28]
   b7c66:	6929      	ldr	r1, [r5, #16]
   b7c68:	6803      	ldr	r3, [r0, #0]
   b7c6a:	68db      	ldr	r3, [r3, #12]
   b7c6c:	4798      	blx	r3
        if (h.stream) {
   b7c6e:	6969      	ldr	r1, [r5, #20]
   b7c70:	b119      	cbz	r1, b7c7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b7c72:	6a20      	ldr	r0, [r4, #32]
   b7c74:	6803      	ldr	r3, [r0, #0]
   b7c76:	68db      	ldr	r3, [r3, #12]
   b7c78:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b7c7a:	3518      	adds	r5, #24
   b7c7c:	e7e7      	b.n	b7c4e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b7c7e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7c82:	2618      	movs	r6, #24
   b7c84:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7c88:	42ae      	cmp	r6, r5
   b7c8a:	d004      	beq.n	b7c96 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b7c8c:	4628      	mov	r0, r5
   b7c8e:	f7ff fa93 	bl	b71b8 <_ZN6StringD1Ev>
   b7c92:	3518      	adds	r5, #24
   b7c94:	e7f8      	b.n	b7c88 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b7c96:	2300      	movs	r3, #0
   b7c98:	6163      	str	r3, [r4, #20]
}
   b7c9a:	bd70      	pop	{r4, r5, r6, pc}

000b7c9c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c9e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b7ca0:	f7ff fd92 	bl	b77c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7ca4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b7ca8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7caa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7cac:	f7ff fc30 	bl	b7510 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b7cb0:	4620      	mov	r0, r4
   b7cb2:	f7ff ffc5 	bl	b7c40 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b7cb6:	a801      	add	r0, sp, #4
   b7cb8:	f7ff fe8a 	bl	b79d0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b7cbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7cbe:	b108      	cbz	r0, b7cc4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b7cc0:	f7fe fdce 	bl	b6860 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b7cc4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7cc8:	2618      	movs	r6, #24
   b7cca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7cce:	42ae      	cmp	r6, r5
   b7cd0:	d004      	beq.n	b7cdc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b7cd2:	4628      	mov	r0, r5
   b7cd4:	f7ff fa70 	bl	b71b8 <_ZN6StringD1Ev>
   b7cd8:	3518      	adds	r5, #24
   b7cda:	e7f8      	b.n	b7cce <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b7cdc:	6920      	ldr	r0, [r4, #16]
   b7cde:	f7ff f857 	bl	b6d90 <free>
   b7ce2:	6820      	ldr	r0, [r4, #0]
   b7ce4:	f7ff f854 	bl	b6d90 <free>
}
   b7ce8:	4620      	mov	r0, r4
   b7cea:	b002      	add	sp, #8
   b7cec:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7cf0 <__tcf_2>:
    static LogManager mgr;
   b7cf0:	4801      	ldr	r0, [pc, #4]	; (b7cf8 <__tcf_2+0x8>)
   b7cf2:	f7ff bfd3 	b.w	b7c9c <_ZN5spark10LogManagerD1Ev>
   b7cf6:	bf00      	nop
   b7cf8:	2003e688 	.word	0x2003e688

000b7cfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b7cfc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d00:	4604      	mov	r4, r0
   b7d02:	460d      	mov	r5, r1
   b7d04:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7d06:	d915      	bls.n	b7d34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b7d08:	4290      	cmp	r0, r2
   b7d0a:	d214      	bcs.n	b7d36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b7d0c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7d10:	1a75      	subs	r5, r6, r1
   b7d12:	f1a1 0714 	sub.w	r7, r1, #20
   b7d16:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7d18:	42b7      	cmp	r7, r6
   b7d1a:	d01a      	beq.n	b7d52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b7d1c:	b11c      	cbz	r4, b7d26 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b7d1e:	4631      	mov	r1, r6
   b7d20:	4620      	mov	r0, r4
   b7d22:	f7ff fe33 	bl	b798c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b7d26:	f106 0008 	add.w	r0, r6, #8
   b7d2a:	f7ff fde7 	bl	b78fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b7d2e:	3e14      	subs	r6, #20
   b7d30:	3c14      	subs	r4, #20
   b7d32:	e7f1      	b.n	b7d18 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b7d34:	d00d      	beq.n	b7d52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b7d36:	42b5      	cmp	r5, r6
   b7d38:	d00b      	beq.n	b7d52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b7d3a:	b11c      	cbz	r4, b7d44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b7d3c:	4629      	mov	r1, r5
   b7d3e:	4620      	mov	r0, r4
   b7d40:	f7ff fe24 	bl	b798c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b7d44:	f105 0008 	add.w	r0, r5, #8
   b7d48:	f7ff fdd8 	bl	b78fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b7d4c:	3514      	adds	r5, #20
   b7d4e:	3414      	adds	r4, #20
   b7d50:	e7f1      	b.n	b7d36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b7d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7d54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b7d54:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d58:	4604      	mov	r4, r0
   b7d5a:	460d      	mov	r5, r1
   b7d5c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7d5e:	d914      	bls.n	b7d8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b7d60:	4290      	cmp	r0, r2
   b7d62:	d213      	bcs.n	b7d8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b7d64:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b7d68:	1a75      	subs	r5, r6, r1
   b7d6a:	f1a1 0710 	sub.w	r7, r1, #16
   b7d6e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7d70:	42b7      	cmp	r7, r6
   b7d72:	d018      	beq.n	b7da6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b7d74:	b11c      	cbz	r4, b7d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b7d76:	4631      	mov	r1, r6
   b7d78:	4620      	mov	r0, r4
   b7d7a:	f7ff fa86 	bl	b728a <_ZN6StringC1EOS_>
                end->~T();
   b7d7e:	4630      	mov	r0, r6
   b7d80:	f7ff fa1a 	bl	b71b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7d84:	3e10      	subs	r6, #16
   b7d86:	3c10      	subs	r4, #16
   b7d88:	e7f2      	b.n	b7d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7d8a:	d00c      	beq.n	b7da6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7d8c:	42b5      	cmp	r5, r6
   b7d8e:	d00a      	beq.n	b7da6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b7d90:	b11c      	cbz	r4, b7d9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b7d92:	4629      	mov	r1, r5
   b7d94:	4620      	mov	r0, r4
   b7d96:	f7ff fa78 	bl	b728a <_ZN6StringC1EOS_>
                p->~T();
   b7d9a:	4628      	mov	r0, r5
   b7d9c:	f7ff fa0c 	bl	b71b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7da0:	3510      	adds	r5, #16
   b7da2:	3410      	adds	r4, #16
   b7da4:	e7f2      	b.n	b7d8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b7da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7da8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b7da8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7daa:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7dac:	4605      	mov	r5, r0
        if (n > 0) {
   b7dae:	dd11      	ble.n	b7dd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7db0:	0130      	lsls	r0, r6, #4
   b7db2:	f7fe ffe5 	bl	b6d80 <malloc>
            if (!d) {
   b7db6:	4604      	mov	r4, r0
   b7db8:	b158      	cbz	r0, b7dd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7dba:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7dbe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b7dc2:	f7ff ffc7 	bl	b7d54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7dc6:	6828      	ldr	r0, [r5, #0]
   b7dc8:	f7fe ffe2 	bl	b6d90 <free>
        data_ = d;
   b7dcc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7dce:	60ae      	str	r6, [r5, #8]
        return true;
   b7dd0:	2001      	movs	r0, #1
    }
   b7dd2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7dd4:	2400      	movs	r4, #0
   b7dd6:	e7f6      	b.n	b7dc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b7dd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ddc:	4690      	mov	r8, r2
   b7dde:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b7de0:	2300      	movs	r3, #0
   b7de2:	9103      	str	r1, [sp, #12]
    return size_;
   b7de4:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b7de8:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7dea:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b7dec:	4299      	cmp	r1, r3
        capacity_(0) {
   b7dee:	e9c0 3300 	strd	r3, r3, [r0]
   b7df2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7dfa:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7dfe:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7e00:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b7e02:	dc23      	bgt.n	b7e4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b7e04:	e9d8 5700 	ldrd	r5, r7, [r8]
   b7e08:	2314      	movs	r3, #20
   b7e0a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b7e0e:	42af      	cmp	r7, r5
   b7e10:	d03b      	beq.n	b7e8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b7e12:	4629      	mov	r1, r5
   b7e14:	a80b      	add	r0, sp, #44	; 0x2c
   b7e16:	f7ff fa38 	bl	b728a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b7e1a:	a90b      	add	r1, sp, #44	; 0x2c
   b7e1c:	a80f      	add	r0, sp, #60	; 0x3c
   b7e1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b7e20:	f7ff fa33 	bl	b728a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e24:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7e28:	4299      	cmp	r1, r3
   b7e2a:	da1b      	bge.n	b7e64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7e2c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b7e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b7e30:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b7e34:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b7e38:	4631      	mov	r1, r6
   b7e3a:	f106 0010 	add.w	r0, r6, #16
   b7e3e:	f7ff ff89 	bl	b7d54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b7e42:	b9ee      	cbnz	r6, b7e80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b7e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7e46:	3301      	adds	r3, #1
   b7e48:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b7e4a:	e011      	b.n	b7e70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b7e4c:	a808      	add	r0, sp, #32
   b7e4e:	f7ff ffab 	bl	b7da8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7e52:	2800      	cmp	r0, #0
   b7e54:	d1d6      	bne.n	b7e04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b7e56:	a808      	add	r0, sp, #32
   b7e58:	f7ff fa50 	bl	b72fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7e5c:	4620      	mov	r0, r4
   b7e5e:	b015      	add	sp, #84	; 0x54
   b7e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e64:	3101      	adds	r1, #1
   b7e66:	a808      	add	r0, sp, #32
   b7e68:	f7ff ff9e 	bl	b7da8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7e6c:	2800      	cmp	r0, #0
   b7e6e:	d1dd      	bne.n	b7e2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b7e70:	a80f      	add	r0, sp, #60	; 0x3c
   b7e72:	f7ff f9a1 	bl	b71b8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b7e76:	a80b      	add	r0, sp, #44	; 0x2c
   b7e78:	f7ff f99e 	bl	b71b8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b7e7c:	3514      	adds	r5, #20
   b7e7e:	e7c6      	b.n	b7e0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b7e80:	a90f      	add	r1, sp, #60	; 0x3c
   b7e82:	4630      	mov	r0, r6
   b7e84:	f7ff fa01 	bl	b728a <_ZN6StringC1EOS_>
   b7e88:	e7dc      	b.n	b7e44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b7e8a:	2600      	movs	r6, #0
   b7e8c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b7e90:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b7e92:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b7e96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7e9a:	429e      	cmp	r6, r3
   b7e9c:	da7c      	bge.n	b7f98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b7e9e:	0133      	lsls	r3, r6, #4
   b7ea0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b7ea2:	9306      	str	r3, [sp, #24]
        if (!category) {
   b7ea4:	b90b      	cbnz	r3, b7eaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b7ea6:	3601      	adds	r6, #1
   b7ea8:	e7f5      	b.n	b7e96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b7eaa:	2300      	movs	r3, #0
   b7eac:	9307      	str	r3, [sp, #28]
   b7eae:	fb09 f306 	mul.w	r3, r9, r6
   b7eb2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b7eb4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b7eb6:	a907      	add	r1, sp, #28
   b7eb8:	a806      	add	r0, sp, #24
   b7eba:	f7ff fb09 	bl	b74d0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b7ebe:	4682      	mov	sl, r0
   b7ec0:	2800      	cmp	r0, #0
   b7ec2:	d0f0      	beq.n	b7ea6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b7ec4:	f04f 0300 	mov.w	r3, #0
   b7ec8:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7ecc:	4601      	mov	r1, r0
   b7ece:	9a07      	ldr	r2, [sp, #28]
   b7ed0:	f10d 0317 	add.w	r3, sp, #23
   b7ed4:	4628      	mov	r0, r5
   b7ed6:	f7ff fb67 	bl	b75a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7eda:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7ede:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7ee0:	2f00      	cmp	r7, #0
   b7ee2:	d14a      	bne.n	b7f7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b7ee4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b7ee8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b7eec:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b7ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7ef4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b7ef8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b7efc:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7efe:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b7f02:	4293      	cmp	r3, r2
   b7f04:	db17      	blt.n	b7f36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b7f06:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b7f0a:	f1ba 0f00 	cmp.w	sl, #0
   b7f0e:	dd30      	ble.n	b7f72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b7f10:	fb09 f00a 	mul.w	r0, r9, sl
   b7f14:	f7fe ff34 	bl	b6d80 <malloc>
            if (!d) {
   b7f18:	4683      	mov	fp, r0
   b7f1a:	b360      	cbz	r0, b7f76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b7f1c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7f20:	fb09 1202 	mla	r2, r9, r2, r1
   b7f24:	f7ff feea 	bl	b7cfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b7f28:	6828      	ldr	r0, [r5, #0]
   b7f2a:	f7fe ff31 	bl	b6d90 <free>
        data_ = d;
   b7f2e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b7f32:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b7f36:	682b      	ldr	r3, [r5, #0]
   b7f38:	9a01      	ldr	r2, [sp, #4]
   b7f3a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b7f3e:	686a      	ldr	r2, [r5, #4]
   b7f40:	4651      	mov	r1, sl
   b7f42:	fb09 3202 	mla	r2, r9, r2, r3
   b7f46:	f10a 0014 	add.w	r0, sl, #20
   b7f4a:	f7ff fed7 	bl	b7cfc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b7f4e:	f1ba 0f00 	cmp.w	sl, #0
   b7f52:	d003      	beq.n	b7f5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b7f54:	a90f      	add	r1, sp, #60	; 0x3c
   b7f56:	4650      	mov	r0, sl
   b7f58:	f7ff fd18 	bl	b798c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b7f5c:	686b      	ldr	r3, [r5, #4]
   b7f5e:	3301      	adds	r3, #1
   b7f60:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b7f62:	a811      	add	r0, sp, #68	; 0x44
   b7f64:	f7ff fcca 	bl	b78fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7f68:	b13f      	cbz	r7, b7f7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b7f6a:	a80b      	add	r0, sp, #44	; 0x2c
   b7f6c:	f7ff fcc6 	bl	b78fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7f70:	e771      	b.n	b7e56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b7f72:	46bb      	mov	fp, r7
   b7f74:	e7d8      	b.n	b7f28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7f76:	2701      	movs	r7, #1
   b7f78:	e7f3      	b.n	b7f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b7f7a:	9b01      	ldr	r3, [sp, #4]
   b7f7c:	682d      	ldr	r5, [r5, #0]
   b7f7e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b7f82:	9b06      	ldr	r3, [sp, #24]
   b7f84:	781b      	ldrb	r3, [r3, #0]
   b7f86:	b92b      	cbnz	r3, b7f94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b7f88:	f8d8 3000 	ldr.w	r3, [r8]
   b7f8c:	9a02      	ldr	r2, [sp, #8]
   b7f8e:	4413      	add	r3, r2
   b7f90:	7c1b      	ldrb	r3, [r3, #16]
   b7f92:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b7f94:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b7f96:	e78e      	b.n	b7eb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f98:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7f9a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f9c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7f9e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fa0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7fa2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b7fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b7fa6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fa8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7faa:	60a2      	str	r2, [r4, #8]
   b7fac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b7fae:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fb0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7fb2:	60e2      	str	r2, [r4, #12]
   b7fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b7fb6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7fb8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7fba:	6122      	str	r2, [r4, #16]
   b7fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b7fbe:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b7fc0:	9b03      	ldr	r3, [sp, #12]
   b7fc2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b7fc4:	6162      	str	r2, [r4, #20]
   b7fc6:	7623      	strb	r3, [r4, #24]
   b7fc8:	e7cf      	b.n	b7f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b7fcc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7fce:	4604      	mov	r4, r0
   b7fd0:	b087      	sub	sp, #28
   b7fd2:	460d      	mov	r5, r1
        filter_(level, filters) {
   b7fd4:	4626      	mov	r6, r4
        stream_(&stream) {
   b7fd6:	4619      	mov	r1, r3
   b7fd8:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7fda:	4617      	mov	r7, r2
        stream_(&stream) {
   b7fdc:	f7fd f80a 	bl	b4ff4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b7fe0:	4b0b      	ldr	r3, [pc, #44]	; (b8010 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b7fe2:	f846 3b04 	str.w	r3, [r6], #4
   b7fe6:	4669      	mov	r1, sp
   b7fe8:	a803      	add	r0, sp, #12
   b7fea:	f7fd f803 	bl	b4ff4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7fee:	aa03      	add	r2, sp, #12
   b7ff0:	4639      	mov	r1, r7
   b7ff2:	4630      	mov	r0, r6
   b7ff4:	f7ff fef0 	bl	b7dd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7ff8:	a803      	add	r0, sp, #12
   b7ffa:	f7fc fdaf 	bl	b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b7ffe:	4668      	mov	r0, sp
   b8000:	f7fc fdac 	bl	b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8004:	4b03      	ldr	r3, [pc, #12]	; (b8014 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b8006:	6023      	str	r3, [r4, #0]
}
   b8008:	4620      	mov	r0, r4
        stream_(&stream) {
   b800a:	6225      	str	r5, [r4, #32]
}
   b800c:	b007      	add	sp, #28
   b800e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8010:	000b9e70 	.word	0x000b9e70
   b8014:	000b9fd8 	.word	0x000b9fd8

000b8018 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b8018:	b5f0      	push	{r4, r5, r6, r7, lr}
   b801a:	460f      	mov	r7, r1
   b801c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b801e:	491d      	ldr	r1, [pc, #116]	; (b8094 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b8020:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8022:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b8024:	4616      	mov	r6, r2
   b8026:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b8028:	f7fc fc16 	bl	b4858 <strcmp>
   b802c:	b9c0      	cbnz	r0, b8060 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b802e:	b1a4      	cbz	r4, b805a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b8030:	4629      	mov	r1, r5
   b8032:	a801      	add	r0, sp, #4
   b8034:	f7ff fcbd 	bl	b79b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8038:	4917      	ldr	r1, [pc, #92]	; (b8098 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b803a:	2024      	movs	r0, #36	; 0x24
   b803c:	f001 fc5a 	bl	b98f4 <_ZnwjRKSt9nothrow_t>
   b8040:	4605      	mov	r5, r0
   b8042:	b130      	cbz	r0, b8052 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b8044:	ab01      	add	r3, sp, #4
   b8046:	4632      	mov	r2, r6
   b8048:	4621      	mov	r1, r4
   b804a:	f7ff ffbf 	bl	b7fcc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b804e:	4b13      	ldr	r3, [pc, #76]	; (b809c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b8050:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b8052:	a801      	add	r0, sp, #4
   b8054:	f7fc fd82 	bl	b4b5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b8058:	462c      	mov	r4, r5
}
   b805a:	4620      	mov	r0, r4
   b805c:	b005      	add	sp, #20
   b805e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b8060:	490f      	ldr	r1, [pc, #60]	; (b80a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b8062:	4638      	mov	r0, r7
   b8064:	f7fc fbf8 	bl	b4858 <strcmp>
   b8068:	b990      	cbnz	r0, b8090 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b806a:	2c00      	cmp	r4, #0
   b806c:	d0f5      	beq.n	b805a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b806e:	4629      	mov	r1, r5
   b8070:	a801      	add	r0, sp, #4
   b8072:	f7ff fc9e 	bl	b79b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b8076:	4908      	ldr	r1, [pc, #32]	; (b8098 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b8078:	2024      	movs	r0, #36	; 0x24
   b807a:	f001 fc3b 	bl	b98f4 <_ZnwjRKSt9nothrow_t>
   b807e:	4605      	mov	r5, r0
   b8080:	2800      	cmp	r0, #0
   b8082:	d0e6      	beq.n	b8052 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b8084:	ab01      	add	r3, sp, #4
   b8086:	4632      	mov	r2, r6
   b8088:	4621      	mov	r1, r4
   b808a:	f7ff ff9f 	bl	b7fcc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b808e:	e7e0      	b.n	b8052 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b8090:	2400      	movs	r4, #0
   b8092:	e7e2      	b.n	b805a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b8094:	000b9f78 	.word	0x000b9f78
   b8098:	000ba1a1 	.word	0x000ba1a1
   b809c:	000b9ff0 	.word	0x000b9ff0
   b80a0:	000b9f7c 	.word	0x000b9f7c

000b80a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b80a4:	4b01      	ldr	r3, [pc, #4]	; (b80ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b80a6:	4a02      	ldr	r2, [pc, #8]	; (b80b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b80a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b80aa:	4770      	bx	lr
   b80ac:	2003e684 	.word	0x2003e684
   b80b0:	000b9f8d 	.word	0x000b9f8d

000b80b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b80b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b80b8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b80ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b80be:	4604      	mov	r4, r0
   b80c0:	460e      	mov	r6, r1
   b80c2:	4617      	mov	r7, r2
   b80c4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b80c6:	f000 febd 	bl	b8e44 <_Z16_fetch_usbserialv>
   b80ca:	4581      	cmp	r9, r0
   b80cc:	d04c      	beq.n	b8168 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b80ce:	792b      	ldrb	r3, [r5, #4]
   b80d0:	0719      	lsls	r1, r3, #28
   b80d2:	d504      	bpl.n	b80de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b80d4:	696a      	ldr	r2, [r5, #20]
   b80d6:	4954      	ldr	r1, [pc, #336]	; (b8228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b80d8:	4620      	mov	r0, r4
   b80da:	f7ff faca 	bl	b7672 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b80de:	f1b8 0f00 	cmp.w	r8, #0
   b80e2:	d00d      	beq.n	b8100 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b80e4:	215b      	movs	r1, #91	; 0x5b
   b80e6:	4620      	mov	r0, r4
   b80e8:	f7ff fa51 	bl	b758e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b80ec:	4641      	mov	r1, r8
   b80ee:	4620      	mov	r0, r4
   b80f0:	f7ff fa3e 	bl	b7570 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b80f4:	6823      	ldr	r3, [r4, #0]
   b80f6:	494d      	ldr	r1, [pc, #308]	; (b822c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b80f8:	68db      	ldr	r3, [r3, #12]
   b80fa:	2202      	movs	r2, #2
   b80fc:	4620      	mov	r0, r4
   b80fe:	4798      	blx	r3
    if (attr.has_file) {
   b8100:	792b      	ldrb	r3, [r5, #4]
   b8102:	07da      	lsls	r2, r3, #31
   b8104:	d523      	bpl.n	b814e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b8106:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b810a:	212f      	movs	r1, #47	; 0x2f
   b810c:	4640      	mov	r0, r8
   b810e:	f001 fcc6 	bl	b9a9e <strrchr>
    if (s1) {
   b8112:	b108      	cbz	r0, b8118 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b8114:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8118:	4641      	mov	r1, r8
   b811a:	4620      	mov	r0, r4
   b811c:	f7ff fa28 	bl	b7570 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8120:	792b      	ldrb	r3, [r5, #4]
   b8122:	079b      	lsls	r3, r3, #30
   b8124:	d508      	bpl.n	b8138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b8126:	213a      	movs	r1, #58	; 0x3a
   b8128:	4620      	mov	r0, r4
   b812a:	f7ff fa30 	bl	b758e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b812e:	68ea      	ldr	r2, [r5, #12]
   b8130:	493f      	ldr	r1, [pc, #252]	; (b8230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b8132:	4620      	mov	r0, r4
   b8134:	f7ff fa9d 	bl	b7672 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8138:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b813a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b813c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8140:	68db      	ldr	r3, [r3, #12]
   b8142:	bf14      	ite	ne
   b8144:	493b      	ldrne	r1, [pc, #236]	; (b8234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b8146:	493c      	ldreq	r1, [pc, #240]	; (b8238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8148:	2202      	movs	r2, #2
            write(": ", 2);
   b814a:	4620      	mov	r0, r4
   b814c:	4798      	blx	r3
    if (attr.has_function) {
   b814e:	792b      	ldrb	r3, [r5, #4]
   b8150:	0758      	lsls	r0, r3, #29
   b8152:	d51d      	bpl.n	b8190 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b8154:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8156:	460b      	mov	r3, r1
   b8158:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b815a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b815e:	b160      	cbz	r0, b817a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8160:	2820      	cmp	r0, #32
   b8162:	d108      	bne.n	b8176 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b8164:	4619      	mov	r1, r3
   b8166:	e7f7      	b.n	b8158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8168:	4834      	ldr	r0, [pc, #208]	; (b823c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b816a:	f001 f813 	bl	b9194 <_ZN5spark12NetworkClass9listeningEv>
   b816e:	2800      	cmp	r0, #0
   b8170:	d0ad      	beq.n	b80ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b8172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b8176:	2828      	cmp	r0, #40	; 0x28
   b8178:	d1ee      	bne.n	b8158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b817a:	6823      	ldr	r3, [r4, #0]
   b817c:	1a52      	subs	r2, r2, r1
   b817e:	68db      	ldr	r3, [r3, #12]
   b8180:	4620      	mov	r0, r4
   b8182:	4798      	blx	r3
        write("(): ", 4);
   b8184:	6823      	ldr	r3, [r4, #0]
   b8186:	492e      	ldr	r1, [pc, #184]	; (b8240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b8188:	68db      	ldr	r3, [r3, #12]
   b818a:	2204      	movs	r2, #4
   b818c:	4620      	mov	r0, r4
   b818e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b8190:	2100      	movs	r1, #0
   b8192:	4638      	mov	r0, r7
   b8194:	f7fe fcdc 	bl	b6b50 <log_level_name>
   b8198:	4601      	mov	r1, r0
    write(s);
   b819a:	4620      	mov	r0, r4
   b819c:	f7ff f9e8 	bl	b7570 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b81a0:	6823      	ldr	r3, [r4, #0]
   b81a2:	4925      	ldr	r1, [pc, #148]	; (b8238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b81a4:	68db      	ldr	r3, [r3, #12]
   b81a6:	2202      	movs	r2, #2
   b81a8:	4620      	mov	r0, r4
   b81aa:	4798      	blx	r3
    if (msg) {
   b81ac:	b11e      	cbz	r6, b81b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b81ae:	4631      	mov	r1, r6
   b81b0:	4620      	mov	r0, r4
   b81b2:	f7ff f9dd 	bl	b7570 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b81b6:	792b      	ldrb	r3, [r5, #4]
   b81b8:	f013 0f30 	tst.w	r3, #48	; 0x30
   b81bc:	d02c      	beq.n	b8218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b81be:	6823      	ldr	r3, [r4, #0]
   b81c0:	4920      	ldr	r1, [pc, #128]	; (b8244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b81c2:	68db      	ldr	r3, [r3, #12]
   b81c4:	2202      	movs	r2, #2
   b81c6:	4620      	mov	r0, r4
   b81c8:	4798      	blx	r3
        if (attr.has_code) {
   b81ca:	792b      	ldrb	r3, [r5, #4]
   b81cc:	06d9      	lsls	r1, r3, #27
   b81ce:	d50a      	bpl.n	b81e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b81d0:	6823      	ldr	r3, [r4, #0]
   b81d2:	491d      	ldr	r1, [pc, #116]	; (b8248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b81d4:	68db      	ldr	r3, [r3, #12]
   b81d6:	2207      	movs	r2, #7
   b81d8:	4620      	mov	r0, r4
   b81da:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b81dc:	69aa      	ldr	r2, [r5, #24]
   b81de:	491b      	ldr	r1, [pc, #108]	; (b824c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b81e0:	4620      	mov	r0, r4
   b81e2:	f7ff fa46 	bl	b7672 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b81e6:	792b      	ldrb	r3, [r5, #4]
   b81e8:	069a      	lsls	r2, r3, #26
   b81ea:	d511      	bpl.n	b8210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b81ec:	06db      	lsls	r3, r3, #27
   b81ee:	d505      	bpl.n	b81fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b81f0:	6823      	ldr	r3, [r4, #0]
   b81f2:	4910      	ldr	r1, [pc, #64]	; (b8234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b81f4:	68db      	ldr	r3, [r3, #12]
   b81f6:	2202      	movs	r2, #2
   b81f8:	4620      	mov	r0, r4
   b81fa:	4798      	blx	r3
            write("details = ", 10);
   b81fc:	6823      	ldr	r3, [r4, #0]
   b81fe:	4914      	ldr	r1, [pc, #80]	; (b8250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8200:	68db      	ldr	r3, [r3, #12]
   b8202:	4620      	mov	r0, r4
   b8204:	220a      	movs	r2, #10
   b8206:	4798      	blx	r3
            write(attr.details);
   b8208:	69e9      	ldr	r1, [r5, #28]
   b820a:	4620      	mov	r0, r4
   b820c:	f7ff f9b0 	bl	b7570 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8210:	215d      	movs	r1, #93	; 0x5d
   b8212:	4620      	mov	r0, r4
   b8214:	f7ff f9bb 	bl	b758e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8218:	6823      	ldr	r3, [r4, #0]
   b821a:	490e      	ldr	r1, [pc, #56]	; (b8254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b821c:	68db      	ldr	r3, [r3, #12]
   b821e:	4620      	mov	r0, r4
   b8220:	2202      	movs	r2, #2
}
   b8222:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b8226:	4718      	bx	r3
   b8228:	000b9f91 	.word	0x000b9f91
   b822c:	000b9f98 	.word	0x000b9f98
   b8230:	000b9dc4 	.word	0x000b9dc4
   b8234:	000b9f9b 	.word	0x000b9f9b
   b8238:	000b9fa0 	.word	0x000b9fa0
   b823c:	2003e714 	.word	0x2003e714
   b8240:	000b9f9e 	.word	0x000b9f9e
   b8244:	000b9fa3 	.word	0x000b9fa3
   b8248:	000b9fa6 	.word	0x000b9fa6
   b824c:	000b9d34 	.word	0x000b9d34
   b8250:	000b9fae 	.word	0x000b9fae
   b8254:	000b9fb9 	.word	0x000b9fb9

000b8258 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b8258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b825c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b825e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b8260:	460d      	mov	r5, r1
   b8262:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b8264:	f000 fdee 	bl	b8e44 <_Z16_fetch_usbserialv>
   b8268:	4287      	cmp	r7, r0
   b826a:	d007      	beq.n	b827c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b826c:	6a20      	ldr	r0, [r4, #32]
   b826e:	6803      	ldr	r3, [r0, #0]
   b8270:	4632      	mov	r2, r6
   b8272:	4629      	mov	r1, r5
   b8274:	68db      	ldr	r3, [r3, #12]
}
   b8276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b827a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b827c:	4803      	ldr	r0, [pc, #12]	; (b828c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b827e:	f000 ff89 	bl	b9194 <_ZN5spark12NetworkClass9listeningEv>
   b8282:	2800      	cmp	r0, #0
   b8284:	d0f2      	beq.n	b826c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b8286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b828a:	bf00      	nop
   b828c:	2003e714 	.word	0x2003e714

000b8290 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8294:	b085      	sub	sp, #20
    return stream_;
   b8296:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b829a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b829c:	4605      	mov	r5, r0
   b829e:	460f      	mov	r7, r1
   b82a0:	4690      	mov	r8, r2
   b82a2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b82a4:	f000 fdce 	bl	b8e44 <_Z16_fetch_usbserialv>
   b82a8:	4581      	cmp	r9, r0
   b82aa:	d105      	bne.n	b82b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b82ac:	4849      	ldr	r0, [pc, #292]	; (b83d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b82ae:	f000 ff71 	bl	b9194 <_ZN5spark12NetworkClass9listeningEv>
   b82b2:	2800      	cmp	r0, #0
   b82b4:	f040 808a 	bne.w	b83cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b82b8:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   b82ba:	4a47      	ldr	r2, [pc, #284]	; (b83d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b82bc:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   b82be:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b82c2:	4668      	mov	r0, sp
        bytesWritten_(0) {
   b82c4:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   b82c8:	f88d 9004 	strb.w	r9, [sp, #4]
   b82cc:	f001 f927 	bl	b951e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b82d0:	4649      	mov	r1, r9
   b82d2:	4640      	mov	r0, r8
   b82d4:	f7fe fc3c 	bl	b6b50 <log_level_name>
    json.name("l", 1).value(s);
   b82d8:	4940      	ldr	r1, [pc, #256]	; (b83dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b82da:	4680      	mov	r8, r0
   b82dc:	2201      	movs	r2, #1
   b82de:	4668      	mov	r0, sp
   b82e0:	f001 f9ac 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b82e4:	4641      	mov	r1, r8
   b82e6:	f7ff f935 	bl	b7554 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b82ea:	b13f      	cbz	r7, b82fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   b82ec:	493c      	ldr	r1, [pc, #240]	; (b83e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b82ee:	2201      	movs	r2, #1
   b82f0:	4668      	mov	r0, sp
   b82f2:	f001 f9a3 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b82f6:	4639      	mov	r1, r7
   b82f8:	f7ff f92c 	bl	b7554 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b82fc:	b13e      	cbz	r6, b830e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   b82fe:	4939      	ldr	r1, [pc, #228]	; (b83e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b8300:	2201      	movs	r2, #1
   b8302:	4668      	mov	r0, sp
   b8304:	f001 f99a 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b8308:	4631      	mov	r1, r6
   b830a:	f7ff f923 	bl	b7554 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b830e:	7923      	ldrb	r3, [r4, #4]
   b8310:	07df      	lsls	r7, r3, #31
   b8312:	d50e      	bpl.n	b8332 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   b8314:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8316:	212f      	movs	r1, #47	; 0x2f
   b8318:	4630      	mov	r0, r6
   b831a:	f001 fbc0 	bl	b9a9e <strrchr>
    if (s1) {
   b831e:	b100      	cbz	r0, b8322 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   b8320:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8322:	4931      	ldr	r1, [pc, #196]	; (b83e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8324:	2201      	movs	r2, #1
   b8326:	4668      	mov	r0, sp
   b8328:	f001 f988 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b832c:	4631      	mov	r1, r6
   b832e:	f7ff f911 	bl	b7554 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8332:	7923      	ldrb	r3, [r4, #4]
   b8334:	079e      	lsls	r6, r3, #30
   b8336:	d507      	bpl.n	b8348 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   b8338:	492c      	ldr	r1, [pc, #176]	; (b83ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b833a:	2202      	movs	r2, #2
   b833c:	4668      	mov	r0, sp
   b833e:	f001 f97d 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b8342:	68e1      	ldr	r1, [r4, #12]
   b8344:	f001 f8f8 	bl	b9538 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8348:	7923      	ldrb	r3, [r4, #4]
   b834a:	0758      	lsls	r0, r3, #29
   b834c:	d514      	bpl.n	b8378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b834e:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b8350:	4633      	mov	r3, r6
   b8352:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8354:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8358:	b12a      	cbz	r2, b8366 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   b835a:	2a20      	cmp	r2, #32
   b835c:	d101      	bne.n	b8362 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   b835e:	461e      	mov	r6, r3
   b8360:	e7f7      	b.n	b8352 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   b8362:	2a28      	cmp	r2, #40	; 0x28
   b8364:	d1f5      	bne.n	b8352 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   b8366:	4922      	ldr	r1, [pc, #136]	; (b83f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b8368:	2202      	movs	r2, #2
   b836a:	4668      	mov	r0, sp
   b836c:	f001 f966 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b8370:	1bba      	subs	r2, r7, r6
   b8372:	4631      	mov	r1, r6
   b8374:	f001 f972 	bl	b965c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b8378:	7923      	ldrb	r3, [r4, #4]
   b837a:	0719      	lsls	r1, r3, #28
   b837c:	d507      	bpl.n	b838e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   b837e:	491d      	ldr	r1, [pc, #116]	; (b83f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b8380:	2201      	movs	r2, #1
   b8382:	4668      	mov	r0, sp
   b8384:	f001 f95a 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b8388:	6961      	ldr	r1, [r4, #20]
   b838a:	f001 f8e7 	bl	b955c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b838e:	7923      	ldrb	r3, [r4, #4]
   b8390:	06da      	lsls	r2, r3, #27
   b8392:	d507      	bpl.n	b83a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8394:	4918      	ldr	r1, [pc, #96]	; (b83f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b8396:	2204      	movs	r2, #4
   b8398:	4668      	mov	r0, sp
   b839a:	f001 f94f 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b839e:	69a1      	ldr	r1, [r4, #24]
   b83a0:	f001 f8ca 	bl	b9538 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b83a4:	7923      	ldrb	r3, [r4, #4]
   b83a6:	069b      	lsls	r3, r3, #26
   b83a8:	d507      	bpl.n	b83ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b83aa:	4914      	ldr	r1, [pc, #80]	; (b83fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b83ac:	2206      	movs	r2, #6
   b83ae:	4668      	mov	r0, sp
   b83b0:	f001 f944 	bl	b963c <_ZN5spark10JSONWriter4nameEPKcj>
   b83b4:	69e1      	ldr	r1, [r4, #28]
   b83b6:	f7ff f8cd 	bl	b7554 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b83ba:	4668      	mov	r0, sp
   b83bc:	f001 f899 	bl	b94f2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b83c0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b83c2:	490f      	ldr	r1, [pc, #60]	; (b8400 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b83c4:	6803      	ldr	r3, [r0, #0]
   b83c6:	2202      	movs	r2, #2
   b83c8:	68db      	ldr	r3, [r3, #12]
   b83ca:	4798      	blx	r3
}
   b83cc:	b005      	add	sp, #20
   b83ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b83d2:	bf00      	nop
   b83d4:	2003e714 	.word	0x2003e714
   b83d8:	000b9f54 	.word	0x000b9f54
   b83dc:	000b9f6e 	.word	0x000b9f6e
   b83e0:	000b9fbc 	.word	0x000b9fbc
   b83e4:	000ba234 	.word	0x000ba234
   b83e8:	000b9d4a 	.word	0x000b9d4a
   b83ec:	000b9fbe 	.word	0x000b9fbe
   b83f0:	000b9fc1 	.word	0x000b9fc1
   b83f4:	000b9da3 	.word	0x000b9da3
   b83f8:	000b9fc4 	.word	0x000b9fc4
   b83fc:	000b9fc9 	.word	0x000b9fc9
   b8400:	000b9fb9 	.word	0x000b9fb9

000b8404 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8404:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8406:	2000      	movs	r0, #0
   b8408:	f7fe fca2 	bl	b6d50 <spark_sync_time_pending>
   b840c:	b128      	cbz	r0, b841a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b840e:	f7fe fc8f 	bl	b6d30 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8412:	f080 0001 	eor.w	r0, r0, #1
   b8416:	b2c0      	uxtb	r0, r0
    }
   b8418:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b841a:	2001      	movs	r0, #1
   b841c:	e7fc      	b.n	b8418 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b841e <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b841e:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8420:	2000      	movs	r0, #0
   b8422:	f7fe fa05 	bl	b6830 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8426:	4604      	mov	r4, r0
   b8428:	b9a0      	cbnz	r0, b8454 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b842a:	f7fe fba1 	bl	b6b70 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b842e:	2801      	cmp	r0, #1
   b8430:	d110      	bne.n	b8454 <_ZN9TimeClass7isValidEv+0x36>
   b8432:	4620      	mov	r0, r4
   b8434:	f7fe fbcc 	bl	b6bd0 <system_thread_get_state>
   b8438:	b960      	cbnz	r0, b8454 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b843a:	f7ff ffe3 	bl	b8404 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b843e:	b910      	cbnz	r0, b8446 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8440:	f7fe fc66 	bl	b6d10 <spark_process>
        while (_while() && !_condition()) {
   b8444:	e7f9      	b.n	b843a <_ZN9TimeClass7isValidEv+0x1c>
   b8446:	f7ff ffdd 	bl	b8404 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b844e:	2000      	movs	r0, #0
   b8450:	f7fe b9ee 	b.w	b6830 <hal_rtc_time_is_valid>
}
   b8454:	4620      	mov	r0, r4
   b8456:	bd10      	pop	{r4, pc}

000b8458 <_ZN9TimeClass3nowEv>:
{
   b8458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b845a:	f7ff ffe0 	bl	b841e <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b845e:	2210      	movs	r2, #16
   b8460:	2100      	movs	r1, #0
   b8462:	4668      	mov	r0, sp
   b8464:	f001 fa94 	bl	b9990 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8468:	2100      	movs	r1, #0
   b846a:	4668      	mov	r0, sp
   b846c:	f7fe f9e8 	bl	b6840 <hal_rtc_get_time>
}
   b8470:	9800      	ldr	r0, [sp, #0]
   b8472:	b005      	add	sp, #20
   b8474:	f85d fb04 	ldr.w	pc, [sp], #4

000b8478 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8478:	4b02      	ldr	r3, [pc, #8]	; (b8484 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b847a:	681a      	ldr	r2, [r3, #0]
   b847c:	4b02      	ldr	r3, [pc, #8]	; (b8488 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b847e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8480:	4770      	bx	lr
   b8482:	bf00      	nop
   b8484:	2003dd4c 	.word	0x2003dd4c
   b8488:	2003e6b0 	.word	0x2003e6b0

000b848c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b848c:	2100      	movs	r1, #0
   b848e:	f7fe bb7f 	b.w	b6b90 <system_delay_ms>
	...

000b8494 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8494:	4b01      	ldr	r3, [pc, #4]	; (b849c <_GLOBAL__sub_I_RGB+0x8>)
   b8496:	2200      	movs	r2, #0
   b8498:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b849a:	4770      	bx	lr
   b849c:	2003e6b4 	.word	0x2003e6b4

000b84a0 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b84a0:	0909      	lsrs	r1, r1, #4
   b84a2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b84a6:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b84aa:	ed9f 0a03 	vldr	s0, [pc, #12]	; b84b8 <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b84ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b84b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b84b6:	4770      	bx	lr
   b84b8:	44480000 	.word	0x44480000

000b84bc <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b84bc:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   b84c0:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   b84c4:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b84c6:	bf0c      	ite	eq
   b84c8:	eddf 7a04 	vldreq	s15, [pc, #16]	; b84dc <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b84cc:	eddf 7a04 	vldrne	s15, [pc, #16]	; b84e0 <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b84d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b84d4:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   b84d8:	4770      	bx	lr
   b84da:	bf00      	nop
   b84dc:	3b000000 	.word	0x3b000000
   b84e0:	3b800000 	.word	0x3b800000

000b84e4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b84e4:	6800      	ldr	r0, [r0, #0]
   b84e6:	f000 be0c 	b.w	b9102 <_ZN7TwoWire4lockEv>

000b84ea <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b84ea:	b510      	push	{r4, lr}
   b84ec:	4604      	mov	r4, r0
      lock_(_lock) {
   b84ee:	6001      	str	r1, [r0, #0]
   b84f0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b84f2:	b10a      	cbz	r2, b84f8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b84f4:	f7ff fff6 	bl	b84e4 <_ZN9FuelGauge4lockEv>
}
   b84f8:	4620      	mov	r0, r4
   b84fa:	bd10      	pop	{r4, pc}

000b84fc <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b84fc:	b513      	push	{r0, r1, r4, lr}
   b84fe:	4604      	mov	r4, r0
   b8500:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8502:	f001 f9d3 	bl	b98ac <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8506:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8508:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b850a:	4620      	mov	r0, r4
   b850c:	f7ff ffed 	bl	b84ea <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8510:	4620      	mov	r0, r4
   b8512:	b002      	add	sp, #8
   b8514:	bd10      	pop	{r4, pc}

000b8516 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b8516:	6800      	ldr	r0, [r0, #0]
   b8518:	f000 bdfc 	b.w	b9114 <_ZN7TwoWire6unlockEv>

000b851c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b851c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8520:	4604      	mov	r4, r0
   b8522:	460d      	mov	r5, r1
   b8524:	4617      	mov	r7, r2
   b8526:	461e      	mov	r6, r3
   b8528:	f7ff ffdc 	bl	b84e4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b852c:	2236      	movs	r2, #54	; 0x36
   b852e:	2300      	movs	r3, #0
   b8530:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8534:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b8536:	230a      	movs	r3, #10
   b8538:	f04f 0801 	mov.w	r8, #1
   b853c:	4669      	mov	r1, sp
   b853e:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8542:	f000 fdc2 	bl	b90ca <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b8546:	6820      	ldr	r0, [r4, #0]
   b8548:	6803      	ldr	r3, [r0, #0]
   b854a:	4629      	mov	r1, r5
   b854c:	689b      	ldr	r3, [r3, #8]
   b854e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8550:	6820      	ldr	r0, [r4, #0]
   b8552:	4641      	mov	r1, r8
   b8554:	f000 fdd1 	bl	b90fa <_ZN7TwoWire15endTransmissionEh>
   b8558:	4605      	mov	r5, r0
   b855a:	b140      	cbz	r0, b856e <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b855c:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   b8560:	4620      	mov	r0, r4
   b8562:	f7ff ffd8 	bl	b8516 <_ZN9FuelGauge6unlockEv>
}
   b8566:	4628      	mov	r0, r5
   b8568:	b004      	add	sp, #16
   b856a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b856e:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b8570:	6820      	ldr	r0, [r4, #0]
   b8572:	9301      	str	r3, [sp, #4]
   b8574:	4669      	mov	r1, sp
   b8576:	f000 fd91 	bl	b909c <_ZN7TwoWire11requestFromERK16WireTransmission>
   b857a:	2802      	cmp	r0, #2
   b857c:	d1ee      	bne.n	b855c <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b857e:	6820      	ldr	r0, [r4, #0]
   b8580:	6803      	ldr	r3, [r0, #0]
   b8582:	695b      	ldr	r3, [r3, #20]
   b8584:	4798      	blx	r3
   b8586:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b8588:	6820      	ldr	r0, [r4, #0]
   b858a:	6803      	ldr	r3, [r0, #0]
   b858c:	695b      	ldr	r3, [r3, #20]
   b858e:	4798      	blx	r3
   b8590:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b8592:	e7e5      	b.n	b8560 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b8594 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b8594:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b8596:	2300      	movs	r3, #0
   b8598:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b859c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b85a0:	f10d 0206 	add.w	r2, sp, #6
   b85a4:	f10d 0307 	add.w	r3, sp, #7
   b85a8:	2102      	movs	r1, #2
   b85aa:	f7ff ffb7 	bl	b851c <_ZN9FuelGauge12readRegisterEhRhS0_>
   b85ae:	b940      	cbnz	r0, b85c2 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b85b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b85b4:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b85b8:	b003      	add	sp, #12
   b85ba:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b85be:	f7ff bf6f 	b.w	b84a0 <_ZN8particle6detail9_getVCellEhh>
}
   b85c2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b85c6:	b003      	add	sp, #12
   b85c8:	f85d fb04 	ldr.w	pc, [sp], #4

000b85cc <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   b85cc:	b510      	push	{r4, lr}
   b85ce:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   b85d0:	2300      	movs	r3, #0
   b85d2:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   b85d6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b85da:	2104      	movs	r1, #4
   b85dc:	f10d 030f 	add.w	r3, sp, #15
   b85e0:	f10d 020e 	add.w	r2, sp, #14
   b85e4:	f7ff ff9a 	bl	b851c <_ZN9FuelGauge12readRegisterEhRhS0_>
   b85e8:	4601      	mov	r1, r0
   b85ea:	b9c8      	cbnz	r0, b8620 <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   b85ec:	2420      	movs	r4, #32
   b85ee:	9001      	str	r0, [sp, #4]
   b85f0:	4622      	mov	r2, r4
   b85f2:	a804      	add	r0, sp, #16
   b85f4:	f001 f9cc 	bl	b9990 <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b85f8:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   b85fa:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b85fe:	a804      	add	r0, sp, #16
   b8600:	f7fe fb0c 	bl	b6c1c <system_power_management_get_config>
   b8604:	b950      	cbnz	r0, b861c <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   b8606:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b860a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b860e:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   b8612:	b00c      	add	sp, #48	; 0x30
   b8614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b8618:	f7ff bf50 	b.w	b84bc <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   b861c:	2212      	movs	r2, #18
   b861e:	e7f4      	b.n	b860a <_ZN9FuelGauge6getSoCEv+0x3e>
}
   b8620:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b8624:	b00c      	add	sp, #48	; 0x30
   b8626:	bd10      	pop	{r4, pc}

000b8628 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8628:	4b01      	ldr	r3, [pc, #4]	; (b8630 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b862a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b862c:	4770      	bx	lr
   b862e:	bf00      	nop
   b8630:	2003dd50 	.word	0x2003dd50

000b8634 <serialEventRun>:
{
   b8634:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8636:	4b0b      	ldr	r3, [pc, #44]	; (b8664 <serialEventRun+0x30>)
   b8638:	b143      	cbz	r3, b864c <serialEventRun+0x18>
   b863a:	f000 fc03 	bl	b8e44 <_Z16_fetch_usbserialv>
   b863e:	6803      	ldr	r3, [r0, #0]
   b8640:	691b      	ldr	r3, [r3, #16]
   b8642:	4798      	blx	r3
   b8644:	2800      	cmp	r0, #0
   b8646:	dd01      	ble.n	b864c <serialEventRun+0x18>
        serialEvent();
   b8648:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b864c:	4b06      	ldr	r3, [pc, #24]	; (b8668 <serialEventRun+0x34>)
   b864e:	b143      	cbz	r3, b8662 <serialEventRun+0x2e>
   b8650:	f001 f8ae 	bl	b97b0 <_Z22__fetch_global_Serial1v>
   b8654:	6803      	ldr	r3, [r0, #0]
   b8656:	691b      	ldr	r3, [r3, #16]
   b8658:	4798      	blx	r3
   b865a:	2800      	cmp	r0, #0
   b865c:	dd01      	ble.n	b8662 <serialEventRun+0x2e>
        serialEvent1();
   b865e:	f3af 8000 	nop.w
}
   b8662:	bd08      	pop	{r3, pc}
	...

000b866c <_post_loop>:
{
   b866c:	b508      	push	{r3, lr}
	serialEventRun();
   b866e:	f7ff ffe1 	bl	b8634 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8672:	f7fe f8d5 	bl	b6820 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8676:	4b01      	ldr	r3, [pc, #4]	; (b867c <_post_loop+0x10>)
   b8678:	6018      	str	r0, [r3, #0]
}
   b867a:	bd08      	pop	{r3, pc}
   b867c:	2003e734 	.word	0x2003e734

000b8680 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8680:	4805      	ldr	r0, [pc, #20]	; (b8698 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8682:	4a06      	ldr	r2, [pc, #24]	; (b869c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8684:	4906      	ldr	r1, [pc, #24]	; (b86a0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8686:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8688:	1a12      	subs	r2, r2, r0
   b868a:	f001 f959 	bl	b9940 <memcpy>
    __backup_sram_signature = signature;
   b868e:	4b05      	ldr	r3, [pc, #20]	; (b86a4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8690:	4a05      	ldr	r2, [pc, #20]	; (b86a8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8692:	601a      	str	r2, [r3, #0]
}
   b8694:	bd08      	pop	{r3, pc}
   b8696:	bf00      	nop
   b8698:	2003f400 	.word	0x2003f400
   b869c:	2003f404 	.word	0x2003f404
   b86a0:	000ba3f8 	.word	0x000ba3f8
   b86a4:	2003f400 	.word	0x2003f400
   b86a8:	9a271c1e 	.word	0x9a271c1e

000b86ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b86ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b86ae:	2300      	movs	r3, #0
   b86b0:	9300      	str	r3, [sp, #0]
   b86b2:	461a      	mov	r2, r3
   b86b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b86b8:	f7fe fa9c 	bl	b6bf4 <system_ctrl_set_result>
}
   b86bc:	b003      	add	sp, #12
   b86be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b86c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b86c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b86c6:	8843      	ldrh	r3, [r0, #2]
   b86c8:	2b0a      	cmp	r3, #10
   b86ca:	d008      	beq.n	b86de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b86cc:	2b50      	cmp	r3, #80	; 0x50
   b86ce:	d10b      	bne.n	b86e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b86d0:	4b09      	ldr	r3, [pc, #36]	; (b86f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b86d2:	681b      	ldr	r3, [r3, #0]
   b86d4:	b14b      	cbz	r3, b86ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b86d6:	b003      	add	sp, #12
   b86d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b86dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b86de:	f7ff ffe5 	bl	b86ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b86e2:	b003      	add	sp, #12
   b86e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b86e8:	2300      	movs	r3, #0
   b86ea:	9300      	str	r3, [sp, #0]
   b86ec:	461a      	mov	r2, r3
   b86ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b86f2:	f7fe fa7f 	bl	b6bf4 <system_ctrl_set_result>
}
   b86f6:	e7f4      	b.n	b86e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b86f8:	2003e6c8 	.word	0x2003e6c8

000b86fc <module_user_init_hook>:
{
   b86fc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b86fe:	4812      	ldr	r0, [pc, #72]	; (b8748 <module_user_init_hook+0x4c>)
   b8700:	2100      	movs	r1, #0
   b8702:	f7fe fb85 	bl	b6e10 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8706:	4b11      	ldr	r3, [pc, #68]	; (b874c <module_user_init_hook+0x50>)
   b8708:	681a      	ldr	r2, [r3, #0]
   b870a:	4b11      	ldr	r3, [pc, #68]	; (b8750 <module_user_init_hook+0x54>)
   b870c:	429a      	cmp	r2, r3
   b870e:	4b11      	ldr	r3, [pc, #68]	; (b8754 <module_user_init_hook+0x58>)
   b8710:	bf0c      	ite	eq
   b8712:	2201      	moveq	r2, #1
   b8714:	2200      	movne	r2, #0
   b8716:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8718:	d001      	beq.n	b871e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b871a:	f7ff ffb1 	bl	b8680 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b871e:	f7fe f867 	bl	b67f0 <HAL_RNG_GetRandomNumber>
   b8722:	4604      	mov	r4, r0
    srand(seed);
   b8724:	f001 f93c 	bl	b99a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8728:	4b0b      	ldr	r3, [pc, #44]	; (b8758 <module_user_init_hook+0x5c>)
   b872a:	b113      	cbz	r3, b8732 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b872c:	4620      	mov	r0, r4
   b872e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8732:	2100      	movs	r1, #0
   b8734:	4808      	ldr	r0, [pc, #32]	; (b8758 <module_user_init_hook+0x5c>)
   b8736:	f7fe fb1b 	bl	b6d70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b873a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b873e:	4807      	ldr	r0, [pc, #28]	; (b875c <module_user_init_hook+0x60>)
   b8740:	2100      	movs	r1, #0
   b8742:	f7fe ba4d 	b.w	b6be0 <system_ctrl_set_app_request_handler>
   b8746:	bf00      	nop
   b8748:	000b8629 	.word	0x000b8629
   b874c:	2003f400 	.word	0x2003f400
   b8750:	9a271c1e 	.word	0x9a271c1e
   b8754:	2003e6c4 	.word	0x2003e6c4
   b8758:	00000000 	.word	0x00000000
   b875c:	000b86c5 	.word	0x000b86c5

000b8760 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8760:	4770      	bx	lr

000b8762 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b8762:	2000      	movs	r0, #0
   b8764:	4770      	bx	lr

000b8766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8766:	b510      	push	{r4, lr}
   b8768:	2110      	movs	r1, #16
   b876a:	4604      	mov	r4, r0
   b876c:	f7fc f8c5 	bl	b48fa <_ZdlPvj>
   b8770:	4620      	mov	r0, r4
   b8772:	bd10      	pop	{r4, pc}

000b8774 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b8774:	b508      	push	{r3, lr}
      { delete this; }
   b8776:	f7ff fff6 	bl	b8766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b877a:	bd08      	pop	{r3, pc}

000b877c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b877c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b877e:	2200      	movs	r2, #0
   b8780:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b8784:	6002      	str	r2, [r0, #0]
   b8786:	8084      	strh	r4, [r0, #4]
   b8788:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b878a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b878c:	680c      	ldr	r4, [r1, #0]
   b878e:	8085      	strh	r5, [r0, #4]
   b8790:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8792:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b8794:	bd30      	pop	{r4, r5, pc}

000b8796 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b8796:	b510      	push	{r4, lr}
   b8798:	4604      	mov	r4, r0
    free((void*)msg_);
   b879a:	6800      	ldr	r0, [r0, #0]
   b879c:	f7fe faf8 	bl	b6d90 <free>
}
   b87a0:	4620      	mov	r0, r4
   b87a2:	bd10      	pop	{r4, pc}

000b87a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b87a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b87a6:	68c4      	ldr	r4, [r0, #12]
   b87a8:	b1f4      	cbz	r4, b87e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b87aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b87ac:	2b02      	cmp	r3, #2
   b87ae:	d103      	bne.n	b87b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b87b0:	f104 000c 	add.w	r0, r4, #12
   b87b4:	f7ff ffef 	bl	b8796 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b87b8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b87ba:	b135      	cbz	r5, b87ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b87bc:	4628      	mov	r0, r5
   b87be:	f7fe fc50 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
   b87c2:	2110      	movs	r1, #16
   b87c4:	4628      	mov	r0, r5
   b87c6:	f7fc f898 	bl	b48fa <_ZdlPvj>
   b87ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b87cc:	b135      	cbz	r5, b87dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b87ce:	4628      	mov	r0, r5
   b87d0:	f7fe fc47 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
   b87d4:	2110      	movs	r1, #16
   b87d6:	4628      	mov	r0, r5
   b87d8:	f7fc f88f 	bl	b48fa <_ZdlPvj>
   b87dc:	4620      	mov	r0, r4
   b87de:	2114      	movs	r1, #20
   b87e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b87e4:	f7fc b889 	b.w	b48fa <_ZdlPvj>
   b87e8:	bd38      	pop	{r3, r4, r5, pc}

000b87ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b87ea:	680b      	ldr	r3, [r1, #0]
   b87ec:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b87ee:	684b      	ldr	r3, [r1, #4]
   b87f0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b87f2:	b113      	cbz	r3, b87fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b87f4:	685a      	ldr	r2, [r3, #4]
   b87f6:	3201      	adds	r2, #1
   b87f8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b87fa:	4770      	bx	lr

000b87fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b87fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b87fe:	4604      	mov	r4, r0
   b8800:	4668      	mov	r0, sp
   b8802:	460d      	mov	r5, r1
   b8804:	f7ff fff1 	bl	b87ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8808:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b880a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b880c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b880e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8810:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8812:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8814:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b8816:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8818:	f7fe fb49 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b881c:	b135      	cbz	r5, b882c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b881e:	1d28      	adds	r0, r5, #4
   b8820:	f7fe fb45 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8824:	2108      	movs	r1, #8
   b8826:	4628      	mov	r0, r5
   b8828:	f7fc f867 	bl	b48fa <_ZdlPvj>
        return p;
    }
   b882c:	4620      	mov	r0, r4
   b882e:	b003      	add	sp, #12
   b8830:	bd30      	pop	{r4, r5, pc}

000b8832 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b8832:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8834:	b510      	push	{r4, lr}
      if (_M_empty())
   b8836:	b90a      	cbnz	r2, b883c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8838:	f001 f860 	bl	b98fc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8840:	68c3      	ldr	r3, [r0, #12]
   b8842:	4718      	bx	r3

000b8844 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8844:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8846:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8848:	f100 0110 	add.w	r1, r0, #16
   b884c:	f7ff fff1 	bl	b8832 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8850:	bd08      	pop	{r3, pc}

000b8852 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b8852:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8854:	b510      	push	{r4, lr}
      if (_M_empty())
   b8856:	b90a      	cbnz	r2, b885c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8858:	f001 f850 	bl	b98fc <_ZSt25__throw_bad_function_callv>
    }
   b885c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8860:	68c3      	ldr	r3, [r0, #12]
   b8862:	4718      	bx	r3

000b8864 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8864:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8866:	6800      	ldr	r0, [r0, #0]
   b8868:	f100 0110 	add.w	r1, r0, #16
   b886c:	f7ff fff1 	bl	b8852 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8870:	bd08      	pop	{r3, pc}
	...

000b8874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8874:	b538      	push	{r3, r4, r5, lr}
   b8876:	2300      	movs	r3, #0
   b8878:	4604      	mov	r4, r0
   b887a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b887c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b887e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8880:	f7fc f837 	bl	b48f2 <_Znwj>
   b8884:	b128      	cbz	r0, b8892 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8886:	2301      	movs	r3, #1
   b8888:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b888c:	4b02      	ldr	r3, [pc, #8]	; (b8898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b888e:	6003      	str	r3, [r0, #0]
   b8890:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8892:	6020      	str	r0, [r4, #0]
	}
   b8894:	4620      	mov	r0, r4
   b8896:	bd38      	pop	{r3, r4, r5, pc}
   b8898:	000ba054 	.word	0x000ba054

000b889c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b889c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b889e:	2300      	movs	r3, #0
   b88a0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b88a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b88a4:	4604      	mov	r4, r0
   b88a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b88a8:	b12b      	cbz	r3, b88b6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b88aa:	2202      	movs	r2, #2
   b88ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b88ae:	68eb      	ldr	r3, [r5, #12]
   b88b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b88b2:	68ab      	ldr	r3, [r5, #8]
   b88b4:	60a3      	str	r3, [r4, #8]
    }
   b88b6:	4620      	mov	r0, r4
   b88b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b88bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b88bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b88be:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b88c0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b88c2:	4668      	mov	r0, sp
   b88c4:	f7ff ff5a 	bl	b877c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b88c8:	f04f 0302 	mov.w	r3, #2
   b88cc:	e8d4 2f4f 	ldrexb	r2, [r4]
   b88d0:	2a00      	cmp	r2, #0
   b88d2:	d103      	bne.n	b88dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b88d4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b88d8:	2900      	cmp	r1, #0
   b88da:	d1f7      	bne.n	b88cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b88dc:	d125      	bne.n	b892a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b88de:	f104 050c 	add.w	r5, r4, #12
   b88e2:	4669      	mov	r1, sp
   b88e4:	4628      	mov	r0, r5
   b88e6:	f7ff ff49 	bl	b877c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b88ea:	f3bf 8f5b 	dmb	ish
   b88ee:	2301      	movs	r3, #1
   b88f0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b88f2:	2000      	movs	r0, #0
   b88f4:	f104 0308 	add.w	r3, r4, #8
   b88f8:	f3bf 8f5b 	dmb	ish
   b88fc:	e853 6f00 	ldrex	r6, [r3]
   b8900:	e843 0200 	strex	r2, r0, [r3]
   b8904:	2a00      	cmp	r2, #0
   b8906:	d1f9      	bne.n	b88fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8908:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b890c:	b16e      	cbz	r6, b892a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b890e:	f7fe f94f 	bl	b6bb0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8912:	b178      	cbz	r0, b8934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8914:	4629      	mov	r1, r5
   b8916:	4630      	mov	r0, r6
   b8918:	f7ff ff8b 	bl	b8832 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b891c:	4630      	mov	r0, r6
   b891e:	f7fe fba0 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8922:	2110      	movs	r1, #16
   b8924:	4630      	mov	r0, r6
   b8926:	f7fb ffe8 	bl	b48fa <_ZdlPvj>
        p_->setError(std::move(error));
   b892a:	4668      	mov	r0, sp
   b892c:	f7ff ff33 	bl	b8796 <_ZN8particle5ErrorD1Ev>
    }
   b8930:	b009      	add	sp, #36	; 0x24
   b8932:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8934:	4631      	mov	r1, r6
   b8936:	a802      	add	r0, sp, #8
   b8938:	f7ff ffb0 	bl	b889c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b893c:	68e0      	ldr	r0, [r4, #12]
   b893e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8942:	b108      	cbz	r0, b8948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8944:	f001 f87a 	bl	b9a3c <strdup>
        type_(type) {
   b8948:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b894a:	2010      	movs	r0, #16
   b894c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8950:	f7fb ffcf 	bl	b48f2 <_Znwj>
   b8954:	4605      	mov	r5, r0
   b8956:	b1e8      	cbz	r0, b8994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8958:	2700      	movs	r7, #0
   b895a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b895c:	2018      	movs	r0, #24
   b895e:	f7fb ffc8 	bl	b48f2 <_Znwj>
   b8962:	4604      	mov	r4, r0
   b8964:	b188      	cbz	r0, b898a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8966:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8968:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b896a:	a802      	add	r0, sp, #8
   b896c:	f7fe fcd8 	bl	b7320 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8970:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8972:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8974:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8976:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8978:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b897a:	a906      	add	r1, sp, #24
   b897c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b897e:	60e3      	str	r3, [r4, #12]
   b8980:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8984:	9205      	str	r2, [sp, #20]
   b8986:	f7ff fef9 	bl	b877c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b898a:	4b08      	ldr	r3, [pc, #32]	; (b89ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b898c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b898e:	4b08      	ldr	r3, [pc, #32]	; (b89b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8990:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8992:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8994:	a806      	add	r0, sp, #24
   b8996:	f7ff fefe 	bl	b8796 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b899a:	a802      	add	r0, sp, #8
   b899c:	f7fe fb61 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b89a0:	2200      	movs	r2, #0
   b89a2:	4629      	mov	r1, r5
   b89a4:	4803      	ldr	r0, [pc, #12]	; (b89b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b89a6:	f7fe f90b 	bl	b6bc0 <application_thread_invoke>
   b89aa:	e7b7      	b.n	b891c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b89ac:	000b8845 	.word	0x000b8845
   b89b0:	000b8ac9 	.word	0x000b8ac9
   b89b4:	000b8fe1 	.word	0x000b8fe1

000b89b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b89b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89bc:	b08b      	sub	sp, #44	; 0x2c
   b89be:	4605      	mov	r5, r0
   b89c0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b89c4:	460f      	mov	r7, r1
   b89c6:	4690      	mov	r8, r2
   b89c8:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b89ca:	f7fe f9b1 	bl	b6d30 <spark_cloud_flag_connected>
   b89ce:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b89d0:	4683      	mov	fp, r0
   b89d2:	bb38      	cbnz	r0, b8a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b89d4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b89d8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b89da:	a905      	add	r1, sp, #20
   b89dc:	4630      	mov	r0, r6
   b89de:	f8ad 3018 	strh.w	r3, [sp, #24]
   b89e2:	f7ff fecb 	bl	b877c <_ZN8particle5ErrorC1EOS0_>
   b89e6:	2014      	movs	r0, #20
   b89e8:	f7fb ff83 	bl	b48f2 <_Znwj>
   b89ec:	4604      	mov	r4, r0
   b89ee:	b148      	cbz	r0, b8a04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b89f0:	2302      	movs	r3, #2
   b89f2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b89f4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b89f6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b89fa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b89fc:	4631      	mov	r1, r6
   b89fe:	300c      	adds	r0, #12
   b8a00:	f7ff febc 	bl	b877c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8a04:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8a06:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8a08:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8a0c:	f7ff ff32 	bl	b8874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8a10:	4630      	mov	r0, r6
   b8a12:	f7ff fec0 	bl	b8796 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8a16:	a805      	add	r0, sp, #20
   b8a18:	f7ff febd 	bl	b8796 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8a1c:	4628      	mov	r0, r5
   b8a1e:	b00b      	add	sp, #44	; 0x2c
   b8a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8a24:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8a26:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8a28:	2014      	movs	r0, #20
   b8a2a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8a2e:	9307      	str	r3, [sp, #28]
   b8a30:	f7fb ff5f 	bl	b48f2 <_Znwj>
   b8a34:	4601      	mov	r1, r0
   b8a36:	b118      	cbz	r0, b8a40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8a3c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8a3e:	7044      	strb	r4, [r0, #1]
   b8a40:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8a42:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8a44:	f7ff ff16 	bl	b8874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8a48:	4b1e      	ldr	r3, [pc, #120]	; (b8ac4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8a4a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8a4c:	2008      	movs	r0, #8
   b8a4e:	f7fb ff50 	bl	b48f2 <_Znwj>
   b8a52:	4604      	mov	r4, r0
   b8a54:	b110      	cbz	r0, b8a5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b8a56:	a903      	add	r1, sp, #12
   b8a58:	f7ff fec7 	bl	b87ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8a5c:	9600      	str	r6, [sp, #0]
   b8a5e:	fa5f f38a 	uxtb.w	r3, sl
   b8a62:	464a      	mov	r2, r9
   b8a64:	4641      	mov	r1, r8
   b8a66:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8a68:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8a6a:	f7fe f969 	bl	b6d40 <spark_send_event>
   b8a6e:	b9b8      	cbnz	r0, b8aa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8a70:	9b03      	ldr	r3, [sp, #12]
   b8a72:	785b      	ldrb	r3, [r3, #1]
   b8a74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8a78:	b993      	cbnz	r3, b8aa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8a7a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8a7e:	a905      	add	r1, sp, #20
   b8a80:	a803      	add	r0, sp, #12
   b8a82:	9205      	str	r2, [sp, #20]
   b8a84:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8a88:	f7ff ff18 	bl	b88bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8a8c:	a805      	add	r0, sp, #20
   b8a8e:	f7ff fe82 	bl	b8796 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b8a92:	a805      	add	r0, sp, #20
   b8a94:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8a96:	f7ff feb1 	bl	b87fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8a9a:	a806      	add	r0, sp, #24
   b8a9c:	f7fe fa07 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8aa0:	a903      	add	r1, sp, #12
   b8aa2:	a805      	add	r0, sp, #20
   b8aa4:	f7ff fea1 	bl	b87ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8aa8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8aaa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8aac:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8aae:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8ab0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8ab2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8ab4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8ab6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8ab8:	f7fe f9f9 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8abc:	a804      	add	r0, sp, #16
   b8abe:	f7fe f9f6 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b8ac2:	e7ab      	b.n	b8a1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8ac4:	000b8b8d 	.word	0x000b8b8d

000b8ac8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8ac8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8acc:	4605      	mov	r5, r0
	switch (__op)
   b8ace:	d103      	bne.n	b8ad8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8ad0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8ad2:	6003      	str	r3, [r0, #0]
      }
   b8ad4:	2000      	movs	r0, #0
   b8ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8ad8:	2a02      	cmp	r2, #2
   b8ada:	d010      	beq.n	b8afe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8adc:	2a03      	cmp	r2, #3
   b8ade:	d1f9      	bne.n	b8ad4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8ae0:	6804      	ldr	r4, [r0, #0]
   b8ae2:	2c00      	cmp	r4, #0
   b8ae4:	d0f6      	beq.n	b8ad4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8ae6:	f104 0010 	add.w	r0, r4, #16
   b8aea:	f7ff fe54 	bl	b8796 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8aee:	4620      	mov	r0, r4
   b8af0:	f7fe fab7 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8af4:	2118      	movs	r1, #24
   b8af6:	4620      	mov	r0, r4
   b8af8:	f7fb feff 	bl	b48fa <_ZdlPvj>
   b8afc:	e7ea      	b.n	b8ad4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8afe:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b8b00:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8b02:	f7fb fef6 	bl	b48f2 <_Znwj>
   b8b06:	4604      	mov	r4, r0
   b8b08:	b150      	cbz	r0, b8b20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b8b0a:	4631      	mov	r1, r6
   b8b0c:	f7ff fec6 	bl	b889c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8b10:	6930      	ldr	r0, [r6, #16]
   b8b12:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8b16:	b108      	cbz	r0, b8b1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8b18:	f000 ff90 	bl	b9a3c <strdup>
        type_(type) {
   b8b1c:	6120      	str	r0, [r4, #16]
   b8b1e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8b20:	602c      	str	r4, [r5, #0]
	}
   b8b22:	e7d7      	b.n	b8ad4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8b24 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8b24:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8b26:	2300      	movs	r3, #0
   b8b28:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8b2a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8b2c:	4604      	mov	r4, r0
   b8b2e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8b30:	b12b      	cbz	r3, b8b3e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8b32:	2202      	movs	r2, #2
   b8b34:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8b36:	68eb      	ldr	r3, [r5, #12]
   b8b38:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8b3a:	68ab      	ldr	r3, [r5, #8]
   b8b3c:	60a3      	str	r3, [r4, #8]
    }
   b8b3e:	4620      	mov	r0, r4
   b8b40:	bd38      	pop	{r3, r4, r5, pc}

000b8b42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8b42:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8b44:	b570      	push	{r4, r5, r6, lr}
   b8b46:	4604      	mov	r4, r0
	switch (__op)
   b8b48:	d103      	bne.n	b8b52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8b4a:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8b4c:	6003      	str	r3, [r0, #0]
      }
   b8b4e:	2000      	movs	r0, #0
   b8b50:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8b52:	2a02      	cmp	r2, #2
   b8b54:	d00c      	beq.n	b8b70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8b56:	2a03      	cmp	r2, #3
   b8b58:	d1f9      	bne.n	b8b4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8b5a:	6804      	ldr	r4, [r0, #0]
   b8b5c:	2c00      	cmp	r4, #0
   b8b5e:	d0f6      	beq.n	b8b4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b8b60:	4620      	mov	r0, r4
   b8b62:	f7fe fa7e 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8b66:	2114      	movs	r1, #20
   b8b68:	4620      	mov	r0, r4
   b8b6a:	f7fb fec6 	bl	b48fa <_ZdlPvj>
   b8b6e:	e7ee      	b.n	b8b4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8b70:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8b72:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8b74:	f7fb febd 	bl	b48f2 <_Znwj>
   b8b78:	4605      	mov	r5, r0
   b8b7a:	b120      	cbz	r0, b8b86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   b8b7c:	4631      	mov	r1, r6
   b8b7e:	f7ff ffd1 	bl	b8b24 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8b82:	7c33      	ldrb	r3, [r6, #16]
   b8b84:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8b86:	6025      	str	r5, [r4, #0]
	}
   b8b88:	e7e1      	b.n	b8b4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000b8b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8b8e:	b089      	sub	sp, #36	; 0x24
   b8b90:	4604      	mov	r4, r0
   b8b92:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8b94:	a801      	add	r0, sp, #4
   b8b96:	4611      	mov	r1, r2
   b8b98:	f7ff fe30 	bl	b87fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b8b9c:	b1a4      	cbz	r4, b8bc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b8b9e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8ba0:	b11d      	cbz	r5, b8baa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8ba2:	4628      	mov	r0, r5
   b8ba4:	f000 ff4a 	bl	b9a3c <strdup>
   b8ba8:	4605      	mov	r5, r0
   b8baa:	a801      	add	r0, sp, #4
   b8bac:	a903      	add	r1, sp, #12
        type_(type) {
   b8bae:	9503      	str	r5, [sp, #12]
   b8bb0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8bb4:	f7ff fe82 	bl	b88bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8bb8:	a803      	add	r0, sp, #12
   b8bba:	f7ff fdec 	bl	b8796 <_ZN8particle5ErrorD1Ev>
   b8bbe:	a802      	add	r0, sp, #8
   b8bc0:	f7fe f975 	bl	b6eae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8bc4:	b009      	add	sp, #36	; 0x24
   b8bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8bc8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8bca:	2301      	movs	r3, #1
   b8bcc:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8bd0:	2a00      	cmp	r2, #0
   b8bd2:	d103      	bne.n	b8bdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8bd4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8bd8:	2900      	cmp	r1, #0
   b8bda:	d1f7      	bne.n	b8bcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8bdc:	d1ef      	bne.n	b8bbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8bde:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8be0:	f3bf 8f5b 	dmb	ish
   b8be4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8be6:	1d2b      	adds	r3, r5, #4
   b8be8:	f3bf 8f5b 	dmb	ish
   b8bec:	e853 6f00 	ldrex	r6, [r3]
   b8bf0:	e843 4200 	strex	r2, r4, [r3]
   b8bf4:	2a00      	cmp	r2, #0
   b8bf6:	d1f9      	bne.n	b8bec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8bf8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8bfc:	2e00      	cmp	r6, #0
   b8bfe:	d0de      	beq.n	b8bbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8c00:	4620      	mov	r0, r4
   b8c02:	f7fd ffd5 	bl	b6bb0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8c06:	4607      	mov	r7, r0
   b8c08:	b160      	cbz	r0, b8c24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8c0a:	f105 010c 	add.w	r1, r5, #12
   b8c0e:	4630      	mov	r0, r6
   b8c10:	f7ff fe1f 	bl	b8852 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8c14:	4630      	mov	r0, r6
   b8c16:	f7fe fa24 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8c1a:	2110      	movs	r1, #16
   b8c1c:	4630      	mov	r0, r6
   b8c1e:	f7fb fe6c 	bl	b48fa <_ZdlPvj>
   b8c22:	e7cc      	b.n	b8bbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8c24:	4631      	mov	r1, r6
   b8c26:	a803      	add	r0, sp, #12
   b8c28:	f7ff ff7c 	bl	b8b24 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8c2c:	7b2b      	ldrb	r3, [r5, #12]
   b8c2e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8c32:	2010      	movs	r0, #16
   b8c34:	f7fb fe5d 	bl	b48f2 <_Znwj>
   b8c38:	4605      	mov	r5, r0
   b8c3a:	b1d0      	cbz	r0, b8c72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8c3c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8c3e:	2014      	movs	r0, #20
   b8c40:	f7fb fe57 	bl	b48f2 <_Znwj>
   b8c44:	4604      	mov	r4, r0
   b8c46:	b178      	cbz	r0, b8c68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8c48:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8c4a:	4601      	mov	r1, r0
   b8c4c:	a803      	add	r0, sp, #12
   b8c4e:	f7fe fb67 	bl	b7320 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c52:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8c54:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c56:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8c58:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8c5a:	9205      	str	r2, [sp, #20]
   b8c5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c5e:	60e3      	str	r3, [r4, #12]
   b8c60:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8c64:	9206      	str	r2, [sp, #24]
   b8c66:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8c68:	4b06      	ldr	r3, [pc, #24]	; (b8c84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8c6a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8c6c:	4b06      	ldr	r3, [pc, #24]	; (b8c88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8c6e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8c70:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b8c72:	a803      	add	r0, sp, #12
   b8c74:	f7fe f9f5 	bl	b7062 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8c78:	2200      	movs	r2, #0
   b8c7a:	4629      	mov	r1, r5
   b8c7c:	4803      	ldr	r0, [pc, #12]	; (b8c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b8c7e:	f7fd ff9f 	bl	b6bc0 <application_thread_invoke>
   b8c82:	e7c7      	b.n	b8c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8c84:	000b8865 	.word	0x000b8865
   b8c88:	000b8b43 	.word	0x000b8b43
   b8c8c:	000b8fe1 	.word	0x000b8fe1

000b8c90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8c90:	4770      	bx	lr

000b8c92 <_ZN9IPAddressD0Ev>:
   b8c92:	b510      	push	{r4, lr}
   b8c94:	2118      	movs	r1, #24
   b8c96:	4604      	mov	r4, r0
   b8c98:	f7fb fe2f 	bl	b48fa <_ZdlPvj>
   b8c9c:	4620      	mov	r0, r4
   b8c9e:	bd10      	pop	{r4, pc}

000b8ca0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8ca2:	7d03      	ldrb	r3, [r0, #20]
   b8ca4:	2b06      	cmp	r3, #6
{
   b8ca6:	b08d      	sub	sp, #52	; 0x34
   b8ca8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8caa:	f100 0704 	add.w	r7, r0, #4
   b8cae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8cb2:	d012      	beq.n	b8cda <_ZNK9IPAddress7printToER5Print+0x3a>
   b8cb4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8cb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8cbc:	220a      	movs	r2, #10
   b8cbe:	4630      	mov	r0, r6
   b8cc0:	f7fe fb83 	bl	b73ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8cc4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8cc6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8cc8:	d019      	beq.n	b8cfe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8cca:	2c00      	cmp	r4, #0
   b8ccc:	d0f4      	beq.n	b8cb8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8cce:	212e      	movs	r1, #46	; 0x2e
   b8cd0:	4630      	mov	r0, r6
   b8cd2:	f7fe fb6b 	bl	b73ac <_ZN5Print5printEc>
   b8cd6:	4404      	add	r4, r0
   b8cd8:	e7ee      	b.n	b8cb8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8cda:	232f      	movs	r3, #47	; 0x2f
   b8cdc:	466a      	mov	r2, sp
   b8cde:	4639      	mov	r1, r7
   b8ce0:	200a      	movs	r0, #10
		buf[0] = 0;
   b8ce2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8ce6:	f7fd fdd3 	bl	b6890 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8cea:	4668      	mov	r0, sp
   b8cec:	f7fb fdbe 	bl	b486c <strlen>
   b8cf0:	6833      	ldr	r3, [r6, #0]
   b8cf2:	4602      	mov	r2, r0
   b8cf4:	68db      	ldr	r3, [r3, #12]
   b8cf6:	4669      	mov	r1, sp
   b8cf8:	4630      	mov	r0, r6
   b8cfa:	4798      	blx	r3
   b8cfc:	4604      	mov	r4, r0
    }
    return n;
}
   b8cfe:	4620      	mov	r0, r4
   b8d00:	b00d      	add	sp, #52	; 0x34
   b8d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8d04 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8d04:	b510      	push	{r4, lr}
   b8d06:	4b05      	ldr	r3, [pc, #20]	; (b8d1c <_ZN9IPAddressC1Ev+0x18>)
   b8d08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8d0a:	2211      	movs	r2, #17
   b8d0c:	f840 3b04 	str.w	r3, [r0], #4
   b8d10:	2100      	movs	r1, #0
   b8d12:	f000 fe3d 	bl	b9990 <memset>
}
   b8d16:	4620      	mov	r0, r4
   b8d18:	bd10      	pop	{r4, pc}
   b8d1a:	bf00      	nop
   b8d1c:	000ba070 	.word	0x000ba070

000b8d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8d20:	4603      	mov	r3, r0
   b8d22:	4a07      	ldr	r2, [pc, #28]	; (b8d40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8d24:	b510      	push	{r4, lr}
   b8d26:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8d2a:	f101 0210 	add.w	r2, r1, #16
   b8d2e:	f851 4b04 	ldr.w	r4, [r1], #4
   b8d32:	f843 4b04 	str.w	r4, [r3], #4
   b8d36:	4291      	cmp	r1, r2
   b8d38:	d1f9      	bne.n	b8d2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8d3a:	780a      	ldrb	r2, [r1, #0]
   b8d3c:	701a      	strb	r2, [r3, #0]
}
   b8d3e:	bd10      	pop	{r4, pc}
   b8d40:	000ba070 	.word	0x000ba070

000b8d44 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8d44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8d46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8d4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8d4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8d52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8d56:	2304      	movs	r3, #4
   b8d58:	6041      	str	r1, [r0, #4]
   b8d5a:	7503      	strb	r3, [r0, #20]
}
   b8d5c:	bd10      	pop	{r4, pc}
	...

000b8d60 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8d60:	b507      	push	{r0, r1, r2, lr}
   b8d62:	4b06      	ldr	r3, [pc, #24]	; (b8d7c <_ZN9IPAddressC1EPKh+0x1c>)
   b8d64:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8d66:	78cb      	ldrb	r3, [r1, #3]
   b8d68:	9300      	str	r3, [sp, #0]
   b8d6a:	788b      	ldrb	r3, [r1, #2]
   b8d6c:	784a      	ldrb	r2, [r1, #1]
   b8d6e:	7809      	ldrb	r1, [r1, #0]
   b8d70:	f7ff ffe8 	bl	b8d44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8d74:	b003      	add	sp, #12
   b8d76:	f85d fb04 	ldr.w	pc, [sp], #4
   b8d7a:	bf00      	nop
   b8d7c:	000ba070 	.word	0x000ba070

000b8d80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8d80:	7441      	strb	r1, [r0, #17]
}
   b8d82:	4770      	bx	lr

000b8d84 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8d84:	4770      	bx	lr

000b8d86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8d86:	4770      	bx	lr

000b8d88 <_ZN9USBSerial4readEv>:
{
   b8d88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8d8a:	2100      	movs	r1, #0
   b8d8c:	7c00      	ldrb	r0, [r0, #16]
   b8d8e:	f7fd feaf 	bl	b6af0 <HAL_USB_USART_Receive_Data>
}
   b8d92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d96:	bd08      	pop	{r3, pc}

000b8d98 <_ZN9USBSerial4peekEv>:
{
   b8d98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8d9a:	2101      	movs	r1, #1
   b8d9c:	7c00      	ldrb	r0, [r0, #16]
   b8d9e:	f7fd fea7 	bl	b6af0 <HAL_USB_USART_Receive_Data>
}
   b8da2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8da6:	bd08      	pop	{r3, pc}

000b8da8 <_ZN9USBSerial17availableForWriteEv>:
{
   b8da8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8daa:	7c00      	ldrb	r0, [r0, #16]
   b8dac:	f7fd fe98 	bl	b6ae0 <HAL_USB_USART_Available_Data_For_Write>
}
   b8db0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8db4:	bd08      	pop	{r3, pc}

000b8db6 <_ZN9USBSerial9availableEv>:
{
   b8db6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8db8:	7c00      	ldrb	r0, [r0, #16]
   b8dba:	f7fd fe89 	bl	b6ad0 <HAL_USB_USART_Available_Data>
}
   b8dbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8dc2:	bd08      	pop	{r3, pc}

000b8dc4 <_ZN9USBSerial5writeEh>:
{
   b8dc4:	b513      	push	{r0, r1, r4, lr}
   b8dc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8dc8:	7c00      	ldrb	r0, [r0, #16]
{
   b8dca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8dcc:	f7fd fe88 	bl	b6ae0 <HAL_USB_USART_Available_Data_For_Write>
   b8dd0:	2800      	cmp	r0, #0
   b8dd2:	9901      	ldr	r1, [sp, #4]
   b8dd4:	dc01      	bgt.n	b8dda <_ZN9USBSerial5writeEh+0x16>
   b8dd6:	7c60      	ldrb	r0, [r4, #17]
   b8dd8:	b120      	cbz	r0, b8de4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8dda:	7c20      	ldrb	r0, [r4, #16]
   b8ddc:	f7fd fe90 	bl	b6b00 <HAL_USB_USART_Send_Data>
   b8de0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8de4:	b002      	add	sp, #8
   b8de6:	bd10      	pop	{r4, pc}

000b8de8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8de8:	7c00      	ldrb	r0, [r0, #16]
   b8dea:	f7fd be91 	b.w	b6b10 <HAL_USB_USART_Flush_Data>

000b8dee <_ZN9USBSerialD0Ev>:
   b8dee:	b510      	push	{r4, lr}
   b8df0:	2114      	movs	r1, #20
   b8df2:	4604      	mov	r4, r0
   b8df4:	f7fb fd81 	bl	b48fa <_ZdlPvj>
   b8df8:	4620      	mov	r0, r4
   b8dfa:	bd10      	pop	{r4, pc}

000b8dfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8dfc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8e02:	4604      	mov	r4, r0
   b8e04:	4608      	mov	r0, r1
   b8e06:	2100      	movs	r1, #0
   b8e08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8e0c:	4b04      	ldr	r3, [pc, #16]	; (b8e20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8e0e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8e10:	2301      	movs	r3, #1
  _serial = serial;
   b8e12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8e14:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8e16:	4611      	mov	r1, r2
   b8e18:	f7fd fe42 	bl	b6aa0 <HAL_USB_USART_Init>
}
   b8e1c:	4620      	mov	r0, r4
   b8e1e:	bd10      	pop	{r4, pc}
   b8e20:	000ba084 	.word	0x000ba084

000b8e24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8e24:	7c00      	ldrb	r0, [r0, #16]
   b8e26:	2200      	movs	r2, #0
   b8e28:	f7fd be42 	b.w	b6ab0 <HAL_USB_USART_Begin>

000b8e2c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b8e2c:	7c00      	ldrb	r0, [r0, #16]
   b8e2e:	f7fd be47 	b.w	b6ac0 <HAL_USB_USART_End>

000b8e32 <_Z19acquireSerialBufferv>:
{
   b8e32:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8e34:	2214      	movs	r2, #20
{
   b8e36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8e38:	2100      	movs	r1, #0
   b8e3a:	f000 fda9 	bl	b9990 <memset>
}
   b8e3e:	4620      	mov	r0, r4
   b8e40:	bd10      	pop	{r4, pc}
	...

000b8e44 <_Z16_fetch_usbserialv>:
{
   b8e44:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e46:	4c0f      	ldr	r4, [pc, #60]	; (b8e84 <_Z16_fetch_usbserialv+0x40>)
{
   b8e48:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8e4a:	a803      	add	r0, sp, #12
   b8e4c:	f7ff fff1 	bl	b8e32 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e50:	7821      	ldrb	r1, [r4, #0]
   b8e52:	f3bf 8f5b 	dmb	ish
   b8e56:	f011 0101 	ands.w	r1, r1, #1
   b8e5a:	d10f      	bne.n	b8e7c <_Z16_fetch_usbserialv+0x38>
   b8e5c:	4620      	mov	r0, r4
   b8e5e:	9101      	str	r1, [sp, #4]
   b8e60:	f7fb fd5a 	bl	b4918 <__cxa_guard_acquire>
   b8e64:	9901      	ldr	r1, [sp, #4]
   b8e66:	b148      	cbz	r0, b8e7c <_Z16_fetch_usbserialv+0x38>
   b8e68:	aa03      	add	r2, sp, #12
   b8e6a:	4807      	ldr	r0, [pc, #28]	; (b8e88 <_Z16_fetch_usbserialv+0x44>)
   b8e6c:	f7ff ffc6 	bl	b8dfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8e70:	4620      	mov	r0, r4
   b8e72:	f7fb fd56 	bl	b4922 <__cxa_guard_release>
   b8e76:	4805      	ldr	r0, [pc, #20]	; (b8e8c <_Z16_fetch_usbserialv+0x48>)
   b8e78:	f000 fd43 	bl	b9902 <atexit>
	return _usbserial;
}
   b8e7c:	4802      	ldr	r0, [pc, #8]	; (b8e88 <_Z16_fetch_usbserialv+0x44>)
   b8e7e:	b008      	add	sp, #32
   b8e80:	bd10      	pop	{r4, pc}
   b8e82:	bf00      	nop
   b8e84:	2003e6cc 	.word	0x2003e6cc
   b8e88:	2003e6d0 	.word	0x2003e6d0
   b8e8c:	000b8d85 	.word	0x000b8d85

000b8e90 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b8e90:	2200      	movs	r2, #0
   b8e92:	6840      	ldr	r0, [r0, #4]
   b8e94:	4611      	mov	r1, r2
   b8e96:	f7fd bee3 	b.w	b6c60 <network_ready>

000b8e9a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b8e9a:	2200      	movs	r2, #0
   b8e9c:	6840      	ldr	r0, [r0, #4]
   b8e9e:	4611      	mov	r1, r2
   b8ea0:	f7fd befe 	b.w	b6ca0 <network_listening>

000b8ea4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8ea4:	2200      	movs	r2, #0
   b8ea6:	6840      	ldr	r0, [r0, #4]
   b8ea8:	4611      	mov	r1, r2
   b8eaa:	f7fd bf09 	b.w	b6cc0 <network_get_listen_timeout>

000b8eae <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8eae:	6840      	ldr	r0, [r0, #4]
   b8eb0:	2200      	movs	r2, #0
   b8eb2:	f7fd befd 	b.w	b6cb0 <network_set_listen_timeout>

000b8eb6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8eb6:	6840      	ldr	r0, [r0, #4]
   b8eb8:	2200      	movs	r2, #0
   b8eba:	f081 0101 	eor.w	r1, r1, #1
   b8ebe:	f7fd bee7 	b.w	b6c90 <network_listen>

000b8ec2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8ec2:	2300      	movs	r3, #0
   b8ec4:	6840      	ldr	r0, [r0, #4]
   b8ec6:	461a      	mov	r2, r3
   b8ec8:	4619      	mov	r1, r3
   b8eca:	f7fd bed9 	b.w	b6c80 <network_off>

000b8ece <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8ece:	2300      	movs	r3, #0
   b8ed0:	6840      	ldr	r0, [r0, #4]
   b8ed2:	461a      	mov	r2, r3
   b8ed4:	4619      	mov	r1, r3
   b8ed6:	f7fd becb 	b.w	b6c70 <network_on>

000b8eda <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8eda:	2200      	movs	r2, #0
   b8edc:	6840      	ldr	r0, [r0, #4]
   b8ede:	4611      	mov	r1, r2
   b8ee0:	f7fd beae 	b.w	b6c40 <network_connecting>

000b8ee4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8ee4:	6840      	ldr	r0, [r0, #4]
   b8ee6:	2200      	movs	r2, #0
   b8ee8:	2102      	movs	r1, #2
   b8eea:	f7fd beb1 	b.w	b6c50 <network_disconnect>

000b8eee <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8eee:	2300      	movs	r3, #0
   b8ef0:	6840      	ldr	r0, [r0, #4]
   b8ef2:	461a      	mov	r2, r3
   b8ef4:	f7fd be9c 	b.w	b6c30 <network_connect>

000b8ef8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8ef8:	4b08      	ldr	r3, [pc, #32]	; (b8f1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8efa:	b510      	push	{r4, lr}
   b8efc:	2428      	movs	r4, #40	; 0x28
   b8efe:	4622      	mov	r2, r4
   b8f00:	4618      	mov	r0, r3
   b8f02:	2100      	movs	r1, #0
   b8f04:	f000 fd44 	bl	b9990 <memset>
   b8f08:	4b05      	ldr	r3, [pc, #20]	; (b8f20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8f0a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8f0c:	f04f 32ff 	mov.w	r2, #4294967295
   b8f10:	6042      	str	r2, [r0, #4]
   b8f12:	2204      	movs	r2, #4
   b8f14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8f16:	4a03      	ldr	r2, [pc, #12]	; (b8f24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8f18:	601a      	str	r2, [r3, #0]
   b8f1a:	bd10      	pop	{r4, pc}
   b8f1c:	2003e6ec 	.word	0x2003e6ec
   b8f20:	2003e6e4 	.word	0x2003e6e4
   b8f24:	000ba0b8 	.word	0x000ba0b8

000b8f28 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8f28:	4770      	bx	lr

000b8f2a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8f2a:	7441      	strb	r1, [r0, #17]
}
   b8f2c:	4770      	bx	lr

000b8f2e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8f2e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8f30:	7c00      	ldrb	r0, [r0, #16]
   b8f32:	f7fd fced 	bl	b6910 <hal_usart_available_data_for_write>
}
   b8f36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8f3a:	bd08      	pop	{r3, pc}

000b8f3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8f3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8f3e:	7c00      	ldrb	r0, [r0, #16]
   b8f40:	f7fd fcbe 	bl	b68c0 <hal_usart_available>
}
   b8f44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8f48:	bd08      	pop	{r3, pc}

000b8f4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8f4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8f4c:	7c00      	ldrb	r0, [r0, #16]
   b8f4e:	f7fd fcc7 	bl	b68e0 <hal_usart_peek>
}
   b8f52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8f56:	bd08      	pop	{r3, pc}

000b8f58 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8f58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8f5a:	7c00      	ldrb	r0, [r0, #16]
   b8f5c:	f7fd fcb8 	bl	b68d0 <hal_usart_read>
}
   b8f60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8f64:	bd08      	pop	{r3, pc}

000b8f66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8f66:	7c00      	ldrb	r0, [r0, #16]
   b8f68:	f7fd bcc2 	b.w	b68f0 <hal_usart_flush>

000b8f6c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8f6e:	7c45      	ldrb	r5, [r0, #17]
{
   b8f70:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8f72:	b12d      	cbz	r5, b8f80 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8f74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8f76:	b003      	add	sp, #12
   b8f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8f7c:	f7fd bc98 	b.w	b68b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8f80:	7c00      	ldrb	r0, [r0, #16]
   b8f82:	9101      	str	r1, [sp, #4]
   b8f84:	f7fd fcc4 	bl	b6910 <hal_usart_available_data_for_write>
   b8f88:	2800      	cmp	r0, #0
   b8f8a:	9901      	ldr	r1, [sp, #4]
   b8f8c:	dcf2      	bgt.n	b8f74 <_ZN11USARTSerial5writeEh+0x8>
}
   b8f8e:	4628      	mov	r0, r5
   b8f90:	b003      	add	sp, #12
   b8f92:	bd30      	pop	{r4, r5, pc}

000b8f94 <_ZN11USARTSerialD0Ev>:
   b8f94:	b510      	push	{r4, lr}
   b8f96:	2114      	movs	r1, #20
   b8f98:	4604      	mov	r4, r0
   b8f9a:	f7fb fcae 	bl	b48fa <_ZdlPvj>
   b8f9e:	4620      	mov	r0, r4
   b8fa0:	bd10      	pop	{r4, pc}
	...

000b8fa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8fa4:	b510      	push	{r4, lr}
   b8fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8faa:	4604      	mov	r4, r0
   b8fac:	4608      	mov	r0, r1
   b8fae:	4611      	mov	r1, r2
   b8fb0:	2200      	movs	r2, #0
   b8fb2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8fb6:	4b04      	ldr	r3, [pc, #16]	; (b8fc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8fb8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8fba:	2301      	movs	r3, #1
  _serial = serial;
   b8fbc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8fbe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8fc0:	f7fd fcb6 	bl	b6930 <hal_usart_init_ex>
}
   b8fc4:	4620      	mov	r0, r4
   b8fc6:	bd10      	pop	{r4, pc}
   b8fc8:	000ba0fc 	.word	0x000ba0fc

000b8fcc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8fcc:	7c00      	ldrb	r0, [r0, #16]
   b8fce:	2300      	movs	r3, #0
   b8fd0:	f7fd bca6 	b.w	b6920 <hal_usart_begin_config>

000b8fd4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b8fd4:	2200      	movs	r2, #0
   b8fd6:	f7ff bff9 	b.w	b8fcc <_ZN11USARTSerial5beginEmm>

000b8fda <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8fda:	7c00      	ldrb	r0, [r0, #16]
   b8fdc:	f7fd bc60 	b.w	b68a0 <hal_usart_end>

000b8fe0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8fe0:	b510      	push	{r4, lr}
      if (_M_empty())
   b8fe2:	6883      	ldr	r3, [r0, #8]
   b8fe4:	4604      	mov	r4, r0
   b8fe6:	b90b      	cbnz	r3, b8fec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8fe8:	f000 fc88 	bl	b98fc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8fec:	68c3      	ldr	r3, [r0, #12]
   b8fee:	4798      	blx	r3
      if (_M_manager)
   b8ff0:	68a3      	ldr	r3, [r4, #8]
   b8ff2:	b11b      	cbz	r3, b8ffc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8ff4:	2203      	movs	r2, #3
   b8ff6:	4621      	mov	r1, r4
   b8ff8:	4620      	mov	r0, r4
   b8ffa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8ffc:	4620      	mov	r0, r4
   b8ffe:	2110      	movs	r1, #16
}
   b9000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9004:	f7fb bc79 	b.w	b48fa <_ZdlPvj>

000b9008 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9008:	4770      	bx	lr

000b900a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b900a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b900c:	4606      	mov	r6, r0
   b900e:	4615      	mov	r5, r2
   b9010:	460c      	mov	r4, r1
   b9012:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9014:	42bc      	cmp	r4, r7
   b9016:	d006      	beq.n	b9026 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9018:	6833      	ldr	r3, [r6, #0]
   b901a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b901e:	689b      	ldr	r3, [r3, #8]
   b9020:	4630      	mov	r0, r6
   b9022:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9024:	e7f6      	b.n	b9014 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9026:	4628      	mov	r0, r5
   b9028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b902a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b902a:	7c00      	ldrb	r0, [r0, #16]
   b902c:	2200      	movs	r2, #0
   b902e:	f7fd bc97 	b.w	b6960 <hal_i2c_write>

000b9032 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9032:	7c00      	ldrb	r0, [r0, #16]
   b9034:	2100      	movs	r1, #0
   b9036:	f7fd bc9b 	b.w	b6970 <hal_i2c_available>

000b903a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b903a:	7c00      	ldrb	r0, [r0, #16]
   b903c:	2100      	movs	r1, #0
   b903e:	f7fd bc9f 	b.w	b6980 <hal_i2c_read>

000b9042 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9042:	7c00      	ldrb	r0, [r0, #16]
   b9044:	2100      	movs	r1, #0
   b9046:	f7fd bca3 	b.w	b6990 <hal_i2c_peek>

000b904a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b904a:	7c00      	ldrb	r0, [r0, #16]
   b904c:	2100      	movs	r1, #0
   b904e:	f7fd bca7 	b.w	b69a0 <hal_i2c_flush>

000b9052 <_ZN7TwoWireD0Ev>:
   b9052:	b510      	push	{r4, lr}
   b9054:	2114      	movs	r1, #20
   b9056:	4604      	mov	r4, r0
   b9058:	f7fb fc4f 	bl	b48fa <_ZdlPvj>
   b905c:	4620      	mov	r0, r4
   b905e:	bd10      	pop	{r4, pc}

000b9060 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9060:	b538      	push	{r3, r4, r5, lr}
   b9062:	4604      	mov	r4, r0
   b9064:	4615      	mov	r5, r2
   b9066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b906a:	2200      	movs	r2, #0
   b906c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9070:	4b09      	ldr	r3, [pc, #36]	; (b9098 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b9072:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9074:	4608      	mov	r0, r1
   b9076:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b9078:	4629      	mov	r1, r5
   b907a:	f7fd fca1 	bl	b69c0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b907e:	30bf      	adds	r0, #191	; 0xbf
   b9080:	d108      	bne.n	b9094 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b9082:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9084:	07db      	lsls	r3, r3, #31
   b9086:	d505      	bpl.n	b9094 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b9088:	6868      	ldr	r0, [r5, #4]
   b908a:	f7fd fe81 	bl	b6d90 <free>
    free(conf.tx_buffer);
   b908e:	68e8      	ldr	r0, [r5, #12]
   b9090:	f7fd fe7e 	bl	b6d90 <free>
}
   b9094:	4620      	mov	r0, r4
   b9096:	bd38      	pop	{r3, r4, r5, pc}
   b9098:	000ba130 	.word	0x000ba130

000b909c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b909c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b909e:	2200      	movs	r2, #0
   b90a0:	2314      	movs	r3, #20
   b90a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b90a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b90aa:	780b      	ldrb	r3, [r1, #0]
   b90ac:	f88d 3008 	strb.w	r3, [sp, #8]
   b90b0:	684b      	ldr	r3, [r1, #4]
   b90b2:	9303      	str	r3, [sp, #12]
   b90b4:	68cb      	ldr	r3, [r1, #12]
   b90b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b90b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b90ba:	7a0b      	ldrb	r3, [r1, #8]
   b90bc:	9305      	str	r3, [sp, #20]
   b90be:	a901      	add	r1, sp, #4
   b90c0:	f7fd fc96 	bl	b69f0 <hal_i2c_request_ex>
}
   b90c4:	b007      	add	sp, #28
   b90c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b90ca <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b90ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b90cc:	2300      	movs	r3, #0
   b90ce:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b90d2:	684a      	ldr	r2, [r1, #4]
   b90d4:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b90d6:	2314      	movs	r3, #20
    };
   b90d8:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b90da:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b90de:	780b      	ldrb	r3, [r1, #0]
    };
   b90e0:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b90e2:	7a0a      	ldrb	r2, [r1, #8]
   b90e4:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b90e6:	7c00      	ldrb	r0, [r0, #16]
    };
   b90e8:	f88d 3008 	strb.w	r3, [sp, #8]
   b90ec:	aa01      	add	r2, sp, #4
   b90ee:	4619      	mov	r1, r3
   b90f0:	f7fd fc26 	bl	b6940 <hal_i2c_begin_transmission>
}
   b90f4:	b007      	add	sp, #28
   b90f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b90fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b90fa:	7c00      	ldrb	r0, [r0, #16]
   b90fc:	2200      	movs	r2, #0
   b90fe:	f7fd bc27 	b.w	b6950 <hal_i2c_end_transmission>

000b9102 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b9102:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b9104:	2100      	movs	r1, #0
   b9106:	7c00      	ldrb	r0, [r0, #16]
   b9108:	f7fd fc62 	bl	b69d0 <hal_i2c_lock>
}
   b910c:	fab0 f080 	clz	r0, r0
   b9110:	0940      	lsrs	r0, r0, #5
   b9112:	bd08      	pop	{r3, pc}

000b9114 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b9114:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b9116:	2100      	movs	r1, #0
   b9118:	7c00      	ldrb	r0, [r0, #16]
   b911a:	f7fd fc61 	bl	b69e0 <hal_i2c_unlock>
}
   b911e:	fab0 f080 	clz	r0, r0
   b9122:	0940      	lsrs	r0, r0, #5
   b9124:	bd08      	pop	{r3, pc}

000b9126 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9126:	2300      	movs	r3, #0
   b9128:	6840      	ldr	r0, [r0, #4]
   b912a:	461a      	mov	r2, r3
   b912c:	f7fd bd80 	b.w	b6c30 <network_connect>

000b9130 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9130:	6840      	ldr	r0, [r0, #4]
   b9132:	2200      	movs	r2, #0
   b9134:	2102      	movs	r1, #2
   b9136:	f7fd bd8b 	b.w	b6c50 <network_disconnect>

000b913a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b913a:	2200      	movs	r2, #0
   b913c:	6840      	ldr	r0, [r0, #4]
   b913e:	4611      	mov	r1, r2
   b9140:	f7fd bd7e 	b.w	b6c40 <network_connecting>

000b9144 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9144:	2200      	movs	r2, #0
   b9146:	6840      	ldr	r0, [r0, #4]
   b9148:	4611      	mov	r1, r2
   b914a:	f7fd bd89 	b.w	b6c60 <network_ready>

000b914e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b914e:	2300      	movs	r3, #0
   b9150:	6840      	ldr	r0, [r0, #4]
   b9152:	461a      	mov	r2, r3
   b9154:	4619      	mov	r1, r3
   b9156:	f7fd bd8b 	b.w	b6c70 <network_on>

000b915a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b915a:	2300      	movs	r3, #0
   b915c:	6840      	ldr	r0, [r0, #4]
   b915e:	461a      	mov	r2, r3
   b9160:	4619      	mov	r1, r3
   b9162:	f7fd bd8d 	b.w	b6c80 <network_off>

000b9166 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9166:	6840      	ldr	r0, [r0, #4]
   b9168:	2100      	movs	r1, #0
   b916a:	f7fd bdb1 	b.w	b6cd0 <network_is_on>

000b916e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b916e:	6840      	ldr	r0, [r0, #4]
   b9170:	2100      	movs	r1, #0
   b9172:	f7fd bdb5 	b.w	b6ce0 <network_is_off>

000b9176 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9176:	6840      	ldr	r0, [r0, #4]
   b9178:	2200      	movs	r2, #0
   b917a:	f081 0101 	eor.w	r1, r1, #1
   b917e:	f7fd bd87 	b.w	b6c90 <network_listen>

000b9182 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9182:	6840      	ldr	r0, [r0, #4]
   b9184:	2200      	movs	r2, #0
   b9186:	f7fd bd93 	b.w	b6cb0 <network_set_listen_timeout>

000b918a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b918a:	2200      	movs	r2, #0
   b918c:	6840      	ldr	r0, [r0, #4]
   b918e:	4611      	mov	r1, r2
   b9190:	f7fd bd96 	b.w	b6cc0 <network_get_listen_timeout>

000b9194 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9194:	2200      	movs	r2, #0
   b9196:	6840      	ldr	r0, [r0, #4]
   b9198:	4611      	mov	r1, r2
   b919a:	f7fd bd81 	b.w	b6ca0 <network_listening>

000b919e <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b919e:	6840      	ldr	r0, [r0, #4]
   b91a0:	2100      	movs	r1, #0
   b91a2:	f7fd bdad 	b.w	b6d00 <network_is_preferred>

000b91a6 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b91a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b91aa:	b095      	sub	sp, #84	; 0x54
   b91ac:	4614      	mov	r4, r2
   b91ae:	460d      	mov	r5, r1
   b91b0:	4607      	mov	r7, r0
    IPAddress addr;
   b91b2:	f7ff fda7 	bl	b8d04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b91b6:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b91b8:	221c      	movs	r2, #28
   b91ba:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b91bc:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b91be:	f000 fbe7 	bl	b9990 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b91c2:	2340      	movs	r3, #64	; 0x40
   b91c4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b91c6:	4620      	mov	r0, r4
   b91c8:	466b      	mov	r3, sp
   b91ca:	aa0c      	add	r2, sp, #48	; 0x30
   b91cc:	2100      	movs	r1, #0
   b91ce:	f7fd fadf 	bl	b6790 <netdb_getaddrinfo>
    if (!r) {
   b91d2:	4604      	mov	r4, r0
   b91d4:	2800      	cmp	r0, #0
   b91d6:	d14b      	bne.n	b9270 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b91d8:	4602      	mov	r2, r0
   b91da:	2101      	movs	r1, #1
   b91dc:	6868      	ldr	r0, [r5, #4]
   b91de:	f7fd fd3f 	bl	b6c60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b91e2:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b91e4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b91e6:	4622      	mov	r2, r4
   b91e8:	6868      	ldr	r0, [r5, #4]
   b91ea:	f7fd fd39 	bl	b6c60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b91ee:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b91f0:	4681      	mov	r9, r0
        bool ok = false;
   b91f2:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b91f4:	2e00      	cmp	r6, #0
   b91f6:	d03b      	beq.n	b9270 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b91f8:	2900      	cmp	r1, #0
   b91fa:	d139      	bne.n	b9270 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b91fc:	6873      	ldr	r3, [r6, #4]
   b91fe:	2b02      	cmp	r3, #2
   b9200:	d003      	beq.n	b920a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9202:	2b0a      	cmp	r3, #10
   b9204:	d011      	beq.n	b922a <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9206:	69f6      	ldr	r6, [r6, #28]
   b9208:	e7f4      	b.n	b91f4 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b920a:	f1b8 0f00 	cmp.w	r8, #0
   b920e:	d0fa      	beq.n	b9206 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9210:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9212:	a806      	add	r0, sp, #24
   b9214:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9216:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9218:	f7ff fda2 	bl	b8d60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b921c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b921e:	1d3c      	adds	r4, r7, #4
   b9220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9222:	682b      	ldr	r3, [r5, #0]
   b9224:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9226:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9228:	e7ed      	b.n	b9206 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b922a:	f1b9 0f00 	cmp.w	r9, #0
   b922e:	d0ea      	beq.n	b9206 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9230:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9232:	2210      	movs	r2, #16
   b9234:	a801      	add	r0, sp, #4
   b9236:	f000 fbab 	bl	b9990 <memset>
                    a.v = 6;
   b923a:	2306      	movs	r3, #6
   b923c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9240:	ad01      	add	r5, sp, #4
   b9242:	f104 0308 	add.w	r3, r4, #8
   b9246:	3418      	adds	r4, #24
   b9248:	6818      	ldr	r0, [r3, #0]
   b924a:	6859      	ldr	r1, [r3, #4]
   b924c:	462a      	mov	r2, r5
   b924e:	c203      	stmia	r2!, {r0, r1}
   b9250:	3308      	adds	r3, #8
   b9252:	42a3      	cmp	r3, r4
   b9254:	4615      	mov	r5, r2
   b9256:	d1f7      	bne.n	b9248 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9258:	a901      	add	r1, sp, #4
   b925a:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b925c:	ad07      	add	r5, sp, #28
   b925e:	f7ff fd5f 	bl	b8d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9264:	1d3c      	adds	r4, r7, #4
   b9266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9268:	682b      	ldr	r3, [r5, #0]
   b926a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b926c:	4649      	mov	r1, r9
   b926e:	e7ca      	b.n	b9206 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9270:	9800      	ldr	r0, [sp, #0]
   b9272:	f7fd fa85 	bl	b6780 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9276:	4638      	mov	r0, r7
   b9278:	b015      	add	sp, #84	; 0x54
   b927a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000b9280 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b9280:	2803      	cmp	r0, #3
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b9282:	4602      	mov	r2, r0
    switch (nif) {
   b9284:	d005      	beq.n	b9292 <_ZN5spark12NetworkClass4fromEm+0x12>
   b9286:	4b04      	ldr	r3, [pc, #16]	; (b9298 <_ZN5spark12NetworkClass4fromEm+0x18>)
   b9288:	4804      	ldr	r0, [pc, #16]	; (b929c <_ZN5spark12NetworkClass4fromEm+0x1c>)
   b928a:	2a04      	cmp	r2, #4
   b928c:	bf18      	it	ne
   b928e:	4618      	movne	r0, r3
   b9290:	4770      	bx	lr
        return Ethernet;
   b9292:	4803      	ldr	r0, [pc, #12]	; (b92a0 <_ZN5spark12NetworkClass4fromEm+0x20>)
}
   b9294:	4770      	bx	lr
   b9296:	bf00      	nop
   b9298:	2003e714 	.word	0x2003e714
   b929c:	2003e6e4 	.word	0x2003e6e4
   b92a0:	2003e65c 	.word	0x2003e65c

000b92a4 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b92a4:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b92a6:	2200      	movs	r2, #0
   b92a8:	6840      	ldr	r0, [r0, #4]
   b92aa:	f7fd fd21 	bl	b6cf0 <network_prefer>
}
   b92ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b92b2:	f7ff bfe5 	b.w	b9280 <_ZN5spark12NetworkClass4fromEm>
	...

000b92b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b92b8:	4b02      	ldr	r3, [pc, #8]	; (b92c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b92ba:	4a03      	ldr	r2, [pc, #12]	; (b92c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b92bc:	601a      	str	r2, [r3, #0]
   b92be:	2200      	movs	r2, #0
   b92c0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b92c2:	4770      	bx	lr
   b92c4:	2003e714 	.word	0x2003e714
   b92c8:	000ba15c 	.word	0x000ba15c

000b92cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b92cc:	f100 0310 	add.w	r3, r0, #16
   b92d0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b92d2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b92d6:	2901      	cmp	r1, #1
   b92d8:	4618      	mov	r0, r3
   b92da:	d108      	bne.n	b92ee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b92dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b92e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b92e4:	3a01      	subs	r2, #1
   b92e6:	f103 0310 	add.w	r3, r3, #16
   b92ea:	d1f2      	bne.n	b92d2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b92ec:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b92ee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b92f0:	bf04      	itt	eq
   b92f2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b92f6:	1852      	addeq	r2, r2, r1
   b92f8:	e7f4      	b.n	b92e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b92fa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b92fa:	b40e      	push	{r1, r2, r3}
   b92fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b92fe:	b088      	sub	sp, #32
   b9300:	af00      	add	r7, sp, #0
   b9302:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9306:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9308:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b930c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b930e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9310:	462b      	mov	r3, r5
   b9312:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9314:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9316:	f7fd fd53 	bl	b6dc0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b931a:	280f      	cmp	r0, #15
   b931c:	687a      	ldr	r2, [r7, #4]
   b931e:	d91a      	bls.n	b9356 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b9320:	f100 0308 	add.w	r3, r0, #8
   b9324:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9328:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b932a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b932e:	1c41      	adds	r1, r0, #1
   b9330:	462b      	mov	r3, r5
   b9332:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9334:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9336:	f7fd fd43 	bl	b6dc0 <vsnprintf>
        if (n > 0) {
   b933a:	1e02      	subs	r2, r0, #0
   b933c:	dd04      	ble.n	b9348 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b933e:	6823      	ldr	r3, [r4, #0]
   b9340:	4669      	mov	r1, sp
   b9342:	689b      	ldr	r3, [r3, #8]
   b9344:	4620      	mov	r0, r4
   b9346:	4798      	blx	r3
   b9348:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b934a:	3720      	adds	r7, #32
   b934c:	46bd      	mov	sp, r7
   b934e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9352:	b003      	add	sp, #12
   b9354:	4770      	bx	lr
    } else if (n > 0) {
   b9356:	2800      	cmp	r0, #0
   b9358:	d0f7      	beq.n	b934a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b935a:	6823      	ldr	r3, [r4, #0]
   b935c:	4602      	mov	r2, r0
   b935e:	689b      	ldr	r3, [r3, #8]
   b9360:	f107 0110 	add.w	r1, r7, #16
   b9364:	4620      	mov	r0, r4
   b9366:	4798      	blx	r3
}
   b9368:	e7ef      	b.n	b934a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b936a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b936a:	b538      	push	{r3, r4, r5, lr}
   b936c:	680b      	ldr	r3, [r1, #0]
   b936e:	6003      	str	r3, [r0, #0]
   b9370:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b9372:	6843      	ldr	r3, [r0, #4]
   b9374:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9376:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b9378:	d008      	beq.n	b938c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b937a:	b115      	cbz	r5, b9382 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b937c:	686b      	ldr	r3, [r5, #4]
   b937e:	3301      	adds	r3, #1
   b9380:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b9382:	6860      	ldr	r0, [r4, #4]
   b9384:	b108      	cbz	r0, b938a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b9386:	f7fd ffa5 	bl	b72d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b938a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b938c:	bd38      	pop	{r3, r4, r5, pc}

000b938e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b938e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9390:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b9392:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9396:	689b      	ldr	r3, [r3, #8]
   b9398:	2201      	movs	r2, #1
   b939a:	f10d 0107 	add.w	r1, sp, #7
   b939e:	4798      	blx	r3
}
   b93a0:	b003      	add	sp, #12
   b93a2:	f85d fb04 	ldr.w	pc, [sp], #4

000b93a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b93a6:	460b      	mov	r3, r1
   b93a8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b93aa:	2200      	movs	r2, #0
   b93ac:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b93ae:	e9c0 2200 	strd	r2, r2, [r0]
   b93b2:	4604      	mov	r4, r0
        t_ = t;
   b93b4:	6083      	str	r3, [r0, #8]
    if (t) {
   b93b6:	b90b      	cbnz	r3, b93bc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b93b8:	4620      	mov	r0, r4
   b93ba:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b93bc:	f7ff ffd5 	bl	b936a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b93c0:	e7fa      	b.n	b93b8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b93c2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b93c2:	6883      	ldr	r3, [r0, #8]
   b93c4:	b1eb      	cbz	r3, b9402 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b93c6:	781a      	ldrb	r2, [r3, #0]
   b93c8:	2a03      	cmp	r2, #3
   b93ca:	d81a      	bhi.n	b9402 <_ZNK5spark9JSONValue4typeEv+0x40>
   b93cc:	e8df f002 	tbb	[pc, r2]
   b93d0:	1b021704 	.word	0x1b021704
   b93d4:	2005      	movs	r0, #5
   b93d6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b93d8:	6802      	ldr	r2, [r0, #0]
   b93da:	685b      	ldr	r3, [r3, #4]
   b93dc:	6852      	ldr	r2, [r2, #4]
   b93de:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b93e0:	282d      	cmp	r0, #45	; 0x2d
   b93e2:	d012      	beq.n	b940a <_ZNK5spark9JSONValue4typeEv+0x48>
   b93e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b93e8:	2b09      	cmp	r3, #9
   b93ea:	d90e      	bls.n	b940a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b93ec:	2874      	cmp	r0, #116	; 0x74
   b93ee:	d00e      	beq.n	b940e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b93f0:	2866      	cmp	r0, #102	; 0x66
   b93f2:	d00c      	beq.n	b940e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b93f4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b93f8:	4258      	negs	r0, r3
   b93fa:	4158      	adcs	r0, r3
   b93fc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b93fe:	2006      	movs	r0, #6
   b9400:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b9402:	2000      	movs	r0, #0
   b9404:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9406:	2004      	movs	r0, #4
   b9408:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b940a:	2003      	movs	r0, #3
   b940c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b940e:	2002      	movs	r0, #2
}
   b9410:	4770      	bx	lr

000b9412 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b9412:	b510      	push	{r4, lr}
   b9414:	4604      	mov	r4, r0
    switch (type()) {
   b9416:	f7ff ffd4 	bl	b93c2 <_ZNK5spark9JSONValue4typeEv>
   b941a:	2802      	cmp	r0, #2
   b941c:	d00e      	beq.n	b943c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b941e:	1ec3      	subs	r3, r0, #3
   b9420:	b2db      	uxtb	r3, r3
   b9422:	2b01      	cmp	r3, #1
   b9424:	d814      	bhi.n	b9450 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9426:	6822      	ldr	r2, [r4, #0]
   b9428:	68a3      	ldr	r3, [r4, #8]
   b942a:	6850      	ldr	r0, [r2, #4]
   b942c:	685b      	ldr	r3, [r3, #4]
}
   b942e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b9432:	220a      	movs	r2, #10
   b9434:	2100      	movs	r1, #0
   b9436:	4418      	add	r0, r3
   b9438:	f000 bbc8 	b.w	b9bcc <strtol>
        const char* const s = d_->json + t_->start;
   b943c:	6822      	ldr	r2, [r4, #0]
   b943e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b9440:	6852      	ldr	r2, [r2, #4]
   b9442:	685b      	ldr	r3, [r3, #4]
   b9444:	5cd0      	ldrb	r0, [r2, r3]
   b9446:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b944a:	4258      	negs	r0, r3
   b944c:	4158      	adcs	r0, r3
}
   b944e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b9450:	2000      	movs	r0, #0
   b9452:	e7fc      	b.n	b944e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9454 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9454:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9456:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9458:	e9c0 3300 	strd	r3, r3, [r0]
   b945c:	4604      	mov	r4, r0
        n_(0) {
   b945e:	480e      	ldr	r0, [pc, #56]	; (b9498 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b9460:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9464:	b1a9      	cbz	r1, b9492 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9466:	780b      	ldrb	r3, [r1, #0]
   b9468:	2b03      	cmp	r3, #3
   b946a:	d006      	beq.n	b947a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b946c:	b98b      	cbnz	r3, b9492 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b946e:	6813      	ldr	r3, [r2, #0]
   b9470:	6858      	ldr	r0, [r3, #4]
   b9472:	684b      	ldr	r3, [r1, #4]
   b9474:	5cc3      	ldrb	r3, [r0, r3]
   b9476:	2b6e      	cmp	r3, #110	; 0x6e
   b9478:	d007      	beq.n	b948a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b947a:	6813      	ldr	r3, [r2, #0]
   b947c:	684d      	ldr	r5, [r1, #4]
   b947e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b9480:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b9482:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9484:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b9486:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b9488:	60e3      	str	r3, [r4, #12]
   b948a:	4611      	mov	r1, r2
   b948c:	4620      	mov	r0, r4
   b948e:	f7ff ff6c 	bl	b936a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9492:	4620      	mov	r0, r4
   b9494:	bd38      	pop	{r3, r4, r5, pc}
   b9496:	bf00      	nop
   b9498:	000b9fbb 	.word	0x000b9fbb

000b949c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b949c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b949e:	2500      	movs	r5, #0
   b94a0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b94a2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b94a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b94aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b94ae:	4604      	mov	r4, r0
   b94b0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b94b2:	b14b      	cbz	r3, b94c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b94b4:	781a      	ldrb	r2, [r3, #0]
   b94b6:	2a01      	cmp	r2, #1
   b94b8:	d106      	bne.n	b94c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b94ba:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b94be:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b94c0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b94c2:	6143      	str	r3, [r0, #20]
   b94c4:	f7ff ff51 	bl	b936a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b94c8:	4620      	mov	r0, r4
   b94ca:	bd38      	pop	{r3, r4, r5, pc}

000b94cc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b94cc:	b510      	push	{r4, lr}
    if (!n_) {
   b94ce:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b94d0:	4604      	mov	r4, r0
    if (!n_) {
   b94d2:	b163      	cbz	r3, b94ee <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b94d4:	6880      	ldr	r0, [r0, #8]
   b94d6:	60e0      	str	r0, [r4, #12]
    --n_;
   b94d8:	3b01      	subs	r3, #1
    ++t_;
   b94da:	3010      	adds	r0, #16
   b94dc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b94de:	6120      	str	r0, [r4, #16]
    --n_;
   b94e0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b94e2:	b113      	cbz	r3, b94ea <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b94e4:	f7ff fef2 	bl	b92cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b94e8:	60a0      	str	r0, [r4, #8]
    return true;
   b94ea:	2001      	movs	r0, #1
   b94ec:	e000      	b.n	b94f0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b94ee:	4618      	mov	r0, r3
}
   b94f0:	bd10      	pop	{r4, pc}

000b94f2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b94f2:	b510      	push	{r4, lr}
    write('}');
   b94f4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b94f6:	4604      	mov	r4, r0
    write('}');
   b94f8:	f7ff ff49 	bl	b938e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b94fc:	2301      	movs	r3, #1
   b94fe:	7123      	strb	r3, [r4, #4]
}
   b9500:	4620      	mov	r0, r4
   b9502:	bd10      	pop	{r4, pc}

000b9504 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9504:	b508      	push	{r3, lr}
    switch (state_) {
   b9506:	7903      	ldrb	r3, [r0, #4]
   b9508:	2b01      	cmp	r3, #1
   b950a:	d002      	beq.n	b9512 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b950c:	2b02      	cmp	r3, #2
   b950e:	d004      	beq.n	b951a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b9510:	bd08      	pop	{r3, pc}
        write(',');
   b9512:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9514:	f7ff ff3b 	bl	b938e <_ZN5spark10JSONWriter5writeEc>
}
   b9518:	e7fa      	b.n	b9510 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b951a:	213a      	movs	r1, #58	; 0x3a
   b951c:	e7fa      	b.n	b9514 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b951e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b951e:	b510      	push	{r4, lr}
   b9520:	4604      	mov	r4, r0
    writeSeparator();
   b9522:	f7ff ffef 	bl	b9504 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9526:	4620      	mov	r0, r4
   b9528:	217b      	movs	r1, #123	; 0x7b
   b952a:	f7ff ff30 	bl	b938e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b952e:	2300      	movs	r3, #0
   b9530:	7123      	strb	r3, [r4, #4]
}
   b9532:	4620      	mov	r0, r4
   b9534:	bd10      	pop	{r4, pc}
	...

000b9538 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9538:	b513      	push	{r0, r1, r4, lr}
   b953a:	4604      	mov	r4, r0
   b953c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b953e:	f7ff ffe1 	bl	b9504 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b9542:	6823      	ldr	r3, [r4, #0]
   b9544:	9a01      	ldr	r2, [sp, #4]
   b9546:	68db      	ldr	r3, [r3, #12]
   b9548:	4903      	ldr	r1, [pc, #12]	; (b9558 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b954a:	4620      	mov	r0, r4
   b954c:	4798      	blx	r3
    state_ = NEXT;
   b954e:	2301      	movs	r3, #1
}
   b9550:	4620      	mov	r0, r4
    state_ = NEXT;
   b9552:	7123      	strb	r3, [r4, #4]
}
   b9554:	b002      	add	sp, #8
   b9556:	bd10      	pop	{r4, pc}
   b9558:	000b9dc4 	.word	0x000b9dc4

000b955c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b955c:	b513      	push	{r0, r1, r4, lr}
   b955e:	4604      	mov	r4, r0
   b9560:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9562:	f7ff ffcf 	bl	b9504 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9566:	6823      	ldr	r3, [r4, #0]
   b9568:	9a01      	ldr	r2, [sp, #4]
   b956a:	68db      	ldr	r3, [r3, #12]
   b956c:	4903      	ldr	r1, [pc, #12]	; (b957c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b956e:	4620      	mov	r0, r4
   b9570:	4798      	blx	r3
    state_ = NEXT;
   b9572:	2301      	movs	r3, #1
}
   b9574:	4620      	mov	r0, r4
    state_ = NEXT;
   b9576:	7123      	strb	r3, [r4, #4]
}
   b9578:	b002      	add	sp, #8
   b957a:	bd10      	pop	{r4, pc}
   b957c:	000ba198 	.word	0x000ba198

000b9580 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9584:	460d      	mov	r5, r1
    write('"');
   b9586:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9588:	4690      	mov	r8, r2
   b958a:	4604      	mov	r4, r0
    write('"');
   b958c:	f7ff feff 	bl	b938e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b9590:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9638 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9594:	44a8      	add	r8, r5
    const char *s = str;
   b9596:	462f      	mov	r7, r5
    while (s != end) {
   b9598:	4547      	cmp	r7, r8
   b959a:	46ba      	mov	sl, r7
   b959c:	d03d      	beq.n	b961a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b959e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b95a2:	2e22      	cmp	r6, #34	; 0x22
   b95a4:	d006      	beq.n	b95b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b95a6:	2e5c      	cmp	r6, #92	; 0x5c
   b95a8:	d004      	beq.n	b95b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b95aa:	4630      	mov	r0, r6
   b95ac:	f000 f9b0 	bl	b9910 <isprint>
   b95b0:	2800      	cmp	r0, #0
   b95b2:	d1f1      	bne.n	b9598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b95b4:	6823      	ldr	r3, [r4, #0]
   b95b6:	ebaa 0205 	sub.w	r2, sl, r5
   b95ba:	689b      	ldr	r3, [r3, #8]
   b95bc:	4629      	mov	r1, r5
   b95be:	4620      	mov	r0, r4
   b95c0:	4798      	blx	r3
            write('\\');
   b95c2:	215c      	movs	r1, #92	; 0x5c
   b95c4:	4620      	mov	r0, r4
   b95c6:	f7ff fee2 	bl	b938e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b95ca:	2e0d      	cmp	r6, #13
   b95cc:	d80a      	bhi.n	b95e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b95ce:	2e07      	cmp	r6, #7
   b95d0:	d91c      	bls.n	b960c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b95d2:	f1a6 0308 	sub.w	r3, r6, #8
   b95d6:	2b05      	cmp	r3, #5
   b95d8:	d818      	bhi.n	b960c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b95da:	e8df f003 	tbb	[pc, r3]
   b95de:	0f0d      	.short	0x0f0d
   b95e0:	15131711 	.word	0x15131711
   b95e4:	2e22      	cmp	r6, #34	; 0x22
   b95e6:	d001      	beq.n	b95ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b95e8:	2e5c      	cmp	r6, #92	; 0x5c
   b95ea:	d10f      	bne.n	b960c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b95ec:	4631      	mov	r1, r6
                write('b');
   b95ee:	4620      	mov	r0, r4
   b95f0:	f7ff fecd 	bl	b938e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b95f4:	463d      	mov	r5, r7
    while (s != end) {
   b95f6:	e7cf      	b.n	b9598 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b95f8:	2162      	movs	r1, #98	; 0x62
   b95fa:	e7f8      	b.n	b95ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b95fc:	2174      	movs	r1, #116	; 0x74
   b95fe:	e7f6      	b.n	b95ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b9600:	216e      	movs	r1, #110	; 0x6e
   b9602:	e7f4      	b.n	b95ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9604:	2166      	movs	r1, #102	; 0x66
   b9606:	e7f2      	b.n	b95ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b9608:	2172      	movs	r1, #114	; 0x72
   b960a:	e7f0      	b.n	b95ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b960c:	6823      	ldr	r3, [r4, #0]
   b960e:	4632      	mov	r2, r6
   b9610:	68db      	ldr	r3, [r3, #12]
   b9612:	4649      	mov	r1, r9
   b9614:	4620      	mov	r0, r4
   b9616:	4798      	blx	r3
                break;
   b9618:	e7ec      	b.n	b95f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b961a:	42bd      	cmp	r5, r7
   b961c:	d005      	beq.n	b962a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b961e:	6823      	ldr	r3, [r4, #0]
   b9620:	1b7a      	subs	r2, r7, r5
   b9622:	689b      	ldr	r3, [r3, #8]
   b9624:	4629      	mov	r1, r5
   b9626:	4620      	mov	r0, r4
   b9628:	4798      	blx	r3
    }
    write('"');
   b962a:	2122      	movs	r1, #34	; 0x22
   b962c:	4620      	mov	r0, r4
   b962e:	f7ff feae 	bl	b938e <_ZN5spark10JSONWriter5writeEc>
}
   b9632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9636:	bf00      	nop
   b9638:	000ba19b 	.word	0x000ba19b

000b963c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b963c:	b513      	push	{r0, r1, r4, lr}
   b963e:	4604      	mov	r4, r0
   b9640:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9644:	f7ff ff5e 	bl	b9504 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b9648:	4620      	mov	r0, r4
   b964a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b964e:	f7ff ff97 	bl	b9580 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b9652:	2302      	movs	r3, #2
}
   b9654:	4620      	mov	r0, r4
    state_ = VALUE;
   b9656:	7123      	strb	r3, [r4, #4]
}
   b9658:	b002      	add	sp, #8
   b965a:	bd10      	pop	{r4, pc}

000b965c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b965c:	b513      	push	{r0, r1, r4, lr}
   b965e:	4604      	mov	r4, r0
   b9660:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9664:	f7ff ff4e 	bl	b9504 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9668:	4620      	mov	r0, r4
   b966a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b966e:	f7ff ff87 	bl	b9580 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b9672:	2301      	movs	r3, #1
}
   b9674:	4620      	mov	r0, r4
    state_ = NEXT;
   b9676:	7123      	strb	r3, [r4, #4]
}
   b9678:	b002      	add	sp, #8
   b967a:	bd10      	pop	{r4, pc}

000b967c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b967c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b967e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9680:	d902      	bls.n	b9688 <pinAvailable+0xc>
    return false;
   b9682:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9684:	b002      	add	sp, #8
   b9686:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9688:	f1a0 030b 	sub.w	r3, r0, #11
   b968c:	2b02      	cmp	r3, #2
   b968e:	d81a      	bhi.n	b96c6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9690:	4c17      	ldr	r4, [pc, #92]	; (b96f0 <pinAvailable+0x74>)
   b9692:	7821      	ldrb	r1, [r4, #0]
   b9694:	f3bf 8f5b 	dmb	ish
   b9698:	f011 0101 	ands.w	r1, r1, #1
   b969c:	d10b      	bne.n	b96b6 <pinAvailable+0x3a>
   b969e:	4620      	mov	r0, r4
   b96a0:	9101      	str	r1, [sp, #4]
   b96a2:	f7fb f939 	bl	b4918 <__cxa_guard_acquire>
   b96a6:	9901      	ldr	r1, [sp, #4]
   b96a8:	b128      	cbz	r0, b96b6 <pinAvailable+0x3a>
   b96aa:	4812      	ldr	r0, [pc, #72]	; (b96f4 <pinAvailable+0x78>)
   b96ac:	f7fd fc1b 	bl	b6ee6 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b96b0:	4620      	mov	r0, r4
   b96b2:	f7fb f936 	bl	b4922 <__cxa_guard_release>
   b96b6:	4b0f      	ldr	r3, [pc, #60]	; (b96f4 <pinAvailable+0x78>)
   b96b8:	7818      	ldrb	r0, [r3, #0]
   b96ba:	f7fd f9b9 	bl	b6a30 <hal_spi_is_enabled>
   b96be:	2800      	cmp	r0, #0
   b96c0:	d1df      	bne.n	b9682 <pinAvailable+0x6>
  return true; // 'pin' is available
   b96c2:	2001      	movs	r0, #1
   b96c4:	e7de      	b.n	b9684 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b96c6:	2801      	cmp	r0, #1
   b96c8:	d809      	bhi.n	b96de <pinAvailable+0x62>
   b96ca:	f000 f8cb 	bl	b9864 <_Z19__fetch_global_Wirev>
   b96ce:	2100      	movs	r1, #0
   b96d0:	7c00      	ldrb	r0, [r0, #16]
   b96d2:	f7fd f96d 	bl	b69b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b96d6:	f080 0001 	eor.w	r0, r0, #1
   b96da:	b2c0      	uxtb	r0, r0
   b96dc:	e7d2      	b.n	b9684 <pinAvailable+0x8>
   b96de:	3809      	subs	r0, #9
   b96e0:	2801      	cmp	r0, #1
   b96e2:	d8ee      	bhi.n	b96c2 <pinAvailable+0x46>
   b96e4:	f000 f864 	bl	b97b0 <_Z22__fetch_global_Serial1v>
   b96e8:	7c00      	ldrb	r0, [r0, #16]
   b96ea:	f7fd f909 	bl	b6900 <hal_usart_is_enabled>
   b96ee:	e7f2      	b.n	b96d6 <pinAvailable+0x5a>
   b96f0:	2003ddb8 	.word	0x2003ddb8
   b96f4:	2003ddbc 	.word	0x2003ddbc

000b96f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b96f8:	2823      	cmp	r0, #35	; 0x23
{
   b96fa:	b538      	push	{r3, r4, r5, lr}
   b96fc:	4604      	mov	r4, r0
   b96fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9700:	d80a      	bhi.n	b9718 <pinMode+0x20>
   b9702:	29ff      	cmp	r1, #255	; 0xff
   b9704:	d008      	beq.n	b9718 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9706:	f7ff ffb9 	bl	b967c <pinAvailable>
   b970a:	b128      	cbz	r0, b9718 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b970c:	4629      	mov	r1, r5
   b970e:	4620      	mov	r0, r4
}
   b9710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b9714:	f7fd b84c 	b.w	b67b0 <hal_gpio_mode>
}
   b9718:	bd38      	pop	{r3, r4, r5, pc}

000b971a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b971a:	b538      	push	{r3, r4, r5, lr}
   b971c:	4604      	mov	r4, r0
   b971e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b9720:	f7fd f84e 	bl	b67c0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9724:	28ff      	cmp	r0, #255	; 0xff
   b9726:	d010      	beq.n	b974a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9728:	2806      	cmp	r0, #6
   b972a:	d804      	bhi.n	b9736 <digitalWrite+0x1c>
   b972c:	234d      	movs	r3, #77	; 0x4d
   b972e:	fa23 f000 	lsr.w	r0, r3, r0
   b9732:	07c3      	lsls	r3, r0, #31
   b9734:	d409      	bmi.n	b974a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9736:	4620      	mov	r0, r4
   b9738:	f7ff ffa0 	bl	b967c <pinAvailable>
   b973c:	b128      	cbz	r0, b974a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b973e:	4629      	mov	r1, r5
   b9740:	4620      	mov	r0, r4
}
   b9742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b9746:	f7fd b843 	b.w	b67d0 <hal_gpio_write>
}
   b974a:	bd38      	pop	{r3, r4, r5, pc}

000b974c <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b974c:	280d      	cmp	r0, #13
{
   b974e:	b510      	push	{r4, lr}
   b9750:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b9752:	bf9c      	itt	ls
   b9754:	340e      	addls	r4, #14
   b9756:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b9758:	4620      	mov	r0, r4
   b975a:	f7ff ff8f 	bl	b967c <pinAvailable>
   b975e:	b150      	cbz	r0, b9776 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b9760:	2103      	movs	r1, #3
   b9762:	4620      	mov	r0, r4
   b9764:	f7fd f81c 	bl	b67a0 <hal_pin_validate_function>
   b9768:	2803      	cmp	r0, #3
   b976a:	d104      	bne.n	b9776 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b976c:	4620      	mov	r0, r4
}
   b976e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b9772:	f7fd b835 	b.w	b67e0 <hal_adc_read>
}
   b9776:	2000      	movs	r0, #0
   b9778:	bd10      	pop	{r4, pc}

000b977a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b977a:	4770      	bx	lr

000b977c <_Z20acquireSerial1Bufferv>:
{
   b977c:	b538      	push	{r3, r4, r5, lr}
   b977e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9780:	2514      	movs	r5, #20
   b9782:	462a      	mov	r2, r5
   b9784:	2100      	movs	r1, #0
   b9786:	f000 f903 	bl	b9990 <memset>
   b978a:	8025      	strh	r5, [r4, #0]
   b978c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b978e:	4907      	ldr	r1, [pc, #28]	; (b97ac <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9790:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9792:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9794:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9796:	f000 f8af 	bl	b98f8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b979a:	4904      	ldr	r1, [pc, #16]	; (b97ac <_Z20acquireSerial1Bufferv+0x30>)
    };
   b979c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b979e:	4628      	mov	r0, r5
   b97a0:	f000 f8aa 	bl	b98f8 <_ZnajRKSt9nothrow_t>
    };
   b97a4:	60e0      	str	r0, [r4, #12]
}
   b97a6:	4620      	mov	r0, r4
   b97a8:	bd38      	pop	{r3, r4, r5, pc}
   b97aa:	bf00      	nop
   b97ac:	000ba1a1 	.word	0x000ba1a1

000b97b0 <_Z22__fetch_global_Serial1v>:
{
   b97b0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b97b2:	4d0e      	ldr	r5, [pc, #56]	; (b97ec <_Z22__fetch_global_Serial1v+0x3c>)
   b97b4:	7829      	ldrb	r1, [r5, #0]
   b97b6:	f3bf 8f5b 	dmb	ish
   b97ba:	f011 0401 	ands.w	r4, r1, #1
{
   b97be:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b97c0:	d111      	bne.n	b97e6 <_Z22__fetch_global_Serial1v+0x36>
   b97c2:	4628      	mov	r0, r5
   b97c4:	f7fb f8a8 	bl	b4918 <__cxa_guard_acquire>
   b97c8:	b168      	cbz	r0, b97e6 <_Z22__fetch_global_Serial1v+0x36>
   b97ca:	a801      	add	r0, sp, #4
   b97cc:	f7ff ffd6 	bl	b977c <_Z20acquireSerial1Bufferv>
   b97d0:	aa01      	add	r2, sp, #4
   b97d2:	4621      	mov	r1, r4
   b97d4:	4806      	ldr	r0, [pc, #24]	; (b97f0 <_Z22__fetch_global_Serial1v+0x40>)
   b97d6:	f7ff fbe5 	bl	b8fa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b97da:	4628      	mov	r0, r5
   b97dc:	f7fb f8a1 	bl	b4922 <__cxa_guard_release>
   b97e0:	4804      	ldr	r0, [pc, #16]	; (b97f4 <_Z22__fetch_global_Serial1v+0x44>)
   b97e2:	f000 f88e 	bl	b9902 <atexit>
    return serial1;
}
   b97e6:	4802      	ldr	r0, [pc, #8]	; (b97f0 <_Z22__fetch_global_Serial1v+0x40>)
   b97e8:	b007      	add	sp, #28
   b97ea:	bd30      	pop	{r4, r5, pc}
   b97ec:	2003e71c 	.word	0x2003e71c
   b97f0:	2003e720 	.word	0x2003e720
   b97f4:	000b977b 	.word	0x000b977b

000b97f8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b97f8:	4770      	bx	lr

000b97fa <__tcf_1>:
   b97fa:	4770      	bx	lr

000b97fc <_Z17acquireWireBufferv>:
{
   b97fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b97fe:	4b0a      	ldr	r3, [pc, #40]	; (b9828 <_Z17acquireWireBufferv+0x2c>)
   b9800:	6003      	str	r3, [r0, #0]
   b9802:	2301      	movs	r3, #1
{
   b9804:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9806:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9808:	4908      	ldr	r1, [pc, #32]	; (b982c <_Z17acquireWireBufferv+0x30>)
   b980a:	2020      	movs	r0, #32
   b980c:	f000 f874 	bl	b98f8 <_ZnajRKSt9nothrow_t>
	};
   b9810:	2520      	movs	r5, #32
   b9812:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9814:	4905      	ldr	r1, [pc, #20]	; (b982c <_Z17acquireWireBufferv+0x30>)
	};
   b9816:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9818:	4628      	mov	r0, r5
   b981a:	f000 f86d 	bl	b98f8 <_ZnajRKSt9nothrow_t>
	};
   b981e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b9822:	4620      	mov	r0, r4
   b9824:	bd38      	pop	{r3, r4, r5, pc}
   b9826:	bf00      	nop
   b9828:	00010018 	.word	0x00010018
   b982c:	000ba1a1 	.word	0x000ba1a1

000b9830 <_Z18acquireWire1Bufferv>:
{
   b9830:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9832:	4b0a      	ldr	r3, [pc, #40]	; (b985c <_Z18acquireWire1Bufferv+0x2c>)
   b9834:	6003      	str	r3, [r0, #0]
   b9836:	2301      	movs	r3, #1
{
   b9838:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b983a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b983c:	4908      	ldr	r1, [pc, #32]	; (b9860 <_Z18acquireWire1Bufferv+0x30>)
   b983e:	2020      	movs	r0, #32
   b9840:	f000 f85a 	bl	b98f8 <_ZnajRKSt9nothrow_t>
	};
   b9844:	2520      	movs	r5, #32
   b9846:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9848:	4905      	ldr	r1, [pc, #20]	; (b9860 <_Z18acquireWire1Bufferv+0x30>)
	};
   b984a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b984c:	4628      	mov	r0, r5
   b984e:	f000 f853 	bl	b98f8 <_ZnajRKSt9nothrow_t>
	};
   b9852:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b9856:	4620      	mov	r0, r4
   b9858:	bd38      	pop	{r3, r4, r5, pc}
   b985a:	bf00      	nop
   b985c:	00010018 	.word	0x00010018
   b9860:	000ba1a1 	.word	0x000ba1a1

000b9864 <_Z19__fetch_global_Wirev>:
{
   b9864:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9866:	4d0e      	ldr	r5, [pc, #56]	; (b98a0 <_Z19__fetch_global_Wirev+0x3c>)
   b9868:	7829      	ldrb	r1, [r5, #0]
   b986a:	f3bf 8f5b 	dmb	ish
   b986e:	f011 0401 	ands.w	r4, r1, #1
{
   b9872:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9874:	d111      	bne.n	b989a <_Z19__fetch_global_Wirev+0x36>
   b9876:	4628      	mov	r0, r5
   b9878:	f7fb f84e 	bl	b4918 <__cxa_guard_acquire>
   b987c:	b168      	cbz	r0, b989a <_Z19__fetch_global_Wirev+0x36>
   b987e:	4668      	mov	r0, sp
   b9880:	f7ff ffbc 	bl	b97fc <_Z17acquireWireBufferv>
   b9884:	466a      	mov	r2, sp
   b9886:	4621      	mov	r1, r4
   b9888:	4806      	ldr	r0, [pc, #24]	; (b98a4 <_Z19__fetch_global_Wirev+0x40>)
   b988a:	f7ff fbe9 	bl	b9060 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b988e:	4628      	mov	r0, r5
   b9890:	f7fb f847 	bl	b4922 <__cxa_guard_release>
   b9894:	4804      	ldr	r0, [pc, #16]	; (b98a8 <_Z19__fetch_global_Wirev+0x44>)
   b9896:	f000 f834 	bl	b9902 <atexit>
	return wire;
}
   b989a:	4802      	ldr	r0, [pc, #8]	; (b98a4 <_Z19__fetch_global_Wirev+0x40>)
   b989c:	b007      	add	sp, #28
   b989e:	bd30      	pop	{r4, r5, pc}
   b98a0:	2003e738 	.word	0x2003e738
   b98a4:	2003e740 	.word	0x2003e740
   b98a8:	000b97f9 	.word	0x000b97f9

000b98ac <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b98ac:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b98ae:	4c0e      	ldr	r4, [pc, #56]	; (b98e8 <_Z20__fetch_global_Wire1v+0x3c>)
   b98b0:	7823      	ldrb	r3, [r4, #0]
   b98b2:	f3bf 8f5b 	dmb	ish
   b98b6:	07db      	lsls	r3, r3, #31
{
   b98b8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b98ba:	d411      	bmi.n	b98e0 <_Z20__fetch_global_Wire1v+0x34>
   b98bc:	4620      	mov	r0, r4
   b98be:	f7fb f82b 	bl	b4918 <__cxa_guard_acquire>
   b98c2:	b168      	cbz	r0, b98e0 <_Z20__fetch_global_Wire1v+0x34>
   b98c4:	4668      	mov	r0, sp
   b98c6:	f7ff ffb3 	bl	b9830 <_Z18acquireWire1Bufferv>
   b98ca:	466a      	mov	r2, sp
   b98cc:	2101      	movs	r1, #1
   b98ce:	4807      	ldr	r0, [pc, #28]	; (b98ec <_Z20__fetch_global_Wire1v+0x40>)
   b98d0:	f7ff fbc6 	bl	b9060 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b98d4:	4620      	mov	r0, r4
   b98d6:	f7fb f824 	bl	b4922 <__cxa_guard_release>
   b98da:	4805      	ldr	r0, [pc, #20]	; (b98f0 <_Z20__fetch_global_Wire1v+0x44>)
   b98dc:	f000 f811 	bl	b9902 <atexit>
	return wire;
}
   b98e0:	4802      	ldr	r0, [pc, #8]	; (b98ec <_Z20__fetch_global_Wire1v+0x40>)
   b98e2:	b006      	add	sp, #24
   b98e4:	bd10      	pop	{r4, pc}
   b98e6:	bf00      	nop
   b98e8:	2003e73c 	.word	0x2003e73c
   b98ec:	2003e754 	.word	0x2003e754
   b98f0:	000b97fb 	.word	0x000b97fb

000b98f4 <_ZnwjRKSt9nothrow_t>:
   b98f4:	f7fa bffd 	b.w	b48f2 <_Znwj>

000b98f8 <_ZnajRKSt9nothrow_t>:
   b98f8:	f7fa bffd 	b.w	b48f6 <_Znaj>

000b98fc <_ZSt25__throw_bad_function_callv>:
   b98fc:	b508      	push	{r3, lr}
   b98fe:	f7fd fa67 	bl	b6dd0 <abort>

000b9902 <atexit>:
   b9902:	2300      	movs	r3, #0
   b9904:	4601      	mov	r1, r0
   b9906:	461a      	mov	r2, r3
   b9908:	4618      	mov	r0, r3
   b990a:	f000 b969 	b.w	b9be0 <__register_exitproc>
	...

000b9910 <isprint>:
   b9910:	4b02      	ldr	r3, [pc, #8]	; (b991c <isprint+0xc>)
   b9912:	4418      	add	r0, r3
   b9914:	7840      	ldrb	r0, [r0, #1]
   b9916:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b991a:	4770      	bx	lr
   b991c:	000ba236 	.word	0x000ba236

000b9920 <memcmp>:
   b9920:	b510      	push	{r4, lr}
   b9922:	3901      	subs	r1, #1
   b9924:	4402      	add	r2, r0
   b9926:	4290      	cmp	r0, r2
   b9928:	d101      	bne.n	b992e <memcmp+0xe>
   b992a:	2000      	movs	r0, #0
   b992c:	e005      	b.n	b993a <memcmp+0x1a>
   b992e:	7803      	ldrb	r3, [r0, #0]
   b9930:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9934:	42a3      	cmp	r3, r4
   b9936:	d001      	beq.n	b993c <memcmp+0x1c>
   b9938:	1b18      	subs	r0, r3, r4
   b993a:	bd10      	pop	{r4, pc}
   b993c:	3001      	adds	r0, #1
   b993e:	e7f2      	b.n	b9926 <memcmp+0x6>

000b9940 <memcpy>:
   b9940:	440a      	add	r2, r1
   b9942:	4291      	cmp	r1, r2
   b9944:	f100 33ff 	add.w	r3, r0, #4294967295
   b9948:	d100      	bne.n	b994c <memcpy+0xc>
   b994a:	4770      	bx	lr
   b994c:	b510      	push	{r4, lr}
   b994e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9952:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9956:	4291      	cmp	r1, r2
   b9958:	d1f9      	bne.n	b994e <memcpy+0xe>
   b995a:	bd10      	pop	{r4, pc}

000b995c <memmove>:
   b995c:	4288      	cmp	r0, r1
   b995e:	b510      	push	{r4, lr}
   b9960:	eb01 0402 	add.w	r4, r1, r2
   b9964:	d902      	bls.n	b996c <memmove+0x10>
   b9966:	4284      	cmp	r4, r0
   b9968:	4623      	mov	r3, r4
   b996a:	d807      	bhi.n	b997c <memmove+0x20>
   b996c:	1e43      	subs	r3, r0, #1
   b996e:	42a1      	cmp	r1, r4
   b9970:	d008      	beq.n	b9984 <memmove+0x28>
   b9972:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9976:	f803 2f01 	strb.w	r2, [r3, #1]!
   b997a:	e7f8      	b.n	b996e <memmove+0x12>
   b997c:	4402      	add	r2, r0
   b997e:	4601      	mov	r1, r0
   b9980:	428a      	cmp	r2, r1
   b9982:	d100      	bne.n	b9986 <memmove+0x2a>
   b9984:	bd10      	pop	{r4, pc}
   b9986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b998a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b998e:	e7f7      	b.n	b9980 <memmove+0x24>

000b9990 <memset>:
   b9990:	4402      	add	r2, r0
   b9992:	4603      	mov	r3, r0
   b9994:	4293      	cmp	r3, r2
   b9996:	d100      	bne.n	b999a <memset+0xa>
   b9998:	4770      	bx	lr
   b999a:	f803 1b01 	strb.w	r1, [r3], #1
   b999e:	e7f9      	b.n	b9994 <memset+0x4>

000b99a0 <srand>:
   b99a0:	b538      	push	{r3, r4, r5, lr}
   b99a2:	4b10      	ldr	r3, [pc, #64]	; (b99e4 <srand+0x44>)
   b99a4:	681d      	ldr	r5, [r3, #0]
   b99a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b99a8:	4604      	mov	r4, r0
   b99aa:	b9b3      	cbnz	r3, b99da <srand+0x3a>
   b99ac:	2018      	movs	r0, #24
   b99ae:	f7fd f9e7 	bl	b6d80 <malloc>
   b99b2:	4602      	mov	r2, r0
   b99b4:	63a8      	str	r0, [r5, #56]	; 0x38
   b99b6:	b920      	cbnz	r0, b99c2 <srand+0x22>
   b99b8:	4b0b      	ldr	r3, [pc, #44]	; (b99e8 <srand+0x48>)
   b99ba:	480c      	ldr	r0, [pc, #48]	; (b99ec <srand+0x4c>)
   b99bc:	2142      	movs	r1, #66	; 0x42
   b99be:	f7fd fa1f 	bl	b6e00 <__assert_func>
   b99c2:	490b      	ldr	r1, [pc, #44]	; (b99f0 <srand+0x50>)
   b99c4:	4b0b      	ldr	r3, [pc, #44]	; (b99f4 <srand+0x54>)
   b99c6:	e9c0 1300 	strd	r1, r3, [r0]
   b99ca:	4b0b      	ldr	r3, [pc, #44]	; (b99f8 <srand+0x58>)
   b99cc:	6083      	str	r3, [r0, #8]
   b99ce:	230b      	movs	r3, #11
   b99d0:	8183      	strh	r3, [r0, #12]
   b99d2:	2100      	movs	r1, #0
   b99d4:	2001      	movs	r0, #1
   b99d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b99da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b99dc:	2200      	movs	r2, #0
   b99de:	611c      	str	r4, [r3, #16]
   b99e0:	615a      	str	r2, [r3, #20]
   b99e2:	bd38      	pop	{r3, r4, r5, pc}
   b99e4:	2003dd50 	.word	0x2003dd50
   b99e8:	000ba1a2 	.word	0x000ba1a2
   b99ec:	000ba1b9 	.word	0x000ba1b9
   b99f0:	abcd330e 	.word	0xabcd330e
   b99f4:	e66d1234 	.word	0xe66d1234
   b99f8:	0005deec 	.word	0x0005deec

000b99fc <strchr>:
   b99fc:	b2c9      	uxtb	r1, r1
   b99fe:	4603      	mov	r3, r0
   b9a00:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9a04:	b11a      	cbz	r2, b9a0e <strchr+0x12>
   b9a06:	428a      	cmp	r2, r1
   b9a08:	d1f9      	bne.n	b99fe <strchr+0x2>
   b9a0a:	4618      	mov	r0, r3
   b9a0c:	4770      	bx	lr
   b9a0e:	2900      	cmp	r1, #0
   b9a10:	bf18      	it	ne
   b9a12:	2300      	movne	r3, #0
   b9a14:	e7f9      	b.n	b9a0a <strchr+0xe>

000b9a16 <strchrnul>:
   b9a16:	b510      	push	{r4, lr}
   b9a18:	4604      	mov	r4, r0
   b9a1a:	f7ff ffef 	bl	b99fc <strchr>
   b9a1e:	b918      	cbnz	r0, b9a28 <strchrnul+0x12>
   b9a20:	4620      	mov	r0, r4
   b9a22:	f7fa ff23 	bl	b486c <strlen>
   b9a26:	4420      	add	r0, r4
   b9a28:	bd10      	pop	{r4, pc}

000b9a2a <strcpy>:
   b9a2a:	4603      	mov	r3, r0
   b9a2c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9a30:	f803 2b01 	strb.w	r2, [r3], #1
   b9a34:	2a00      	cmp	r2, #0
   b9a36:	d1f9      	bne.n	b9a2c <strcpy+0x2>
   b9a38:	4770      	bx	lr
	...

000b9a3c <strdup>:
   b9a3c:	4b02      	ldr	r3, [pc, #8]	; (b9a48 <strdup+0xc>)
   b9a3e:	4601      	mov	r1, r0
   b9a40:	6818      	ldr	r0, [r3, #0]
   b9a42:	f000 b803 	b.w	b9a4c <_strdup_r>
   b9a46:	bf00      	nop
   b9a48:	2003dd50 	.word	0x2003dd50

000b9a4c <_strdup_r>:
   b9a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9a4e:	4604      	mov	r4, r0
   b9a50:	4608      	mov	r0, r1
   b9a52:	460d      	mov	r5, r1
   b9a54:	f7fa ff0a 	bl	b486c <strlen>
   b9a58:	1c42      	adds	r2, r0, #1
   b9a5a:	4611      	mov	r1, r2
   b9a5c:	4620      	mov	r0, r4
   b9a5e:	9201      	str	r2, [sp, #4]
   b9a60:	f7fd f9be 	bl	b6de0 <_malloc_r>
   b9a64:	4604      	mov	r4, r0
   b9a66:	b118      	cbz	r0, b9a70 <_strdup_r+0x24>
   b9a68:	9a01      	ldr	r2, [sp, #4]
   b9a6a:	4629      	mov	r1, r5
   b9a6c:	f7ff ff68 	bl	b9940 <memcpy>
   b9a70:	4620      	mov	r0, r4
   b9a72:	b003      	add	sp, #12
   b9a74:	bd30      	pop	{r4, r5, pc}

000b9a76 <strncmp>:
   b9a76:	b510      	push	{r4, lr}
   b9a78:	b17a      	cbz	r2, b9a9a <strncmp+0x24>
   b9a7a:	4603      	mov	r3, r0
   b9a7c:	3901      	subs	r1, #1
   b9a7e:	1884      	adds	r4, r0, r2
   b9a80:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9a84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9a88:	4290      	cmp	r0, r2
   b9a8a:	d101      	bne.n	b9a90 <strncmp+0x1a>
   b9a8c:	42a3      	cmp	r3, r4
   b9a8e:	d101      	bne.n	b9a94 <strncmp+0x1e>
   b9a90:	1a80      	subs	r0, r0, r2
   b9a92:	bd10      	pop	{r4, pc}
   b9a94:	2800      	cmp	r0, #0
   b9a96:	d1f3      	bne.n	b9a80 <strncmp+0xa>
   b9a98:	e7fa      	b.n	b9a90 <strncmp+0x1a>
   b9a9a:	4610      	mov	r0, r2
   b9a9c:	e7f9      	b.n	b9a92 <strncmp+0x1c>

000b9a9e <strrchr>:
   b9a9e:	b538      	push	{r3, r4, r5, lr}
   b9aa0:	4603      	mov	r3, r0
   b9aa2:	460c      	mov	r4, r1
   b9aa4:	b969      	cbnz	r1, b9ac2 <strrchr+0x24>
   b9aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9aaa:	f7ff bfa7 	b.w	b99fc <strchr>
   b9aae:	1c43      	adds	r3, r0, #1
   b9ab0:	4605      	mov	r5, r0
   b9ab2:	4621      	mov	r1, r4
   b9ab4:	4618      	mov	r0, r3
   b9ab6:	f7ff ffa1 	bl	b99fc <strchr>
   b9aba:	2800      	cmp	r0, #0
   b9abc:	d1f7      	bne.n	b9aae <strrchr+0x10>
   b9abe:	4628      	mov	r0, r5
   b9ac0:	bd38      	pop	{r3, r4, r5, pc}
   b9ac2:	2500      	movs	r5, #0
   b9ac4:	e7f5      	b.n	b9ab2 <strrchr+0x14>
	...

000b9ac8 <_strtol_l.constprop.0>:
   b9ac8:	2b01      	cmp	r3, #1
   b9aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9ace:	d001      	beq.n	b9ad4 <_strtol_l.constprop.0+0xc>
   b9ad0:	2b24      	cmp	r3, #36	; 0x24
   b9ad2:	d906      	bls.n	b9ae2 <_strtol_l.constprop.0+0x1a>
   b9ad4:	f7fd f98c 	bl	b6df0 <__errno>
   b9ad8:	2316      	movs	r3, #22
   b9ada:	6003      	str	r3, [r0, #0]
   b9adc:	2000      	movs	r0, #0
   b9ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9ae2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9bc8 <_strtol_l.constprop.0+0x100>
   b9ae6:	460d      	mov	r5, r1
   b9ae8:	462e      	mov	r6, r5
   b9aea:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9aee:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9af2:	f017 0708 	ands.w	r7, r7, #8
   b9af6:	d1f7      	bne.n	b9ae8 <_strtol_l.constprop.0+0x20>
   b9af8:	2c2d      	cmp	r4, #45	; 0x2d
   b9afa:	d132      	bne.n	b9b62 <_strtol_l.constprop.0+0x9a>
   b9afc:	782c      	ldrb	r4, [r5, #0]
   b9afe:	2701      	movs	r7, #1
   b9b00:	1cb5      	adds	r5, r6, #2
   b9b02:	2b00      	cmp	r3, #0
   b9b04:	d05b      	beq.n	b9bbe <_strtol_l.constprop.0+0xf6>
   b9b06:	2b10      	cmp	r3, #16
   b9b08:	d109      	bne.n	b9b1e <_strtol_l.constprop.0+0x56>
   b9b0a:	2c30      	cmp	r4, #48	; 0x30
   b9b0c:	d107      	bne.n	b9b1e <_strtol_l.constprop.0+0x56>
   b9b0e:	782c      	ldrb	r4, [r5, #0]
   b9b10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9b14:	2c58      	cmp	r4, #88	; 0x58
   b9b16:	d14d      	bne.n	b9bb4 <_strtol_l.constprop.0+0xec>
   b9b18:	786c      	ldrb	r4, [r5, #1]
   b9b1a:	2310      	movs	r3, #16
   b9b1c:	3502      	adds	r5, #2
   b9b1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9b22:	f108 38ff 	add.w	r8, r8, #4294967295
   b9b26:	f04f 0c00 	mov.w	ip, #0
   b9b2a:	fbb8 f9f3 	udiv	r9, r8, r3
   b9b2e:	4666      	mov	r6, ip
   b9b30:	fb03 8a19 	mls	sl, r3, r9, r8
   b9b34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9b38:	f1be 0f09 	cmp.w	lr, #9
   b9b3c:	d816      	bhi.n	b9b6c <_strtol_l.constprop.0+0xa4>
   b9b3e:	4674      	mov	r4, lr
   b9b40:	42a3      	cmp	r3, r4
   b9b42:	dd24      	ble.n	b9b8e <_strtol_l.constprop.0+0xc6>
   b9b44:	f1bc 0f00 	cmp.w	ip, #0
   b9b48:	db1e      	blt.n	b9b88 <_strtol_l.constprop.0+0xc0>
   b9b4a:	45b1      	cmp	r9, r6
   b9b4c:	d31c      	bcc.n	b9b88 <_strtol_l.constprop.0+0xc0>
   b9b4e:	d101      	bne.n	b9b54 <_strtol_l.constprop.0+0x8c>
   b9b50:	45a2      	cmp	sl, r4
   b9b52:	db19      	blt.n	b9b88 <_strtol_l.constprop.0+0xc0>
   b9b54:	fb06 4603 	mla	r6, r6, r3, r4
   b9b58:	f04f 0c01 	mov.w	ip, #1
   b9b5c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9b60:	e7e8      	b.n	b9b34 <_strtol_l.constprop.0+0x6c>
   b9b62:	2c2b      	cmp	r4, #43	; 0x2b
   b9b64:	bf04      	itt	eq
   b9b66:	782c      	ldrbeq	r4, [r5, #0]
   b9b68:	1cb5      	addeq	r5, r6, #2
   b9b6a:	e7ca      	b.n	b9b02 <_strtol_l.constprop.0+0x3a>
   b9b6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9b70:	f1be 0f19 	cmp.w	lr, #25
   b9b74:	d801      	bhi.n	b9b7a <_strtol_l.constprop.0+0xb2>
   b9b76:	3c37      	subs	r4, #55	; 0x37
   b9b78:	e7e2      	b.n	b9b40 <_strtol_l.constprop.0+0x78>
   b9b7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9b7e:	f1be 0f19 	cmp.w	lr, #25
   b9b82:	d804      	bhi.n	b9b8e <_strtol_l.constprop.0+0xc6>
   b9b84:	3c57      	subs	r4, #87	; 0x57
   b9b86:	e7db      	b.n	b9b40 <_strtol_l.constprop.0+0x78>
   b9b88:	f04f 3cff 	mov.w	ip, #4294967295
   b9b8c:	e7e6      	b.n	b9b5c <_strtol_l.constprop.0+0x94>
   b9b8e:	f1bc 0f00 	cmp.w	ip, #0
   b9b92:	da05      	bge.n	b9ba0 <_strtol_l.constprop.0+0xd8>
   b9b94:	2322      	movs	r3, #34	; 0x22
   b9b96:	6003      	str	r3, [r0, #0]
   b9b98:	4646      	mov	r6, r8
   b9b9a:	b942      	cbnz	r2, b9bae <_strtol_l.constprop.0+0xe6>
   b9b9c:	4630      	mov	r0, r6
   b9b9e:	e79e      	b.n	b9ade <_strtol_l.constprop.0+0x16>
   b9ba0:	b107      	cbz	r7, b9ba4 <_strtol_l.constprop.0+0xdc>
   b9ba2:	4276      	negs	r6, r6
   b9ba4:	2a00      	cmp	r2, #0
   b9ba6:	d0f9      	beq.n	b9b9c <_strtol_l.constprop.0+0xd4>
   b9ba8:	f1bc 0f00 	cmp.w	ip, #0
   b9bac:	d000      	beq.n	b9bb0 <_strtol_l.constprop.0+0xe8>
   b9bae:	1e69      	subs	r1, r5, #1
   b9bb0:	6011      	str	r1, [r2, #0]
   b9bb2:	e7f3      	b.n	b9b9c <_strtol_l.constprop.0+0xd4>
   b9bb4:	2430      	movs	r4, #48	; 0x30
   b9bb6:	2b00      	cmp	r3, #0
   b9bb8:	d1b1      	bne.n	b9b1e <_strtol_l.constprop.0+0x56>
   b9bba:	2308      	movs	r3, #8
   b9bbc:	e7af      	b.n	b9b1e <_strtol_l.constprop.0+0x56>
   b9bbe:	2c30      	cmp	r4, #48	; 0x30
   b9bc0:	d0a5      	beq.n	b9b0e <_strtol_l.constprop.0+0x46>
   b9bc2:	230a      	movs	r3, #10
   b9bc4:	e7ab      	b.n	b9b1e <_strtol_l.constprop.0+0x56>
   b9bc6:	bf00      	nop
   b9bc8:	000ba237 	.word	0x000ba237

000b9bcc <strtol>:
   b9bcc:	4613      	mov	r3, r2
   b9bce:	460a      	mov	r2, r1
   b9bd0:	4601      	mov	r1, r0
   b9bd2:	4802      	ldr	r0, [pc, #8]	; (b9bdc <strtol+0x10>)
   b9bd4:	6800      	ldr	r0, [r0, #0]
   b9bd6:	f7ff bf77 	b.w	b9ac8 <_strtol_l.constprop.0>
   b9bda:	bf00      	nop
   b9bdc:	2003dd50 	.word	0x2003dd50

000b9be0 <__register_exitproc>:
   b9be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9be4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9ca0 <__register_exitproc+0xc0>
   b9be8:	4606      	mov	r6, r0
   b9bea:	f8d8 0000 	ldr.w	r0, [r8]
   b9bee:	461f      	mov	r7, r3
   b9bf0:	460d      	mov	r5, r1
   b9bf2:	4691      	mov	r9, r2
   b9bf4:	f000 f856 	bl	b9ca4 <__retarget_lock_acquire_recursive>
   b9bf8:	4b25      	ldr	r3, [pc, #148]	; (b9c90 <__register_exitproc+0xb0>)
   b9bfa:	681c      	ldr	r4, [r3, #0]
   b9bfc:	b934      	cbnz	r4, b9c0c <__register_exitproc+0x2c>
   b9bfe:	4c25      	ldr	r4, [pc, #148]	; (b9c94 <__register_exitproc+0xb4>)
   b9c00:	601c      	str	r4, [r3, #0]
   b9c02:	4b25      	ldr	r3, [pc, #148]	; (b9c98 <__register_exitproc+0xb8>)
   b9c04:	b113      	cbz	r3, b9c0c <__register_exitproc+0x2c>
   b9c06:	681b      	ldr	r3, [r3, #0]
   b9c08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9c0c:	6863      	ldr	r3, [r4, #4]
   b9c0e:	2b1f      	cmp	r3, #31
   b9c10:	dd07      	ble.n	b9c22 <__register_exitproc+0x42>
   b9c12:	f8d8 0000 	ldr.w	r0, [r8]
   b9c16:	f000 f847 	bl	b9ca8 <__retarget_lock_release_recursive>
   b9c1a:	f04f 30ff 	mov.w	r0, #4294967295
   b9c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9c22:	b34e      	cbz	r6, b9c78 <__register_exitproc+0x98>
   b9c24:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9c28:	b988      	cbnz	r0, b9c4e <__register_exitproc+0x6e>
   b9c2a:	4b1c      	ldr	r3, [pc, #112]	; (b9c9c <__register_exitproc+0xbc>)
   b9c2c:	b923      	cbnz	r3, b9c38 <__register_exitproc+0x58>
   b9c2e:	f8d8 0000 	ldr.w	r0, [r8]
   b9c32:	f000 f838 	bl	b9ca6 <__retarget_lock_release>
   b9c36:	e7f0      	b.n	b9c1a <__register_exitproc+0x3a>
   b9c38:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9c3c:	f7fd f8a0 	bl	b6d80 <malloc>
   b9c40:	2800      	cmp	r0, #0
   b9c42:	d0f4      	beq.n	b9c2e <__register_exitproc+0x4e>
   b9c44:	2300      	movs	r3, #0
   b9c46:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9c4a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9c4e:	6863      	ldr	r3, [r4, #4]
   b9c50:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9c54:	2201      	movs	r2, #1
   b9c56:	409a      	lsls	r2, r3
   b9c58:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9c5c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9c60:	4313      	orrs	r3, r2
   b9c62:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9c66:	2e02      	cmp	r6, #2
   b9c68:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9c6c:	bf02      	ittt	eq
   b9c6e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9c72:	4313      	orreq	r3, r2
   b9c74:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9c78:	6863      	ldr	r3, [r4, #4]
   b9c7a:	f8d8 0000 	ldr.w	r0, [r8]
   b9c7e:	1c5a      	adds	r2, r3, #1
   b9c80:	3302      	adds	r3, #2
   b9c82:	6062      	str	r2, [r4, #4]
   b9c84:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9c88:	f000 f80e 	bl	b9ca8 <__retarget_lock_release_recursive>
   b9c8c:	2000      	movs	r0, #0
   b9c8e:	e7c6      	b.n	b9c1e <__register_exitproc+0x3e>
   b9c90:	2003e7f4 	.word	0x2003e7f4
   b9c94:	2003e768 	.word	0x2003e768
   b9c98:	00000000 	.word	0x00000000
   b9c9c:	000b6d81 	.word	0x000b6d81
   b9ca0:	2003ddb4 	.word	0x2003ddb4

000b9ca4 <__retarget_lock_acquire_recursive>:
   b9ca4:	4770      	bx	lr

000b9ca6 <__retarget_lock_release>:
   b9ca6:	4770      	bx	lr

000b9ca8 <__retarget_lock_release_recursive>:
   b9ca8:	4770      	bx	lr

000b9caa <link_code_end>:
	...

000b9cac <dynalib_user>:
   b9cac:	487d 000b 48b9 000b 48e1 000b 48e5 000b     }H...H...H...H..
   b9cbc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9ccc:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   b9cdc:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   b9cec:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   b9cfc:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   b9d0c:	2075 7325 4d20 444f 2545 3e75 4d00 7861     u %s MODE%u>.Max
   b9d1c:	6f62 6974 2078 6554 7473 5300 656c 7065     botix Test.Sleep
   b9d2c:	6e69 2067 6f66 2072 6925 2500 696c 252c     ing for %i.%li,%
   b9d3c:	352e 2c66 2e25 3230 2c66 2e25 3230 0066     .5f,%.02f,%.02f.
   b9d4c:	6166 6c69 6465 7420 206f 706f 6e65 6320     failed to open c
   b9d5c:	7261 0064 6964 7473 6e61 6563 632e 7673     ard.distance.csv
   b9d6c:	6f00 6570 696e 676e 6420 7369 6174 636e     .opening distanc
   b9d7c:	2e65 7363 2076 6f66 2072 7277 7469 2065     e.csv for write 
   b9d8c:	6166 6c69 6465 5400 7972 6e69 2067 6f74     failed.Trying to
   b9d9c:	6320 6e6f 656e 7463 7000 6275 696c 6873      connect.publish
   b9dac:	6e69 2067 6164 6174 7000 6275 696c 6873     ing data.publish
   b9dbc:	7220 7365 6c75 2074 6425 6d00 7861 7420      result %d.max t
   b9dcc:	6d69 2065 6f66 2072 7570 6c62 7369 6968     ime for publishi
   b9ddc:	676e 7220 6165 6863 6465 7720 7469 6f68     ng reached witho
   b9dec:	7475 7320 6375 6563 7373 203b 6f67 7420     ut success; go t
   b9dfc:	206f 6c73 6565 0070 6f4e 2074 616d 2078     o sleep.Not max 
   b9e0c:	6974 656d 202c 7274 2079 6761 6961 206e     time, try again 
   b9e1c:	6f74 6320 6e6f 656e 7463 6120 646e 7020     to connect and p
   b9e2c:	6275 696c 6873 6700 696f 676e 7420 206f     ublish.going to 
   b9e3c:	6c73 6565 0070 6546 6c65 6e69 2067 6572     sleep.Feeling re
   b9e4c:	7473 656c 7373 0000                         stless..

000b9e54 <_ZTVN8particle11SPISettingsE>:
	...
   b9e5c:	4a15 000b 4929 000b 4993 000b               .J..)I...I..

000b9e68 <_ZTVN5spark10LogHandlerE>:
	...
   b9e78:	4901 000b 492b 000b                         .I..+I..

000b9e80 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9e88:	49b1 000b 49e5 000b 80b5 000b 8259 000b     .I...I......Y...

000b9e98 <_ZTV4File>:
	...
   b9ea0:	4947 000b 49a1 000b 497b 000b 4975 000b     GI...I..{I..uI..
   b9eb0:	492d 000b 4955 000b 494f 000b 4949 000b     -I..UI..OI..II..
   b9ec0:	7493 000b 6177 6574 4c72 7665 6c65 0000     .t..waterLevel..

000b9ed0 <_ZTVN5spark13EthernetClassE>:
	...
   b9ed8:	6e7f 000b 6e75 000b 6e6b 000b 6e61 000b     .n..un..kn..an..
   b9ee8:	6e55 000b 6e49 000b 9167 000b 916f 000b     Un..In..g...o...
   b9ef8:	6e3d 000b 6e35 000b 6e2b 000b 6e21 000b     =n..5n..+n..!n..
   b9f08:	92a5 000b 919f 000b 91a7 000b               ............

000b9f14 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9f14:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   b9f24:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   b9f34:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   b9f44:	6c61 6469 002e 0000                         alid....

000b9f4c <_ZTVN5spark16JSONStreamWriterE>:
	...
   b9f54:	7395 000b 7397 000b 7355 000b 92fb 000b     .s...s..Us......
   b9f64:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   b9f74:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   b9f84:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   b9f94:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   b9fa4:	005b 6f63 6564 3d20 0020 6564 6174 6c69     [.code = .detail
   b9fb4:	2073 203d 0d00 000a 006d 6e6c 6600 006e     s = ....m.ln.fn.
   b9fc4:	6f63 6564 6400 7465 6961 006c               code.detail.

000b9fd0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b9fd8:	7939 000b 7951 000b 80b5 000b 8259 000b     9y..Qy......Y...

000b9fe8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9ff0:	7965 000b 7979 000b 8291 000b 74bd 000b     ey..yy.......t..

000ba000 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   ba008:	74cf 000b 74f5 000b 8019 000b 74bf 000b     .t...t.......t..

000ba018 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   ba020:	74cd 000b 7503 000b 78a1 000b 7525 000b     .t...u...x..%u..
   ba030:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   ba040:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000ba04c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba054:	8761 000b 8767 000b 87a5 000b 8775 000b     a...g.......u...
   ba064:	8763 000b                                   c...

000ba068 <_ZTV9IPAddress>:
	...
   ba070:	8ca1 000b 8c91 000b 8c93 000b               ............

000ba07c <_ZTV9USBSerial>:
	...
   ba084:	8d87 000b 8def 000b 8dc5 000b 7369 000b     ............is..
   ba094:	8db7 000b 8d89 000b 8d99 000b 8de9 000b     ................
   ba0a4:	7493 000b 8da9 000b 8d81 000b               .t..........

000ba0b0 <_ZTVN5spark13CellularClassE>:
	...
   ba0b8:	8eef 000b 8ee5 000b 8edb 000b 8e91 000b     ................
   ba0c8:	8ecf 000b 8ec3 000b 9167 000b 916f 000b     ........g...o...
   ba0d8:	8eb7 000b 8eaf 000b 8ea5 000b 8e9b 000b     ................
   ba0e8:	92a5 000b 919f 000b 91a7 000b               ............

000ba0f4 <_ZTV11USARTSerial>:
	...
   ba0fc:	8f29 000b 8f95 000b 8f6d 000b 7369 000b     ).......m...is..
   ba10c:	8f3d 000b 8f59 000b 8f4b 000b 8f67 000b     =...Y...K...g...
   ba11c:	7493 000b 8f2b 000b 8f2f 000b               .t..+.../...

000ba128 <_ZTV7TwoWire>:
	...
   ba130:	9009 000b 9053 000b 902b 000b 900b 000b     ....S...+.......
   ba140:	9033 000b 903b 000b 9043 000b 904b 000b     3...;...C...K...
   ba150:	7493 000b                                   .t..

000ba154 <_ZTVN5spark12NetworkClassE>:
	...
   ba15c:	9127 000b 9131 000b 913b 000b 9145 000b     '...1...;...E...
   ba16c:	914f 000b 915b 000b 9167 000b 916f 000b     O...[...g...o...
   ba17c:	9177 000b 9183 000b 918b 000b 9195 000b     w...............
   ba18c:	92a5 000b 919f 000b 91a7 000b 7525 7500     ............%u.u
   ba19c:	3025 7834                                    %04x.

000ba1a1 <_ZSt7nothrow>:
   ba1a1:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   ba1b1:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   ba1c1:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   ba1d1:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   ba1e1:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   ba1f1:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   ba201:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   ba211:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   ba221:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   ba231:	646e 632e                                    nd.c.

000ba236 <_ctype_>:
   ba236:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba246:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba256:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba266:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba276:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba286:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba296:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba2a6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba2b6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba337 <link_const_data_end>:
	...

000ba338 <link_constructors_location>:
   ba338:	000b5059 	.word	0x000b5059
   ba33c:	000b6e89 	.word	0x000b6e89
   ba340:	000b7195 	.word	0x000b7195
   ba344:	000b7345 	.word	0x000b7345
   ba348:	000b80a5 	.word	0x000b80a5
   ba34c:	000b8479 	.word	0x000b8479
   ba350:	000b8495 	.word	0x000b8495
   ba354:	000b8ef9 	.word	0x000b8ef9
   ba358:	000b92b9 	.word	0x000b92b9
