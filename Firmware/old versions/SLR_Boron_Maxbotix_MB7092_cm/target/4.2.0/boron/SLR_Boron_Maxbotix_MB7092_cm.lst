
/Users/gracelower/Documents/GitHub/Open-Water-Level/Firmware/SLR_Boron_Maxbotix_MB7092_cm/target/4.2.0/boron/SLR_Boron_Maxbotix_MB7092_cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006194  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba1b0  000ba1b0  0000a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba1d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003dd34  000ba1d8  0001dd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a44  2003ddac  2003ddac  0002ddac  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000ba250  000ba250  0002a250  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba278  000ba278  0002a278  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00193839  00000000  00000000  0002a27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001a525  00000000  00000000  001bdab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000495e0  00000000  00000000  001d7fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000033c0  00000000  00000000  002215ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c8d0  00000000  00000000  0022497a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044368  00000000  00000000  0023124a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00057a0f  00000000  00000000  002755b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001434ca  00000000  00000000  002ccfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000097c4  00000000  00000000  0041048c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fbc3 	bl	b97b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fbe5 	bl	b9808 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003dd34 	.word	0x2003dd34
   b4048:	000ba1d8 	.word	0x000ba1d8
   b404c:	2003ddac 	.word	0x2003ddac
   b4050:	2003ddac 	.word	0x2003ddac
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 fdf7 	bl	b8c50 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000ba18c 	.word	0x000ba18c
   b407c:	000ba1b0 	.word	0x000ba1b0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b91c 	b.w	b42bc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f97d 	bl	b4384 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 bd97 	b.w	b8bc0 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 ba35 	b.w	b6500 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 ba33 	b.w	b6500 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 ba39 	b.w	b6510 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f912 	bl	b62d0 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5f81 	.word	0x000b5f81
   b40b4:	000b9b5c 	.word	0x000b9b5c

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40cc:	6a00      	ldr	r0, [r0, #32]
   b40ce:	6803      	ldr	r3, [r0, #0]
   b40d0:	68db      	ldr	r3, [r3, #12]
   b40d2:	4718      	bx	r3

000b40d4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40d4:	7c03      	ldrb	r3, [r0, #16]
   b40d6:	f013 0308 	ands.w	r3, r3, #8
   b40da:	bf1e      	ittt	ne
   b40dc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40de:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40e0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40e2:	2b00      	cmp	r3, #0
  }
   b40e4:	bfac      	ite	ge
   b40e6:	4618      	movge	r0, r3
   b40e8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40ec:	4770      	bx	lr

000b40ee <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40ee:	4770      	bx	lr

000b40f0 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40f0:	3010      	adds	r0, #16
   b40f2:	f000 be37 	b.w	b4d64 <_ZN7FatFile4syncEv>

000b40f6 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40f6:	3010      	adds	r0, #16
   b40f8:	f000 bd55 	b.w	b4ba6 <_ZN7FatFile4peekEv>

000b40fc <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b40fc:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b40fe:	2201      	movs	r2, #1
   b4100:	f10d 0107 	add.w	r1, sp, #7
   b4104:	3010      	adds	r0, #16
   b4106:	f000 fca0 	bl	b4a4a <_ZN7FatFile4readEPvj>
   b410a:	2801      	cmp	r0, #1
   b410c:	bf0c      	ite	eq
   b410e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4112:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4116:	b003      	add	sp, #12
   b4118:	f85d fb04 	ldr.w	pc, [sp], #4

000b411c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b411c:	3010      	adds	r0, #16
   b411e:	f000 beab 	b.w	b4e78 <_ZN7FatFile5writeEPKvj>

000b4122 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4122:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4124:	2201      	movs	r2, #1
   b4126:	f88d 1007 	strb.w	r1, [sp, #7]
   b412a:	3010      	adds	r0, #16
   b412c:	f10d 0107 	add.w	r1, sp, #7
   b4130:	f000 fea2 	bl	b4e78 <_ZN7FatFile5writeEPKvj>
  }
   b4134:	b003      	add	sp, #12
   b4136:	f85d fb04 	ldr.w	pc, [sp], #4

000b413a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b413a:	b510      	push	{r4, lr}
  }
   b413c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b413e:	4604      	mov	r4, r0
  }
   b4140:	f7ff ffab 	bl	b409a <_ZdlPvj>
   b4144:	4620      	mov	r0, r4
   b4146:	bd10      	pop	{r4, pc}

000b4148 <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b4148:	b510      	push	{r4, lr}
   b414a:	2134      	movs	r1, #52	; 0x34
   b414c:	4604      	mov	r4, r0
   b414e:	f7ff ffa4 	bl	b409a <_ZdlPvj>
   b4152:	4620      	mov	r0, r4
   b4154:	bd10      	pop	{r4, pc}
	...

000b4158 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4158:	4b0a      	ldr	r3, [pc, #40]	; (b4184 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b415a:	b510      	push	{r4, lr}
   b415c:	4604      	mov	r4, r0
   b415e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4160:	f003 faa8 	bl	b76b4 <_ZN5spark10LogManager8instanceEv>
   b4164:	4621      	mov	r1, r4
   b4166:	f003 fce0 	bl	b7b2a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b416a:	f004 fce1 	bl	b8b30 <_Z16_fetch_usbserialv>
   b416e:	f004 fcd3 	bl	b8b18 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4172:	4620      	mov	r0, r4
   b4174:	4b04      	ldr	r3, [pc, #16]	; (b4188 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4176:	f840 3b04 	str.w	r3, [r0], #4
   b417a:	f003 fb71 	bl	b7860 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}
   b4182:	bf00      	nop
   b4184:	000b9d24 	.word	0x000b9d24
   b4188:	000b9d0c 	.word	0x000b9d0c

000b418c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b418c:	b510      	push	{r4, lr}
   b418e:	4604      	mov	r4, r0
    }
   b4190:	f7ff ffe2 	bl	b4158 <_ZN5spark16SerialLogHandlerD1Ev>
   b4194:	4620      	mov	r0, r4
   b4196:	2124      	movs	r1, #36	; 0x24
   b4198:	f7ff ff7f 	bl	b409a <_ZdlPvj>
   b419c:	4620      	mov	r0, r4
   b419e:	bd10      	pop	{r4, pc}

000b41a0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41a0:	b40e      	push	{r1, r2, r3}
   b41a2:	b503      	push	{r0, r1, lr}
   b41a4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b41a6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41a8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41ac:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b41ae:	f004 f992 	bl	b84d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b41b2:	b002      	add	sp, #8
   b41b4:	f85d eb04 	ldr.w	lr, [sp], #4
   b41b8:	b003      	add	sp, #12
   b41ba:	4770      	bx	lr

000b41bc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b41bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b41be:	4604      	mov	r4, r0
   b41c0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b41c2:	7922      	ldrb	r2, [r4, #4]
   b41c4:	68a3      	ldr	r3, [r4, #8]
   b41c6:	b132      	cbz	r2, b41d6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b41c8:	b9a3      	cbnz	r3, b41f4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b41ca:	490b      	ldr	r1, [pc, #44]	; (b41f8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b41cc:	b002      	add	sp, #8
   b41ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b41d2:	f004 b94f 	b.w	b8474 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41d6:	4a09      	ldr	r2, [pc, #36]	; (b41fc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b41d8:	7b26      	ldrb	r6, [r4, #12]
   b41da:	4d09      	ldr	r5, [pc, #36]	; (b4200 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b41dc:	4909      	ldr	r1, [pc, #36]	; (b4204 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b41de:	7b64      	ldrb	r4, [r4, #13]
   b41e0:	2e01      	cmp	r6, #1
   b41e2:	bf18      	it	ne
   b41e4:	4629      	movne	r1, r5
   b41e6:	e9cd 1400 	strd	r1, r4, [sp]
   b41ea:	4907      	ldr	r1, [pc, #28]	; (b4208 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b41ec:	f7ff ffd8 	bl	b41a0 <_ZN5Print6printfEPKcz>
  }
   b41f0:	b002      	add	sp, #8
   b41f2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41f4:	4a05      	ldr	r2, [pc, #20]	; (b420c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b41f6:	e7ef      	b.n	b41d8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b41f8:	000b9b82 	.word	0x000b9b82
   b41fc:	000b9e98 	.word	0x000b9e98
   b4200:	000b9b7e 	.word	0x000b9b7e
   b4204:	000b9b7a 	.word	0x000b9b7a
   b4208:	000b9b98 	.word	0x000b9b98
   b420c:	000b9b71 	.word	0x000b9b71

000b4210 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4210:	b40e      	push	{r1, r2, r3}
   b4212:	b500      	push	{lr}
   b4214:	b08c      	sub	sp, #48	; 0x30
   b4216:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4218:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b421c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4220:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4222:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4226:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4228:	6801      	ldr	r1, [r0, #0]
   b422a:	aa04      	add	r2, sp, #16
   b422c:	201e      	movs	r0, #30
    attr.flags = 0;
   b422e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4232:	f002 f85d 	bl	b62f0 <log_message_v>
}
   b4236:	b00c      	add	sp, #48	; 0x30
   b4238:	f85d eb04 	ldr.w	lr, [sp], #4
   b423c:	b003      	add	sp, #12
   b423e:	4770      	bx	lr

000b4240 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4240:	b530      	push	{r4, r5, lr}
   b4242:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4244:	4b1b      	ldr	r3, [pc, #108]	; (b42b4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4246:	9300      	str	r3, [sp, #0]
   b4248:	7913      	ldrb	r3, [r2, #4]
   b424a:	f88d 3004 	strb.w	r3, [sp, #4]
   b424e:	6893      	ldr	r3, [r2, #8]
   b4250:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4252:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b4256:	8993      	ldrh	r3, [r2, #12]
   b4258:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b425c:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b425e:	460a      	mov	r2, r1
   b4260:	466b      	mov	r3, sp
   b4262:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4266:	4628      	mov	r0, r5
   b4268:	f001 fc50 	bl	b5b0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b426c:	b910      	cbnz	r0, b4274 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b426e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4270:	b005      	add	sp, #20
   b4272:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4274:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4276:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b427a:	4628      	mov	r0, r5
   b427c:	f000 fda8 	bl	b4dd0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4280:	2101      	movs	r1, #1
   b4282:	4620      	mov	r0, r4
   b4284:	f001 faec 	bl	b5860 <_ZN9FatVolume4initEh>
   b4288:	4601      	mov	r1, r0
   b428a:	b168      	cbz	r0, b42a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b428c:	4621      	mov	r1, r4
   b428e:	4628      	mov	r0, r5
   b4290:	f000 fbd5 	bl	b4a3e <_ZN7FatFile8openRootEP9FatVolume>
   b4294:	2800      	cmp	r0, #0
   b4296:	d0ea      	beq.n	b426e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4298:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b429c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b42a0:	d0e5      	beq.n	b426e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b42a2:	4b05      	ldr	r3, [pc, #20]	; (b42b8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b42a4:	601d      	str	r5, [r3, #0]
    return true;
   b42a6:	e7e3      	b.n	b4270 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b42a8:	4620      	mov	r0, r4
   b42aa:	f001 fad9 	bl	b5860 <_ZN9FatVolume4initEh>
   b42ae:	2800      	cmp	r0, #0
   b42b0:	d1ec      	bne.n	b428c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b42b2:	e7dc      	b.n	b426e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b42b4:	000b9cf8 	.word	0x000b9cf8
   b42b8:	2003e644 	.word	0x2003e644

000b42bc <setup>:
// in sleep configuration to avoid reconnection penalty
const unsigned long SECONDS_BETWEEN_MEASUREMENTS = 3600; // What should sampling period be?
// ***** IMPORTANT!!! See note above this const.


void setup(void) {
   b42bc:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b42be:	4809      	ldr	r0, [pc, #36]	; (b42e4 <setup+0x28>)
   b42c0:	2300      	movs	r3, #0
   b42c2:	4619      	mov	r1, r3
   b42c4:	461a      	mov	r2, r3
   b42c6:	6840      	ldr	r0, [r0, #4]
   b42c8:	f002 f8e2 	bl	b6490 <network_off>
    Cellular.off(); // turn off cellular for prelim testing (uncomment)
  }

  // delay(5000); // to see response from begin command

  Serial.begin(9600);
   b42cc:	f004 fc30 	bl	b8b30 <_Z16_fetch_usbserialv>
   b42d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42d4:	f004 fc1c 	bl	b8b10 <_ZN9USBSerial5beginEl>
  Log.info("Maxbotix Test");
   b42d8:	4903      	ldr	r1, [pc, #12]	; (b42e8 <setup+0x2c>)
   b42da:	4804      	ldr	r0, [pc, #16]	; (b42ec <setup+0x30>)
   b42dc:	f7ff ff98 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>

}
   b42e0:	bd08      	pop	{r3, pc}
   b42e2:	bf00      	nop
   b42e4:	2003e654 	.word	0x2003e654
   b42e8:	000b9bb5 	.word	0x000b9bb5
   b42ec:	2003e698 	.word	0x2003e698

000b42f0 <_Z21secondsUntilNextEventv>:
  }
  break;
  }
}

int secondsUntilNextEvent() {
   b42f0:	b510      	push	{r4, lr}

  int current_seconds = Time.now();
   b42f2:	f004 fb45 	bl	b8980 <_ZN9TimeClass3nowEv>
  int seconds_to_sleep = SECONDS_BETWEEN_MEASUREMENTS - (current_seconds % SECONDS_BETWEEN_MEASUREMENTS);
   b42f6:	f44f 6461 	mov.w	r4, #3600	; 0xe10
   b42fa:	fbb0 f2f4 	udiv	r2, r0, r4
   b42fe:	fb02 0014 	mls	r0, r2, r4, r0
   b4302:	1a24      	subs	r4, r4, r0

  Log.info("Sleeping for %i", seconds_to_sleep);
   b4304:	4903      	ldr	r1, [pc, #12]	; (b4314 <_Z21secondsUntilNextEventv+0x24>)
   b4306:	4804      	ldr	r0, [pc, #16]	; (b4318 <_Z21secondsUntilNextEventv+0x28>)
   b4308:	4622      	mov	r2, r4
   b430a:	f7ff ff81 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>

  return seconds_to_sleep;
   b430e:	4620      	mov	r0, r4
   b4310:	bd10      	pop	{r4, pc}
   b4312:	bf00      	nop
   b4314:	000b9bc3 	.word	0x000b9bc3
   b4318:	2003e698 	.word	0x2003e698

000b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b431c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b431e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4322:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4324:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4326:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b432a:	42ae      	cmp	r6, r5
   b432c:	d004      	beq.n	b4338 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b432e:	4628      	mov	r0, r5
   b4330:	f004 f9cd 	bl	b86ce <_ZN6StringD1Ev>
   b4334:	3514      	adds	r5, #20
   b4336:	e7f8      	b.n	b432a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4338:	6820      	ldr	r0, [r4, #0]
   b433a:	f002 f8e9 	bl	b6510 <free>
    AllocatorT::free(data_);
}
   b433e:	4620      	mov	r0, r4
   b4340:	bd70      	pop	{r4, r5, r6, pc}

000b4342 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   b4342:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4344:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   b4346:	2000      	movs	r0, #0
   b4348:	f002 f80a 	bl	b6360 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b434c:	b120      	cbz	r0, b4358 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b434e:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4350:	b913      	cbnz	r3, b4358 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   b4352:	f002 f845 	bl	b63e0 <spark_process>
    }
   b4356:	e7fa      	b.n	b434e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   b4358:	7863      	ldrb	r3, [r4, #1]
   b435a:	f3bf 8f5b 	dmb	ish
   b435e:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   b4360:	b90b      	cbnz	r3, b4366 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   b4362:	2000      	movs	r0, #0
        return this->p_->result();
    }
   b4364:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   b4366:	2000      	movs	r0, #0
   b4368:	f001 fffa 	bl	b6360 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b436c:	b120      	cbz	r0, b4378 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   b436e:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b4370:	b913      	cbnz	r3, b4378 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   b4372:	f002 f835 	bl	b63e0 <spark_process>
    }
   b4376:	e7fa      	b.n	b436e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4378:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   b437a:	2b01      	cmp	r3, #1
   b437c:	d1f1      	bne.n	b4362 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   b437e:	7b20      	ldrb	r0, [r4, #12]
   b4380:	e7f0      	b.n	b4364 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
	...

000b4384 <loop>:
void loop(void) {
   b4384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (state) {
   b4388:	4ea7      	ldr	r6, [pc, #668]	; (b4628 <loop+0x2a4>)
   b438a:	7835      	ldrb	r5, [r6, #0]
   b438c:	2d01      	cmp	r5, #1
void loop(void) {
   b438e:	b099      	sub	sp, #100	; 0x64
  switch (state) {
   b4390:	f000 80b8 	beq.w	b4504 <loop+0x180>
   b4394:	2d02      	cmp	r5, #2
   b4396:	f000 8114 	beq.w	b45c2 <loop+0x23e>
   b439a:	2d00      	cmp	r5, #0
   b439c:	f040 80a3 	bne.w	b44e6 <loop+0x162>
   b43a0:	4da2      	ldr	r5, [pc, #648]	; (b462c <loop+0x2a8>)
   b43a2:	24c8      	movs	r4, #200	; 0xc8
   b43a4:	462f      	mov	r7, r5
      filterArray[sample] = (analogRead(A1));
   b43a6:	2012      	movs	r0, #18
   b43a8:	f004 fcec 	bl	b8d84 <analogRead>
   b43ac:	ee07 0a90 	vmov	s15, r0
   b43b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      delay(50); // to avoid untrasonic interfering
   b43b4:	2032      	movs	r0, #50	; 0x32
      filterArray[sample] = (analogRead(A1));
   b43b6:	ece7 7a01 	vstmia	r7!, {s15}
      delay(50); // to avoid untrasonic interfering
   b43ba:	f002 f8f1 	bl	b65a0 <delay>
    for (int sample = 0; sample < 200; sample++) {
   b43be:	3c01      	subs	r4, #1
   b43c0:	d1f1      	bne.n	b43a6 <loop+0x22>
      for (int j = i + 1; j < 200; j++) {
   b43c2:	3401      	adds	r4, #1
   b43c4:	4629      	mov	r1, r5
   b43c6:	3504      	adds	r5, #4
   b43c8:	462a      	mov	r2, r5
   b43ca:	4623      	mov	r3, r4
        if (filterArray[i] > filterArray[j]) {
   b43cc:	edd1 7a00 	vldr	s15, [r1]
   b43d0:	ecb2 7a01 	vldmia	r2!, {s14}
   b43d4:	eef4 7ac7 	vcmpe.f32	s15, s14
   b43d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      for (int j = i + 1; j < 200; j++) {
   b43dc:	f103 0301 	add.w	r3, r3, #1
          filterArray[i] = filterArray[j];
   b43e0:	bfc4      	itt	gt
   b43e2:	ed81 7a00 	vstrgt	s14, [r1]
          filterArray[j] = swap;
   b43e6:	ed42 7a01 	vstrgt	s15, [r2, #-4]
      for (int j = i + 1; j < 200; j++) {
   b43ea:	2bc8      	cmp	r3, #200	; 0xc8
   b43ec:	d1ee      	bne.n	b43cc <loop+0x48>
    for (int i = 0; i < 199; i++) {
   b43ee:	2cc7      	cmp	r4, #199	; 0xc7
   b43f0:	d1e7      	bne.n	b43c2 <loop+0x3e>
   b43f2:	4d8f      	ldr	r5, [pc, #572]	; (b4630 <loop+0x2ac>)
   b43f4:	24b4      	movs	r4, #180	; 0xb4
    double sum = 0;
   b43f6:	f04f 0800 	mov.w	r8, #0
   b43fa:	f04f 0900 	mov.w	r9, #0
      sum += filterArray[sample];
   b43fe:	f855 0b04 	ldr.w	r0, [r5], #4
   b4402:	f004 ff01 	bl	b9208 <__aeabi_f2d>
   b4406:	4602      	mov	r2, r0
   b4408:	460b      	mov	r3, r1
   b440a:	4640      	mov	r0, r8
   b440c:	4649      	mov	r1, r9
   b440e:	f004 fd9d 	bl	b8f4c <__adddf3>
    for (int sample = 10; sample < 190; sample++) {
   b4412:	3c01      	subs	r4, #1
      sum += filterArray[sample];
   b4414:	4680      	mov	r8, r0
   b4416:	4689      	mov	r9, r1
    for (int sample = 10; sample < 190; sample++) {
   b4418:	d1f1      	bne.n	b43fe <loop+0x7a>
    distance_unconverted = sum / 180;
   b441a:	2200      	movs	r2, #0
   b441c:	4b85      	ldr	r3, [pc, #532]	; (b4634 <loop+0x2b0>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b441e:	f8df 827c 	ldr.w	r8, [pc, #636]	; b469c <loop+0x318>
    real_time = Time.now(); // "Real" time and current millis for logging
   b4422:	4f85      	ldr	r7, [pc, #532]	; (b4638 <loop+0x2b4>)
    distance_unconverted = sum / 180;
   b4424:	f005 f872 	bl	b950c <__aeabi_ddiv>
   b4428:	f005 f958 	bl	b96dc <__aeabi_d2f>
   b442c:	ee07 0a90 	vmov	s15, r0
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b4430:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   b4434:	ee67 7a87 	vmul.f32	s15, s15, s14
    distance_unconverted = sum / 180;
   b4438:	4b80      	ldr	r3, [pc, #512]	; (b463c <loop+0x2b8>)
    range_cm = (float) distance_unconverted * 0.25; // conversion factor for MB7092 XL-MaxSonar-WRMA1; TODO: check new sensor's datasheet
   b443a:	edc8 7a00 	vstr	s15, [r8]
    distance_unconverted = sum / 180;
   b443e:	6018      	str	r0, [r3, #0]
    real_time = Time.now(); // "Real" time and current millis for logging
   b4440:	f004 fa9e 	bl	b8980 <_ZN9TimeClass3nowEv>
   b4444:	6038      	str	r0, [r7, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4446:	f001 fdab 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
    millis_now = millis();
   b444a:	4b7d      	ldr	r3, [pc, #500]	; (b4640 <loop+0x2bc>)
   b444c:	6018      	str	r0, [r3, #0]
    float cellVoltage = batteryMonitor.getVCell();
   b444e:	487d      	ldr	r0, [pc, #500]	; (b4644 <loop+0x2c0>)
   b4450:	f002 fcaa 	bl	b6da8 <_ZN9FuelGauge8getVCellEv>
    float stateOfCharge = batteryMonitor.getSoC();
   b4454:	487b      	ldr	r0, [pc, #492]	; (b4644 <loop+0x2c0>)
    float cellVoltage = batteryMonitor.getVCell();
   b4456:	ee10 5a10 	vmov	r5, s0
    float stateOfCharge = batteryMonitor.getSoC();
   b445a:	f002 fcc1 	bl	b6de0 <_ZN9FuelGauge6getSoCEv>
   b445e:	ee10 0a10 	vmov	r0, s0
    snprintf(data, sizeof(data), "%li,%.5f,%.02f,%.02f", //,%.5f,%.5f,%.5f,%.5f,%.5f,%.02f,%.02f",
   b4462:	f004 fed1 	bl	b9208 <__aeabi_f2d>
   b4466:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b446a:	4628      	mov	r0, r5
   b446c:	f004 fecc 	bl	b9208 <__aeabi_f2d>
   b4470:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4474:	f8d8 0000 	ldr.w	r0, [r8]
   b4478:	f004 fec6 	bl	b9208 <__aeabi_f2d>
   b447c:	e9cd 0100 	strd	r0, r1, [sp]
   b4480:	683b      	ldr	r3, [r7, #0]
   b4482:	4a71      	ldr	r2, [pc, #452]	; (b4648 <loop+0x2c4>)
   b4484:	4871      	ldr	r0, [pc, #452]	; (b464c <loop+0x2c8>)
   b4486:	2178      	movs	r1, #120	; 0x78
   b4488:	f002 f852 	bl	b6530 <snprintf>
    Log.info(data);
   b448c:	496f      	ldr	r1, [pc, #444]	; (b464c <loop+0x2c8>)
   b448e:	4870      	ldr	r0, [pc, #448]	; (b4650 <loop+0x2cc>)
   b4490:	f7ff febe 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4498:	930d      	str	r3, [sp, #52]	; 0x34
  File() {}
   b449a:	4b6e      	ldr	r3, [pc, #440]	; (b4654 <loop+0x2d0>)
   b449c:	930b      	str	r3, [sp, #44]	; 0x2c
      dataMode_{dataMode}
   b449e:	4b6e      	ldr	r3, [pc, #440]	; (b4658 <loop+0x2d4>)
   b44a0:	9307      	str	r3, [sp, #28]
   b44a2:	4b6e      	ldr	r3, [pc, #440]	; (b465c <loop+0x2d8>)
   b44a4:	9309      	str	r3, [sp, #36]	; 0x24
    if (!sd.begin(SD_CHIP_SELECT, SPI_FULL_SPEED)) {
   b44a6:	486e      	ldr	r0, [pc, #440]	; (b4660 <loop+0x2dc>)
    Print() : write_error(0) {}
   b44a8:	940c      	str	r4, [sp, #48]	; 0x30
   b44aa:	2301      	movs	r3, #1
   b44ac:	aa07      	add	r2, sp, #28
   b44ae:	2105      	movs	r1, #5
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b44b0:	940f      	str	r4, [sp, #60]	; 0x3c
   b44b2:	f88d 4020 	strb.w	r4, [sp, #32]
   b44b6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   b44ba:	f7ff fec1 	bl	b4240 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b44be:	b918      	cbnz	r0, b44c8 <loop+0x144>
      Log.info("failed to open card");
   b44c0:	4968      	ldr	r1, [pc, #416]	; (b4664 <loop+0x2e0>)
   b44c2:	4863      	ldr	r0, [pc, #396]	; (b4650 <loop+0x2cc>)
   b44c4:	f7ff fea4 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    return open(m_cwd, path, oflag);
   b44c8:	4967      	ldr	r1, [pc, #412]	; (b4668 <loop+0x2e4>)
   b44ca:	4a68      	ldr	r2, [pc, #416]	; (b466c <loop+0x2e8>)
   b44cc:	6809      	ldr	r1, [r1, #0]
   b44ce:	f244 2302 	movw	r3, #16898	; 0x4202
   b44d2:	a80f      	add	r0, sp, #60	; 0x3c
   b44d4:	f000 fc83 	bl	b4dde <_ZN7FatFile4openEPS_PKci>
    if (!myFile.open("distance.csv", O_RDWR | O_CREAT | O_AT_END)) {
   b44d8:	b940      	cbnz	r0, b44ec <loop+0x168>
      Log.info("opening distance.csv for write failed");
   b44da:	4965      	ldr	r1, [pc, #404]	; (b4670 <loop+0x2ec>)
   b44dc:	485c      	ldr	r0, [pc, #368]	; (b4650 <loop+0x2cc>)
   b44de:	f7ff fe97 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        state = SLEEP_STATE;
   b44e2:	2302      	movs	r3, #2
   b44e4:	7033      	strb	r3, [r6, #0]
}
   b44e6:	b019      	add	sp, #100	; 0x64
   b44e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      myFile.print(data);
   b44ec:	4957      	ldr	r1, [pc, #348]	; (b464c <loop+0x2c8>)
   b44ee:	a80b      	add	r0, sp, #44	; 0x2c
   b44f0:	f003 ffc0 	bl	b8474 <_ZN5Print5printEPKc>
      myFile.print("\n"); // put next data on new line
   b44f4:	495f      	ldr	r1, [pc, #380]	; (b4674 <loop+0x2f0>)
   b44f6:	a80b      	add	r0, sp, #44	; 0x2c
   b44f8:	f003 ffbc 	bl	b8474 <_ZN5Print5printEPKc>
      myFile.close();
   b44fc:	a80f      	add	r0, sp, #60	; 0x3c
   b44fe:	f000 fc67 	bl	b4dd0 <_ZN7FatFile5closeEv>
      state = SLEEP_STATE;
   b4502:	e7ee      	b.n	b44e2 <loop+0x15e>
   b4504:	f001 fd4c 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b4508:	4f5b      	ldr	r7, [pc, #364]	; (b4678 <loop+0x2f4>)
        Log.info("Trying to connect");
   b450a:	f8df 8194 	ldr.w	r8, [pc, #404]	; b46a0 <loop+0x31c>
   b450e:	4d50      	ldr	r5, [pc, #320]	; (b4650 <loop+0x2cc>)
          Log.info("max time for publishing reached without success; go to sleep");
   b4510:	f8df 9190 	ldr.w	r9, [pc, #400]	; b46a4 <loop+0x320>
    stateTime = millis();
   b4514:	6038      	str	r0, [r7, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4516:	f001 ff73 	bl	b6400 <spark_cloud_flag_connected>
      if (Particle.connected() == false) {
   b451a:	b928      	cbnz	r0, b4528 <loop+0x1a4>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b451c:	f001 ff68 	bl	b63f0 <spark_cloud_flag_connect>
        Log.info("Trying to connect");
   b4520:	4641      	mov	r1, r8
   b4522:	4628      	mov	r0, r5
   b4524:	f7ff fe74 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4528:	f001 ff6a 	bl	b6400 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   b452c:	4604      	mov	r4, r0
   b452e:	2800      	cmp	r0, #0
   b4530:	d02d      	beq.n	b458e <loop+0x20a>
        Log.info("publishing data");
   b4532:	4952      	ldr	r1, [pc, #328]	; (b467c <loop+0x2f8>)
   b4534:	4846      	ldr	r0, [pc, #280]	; (b4650 <loop+0x2cc>)
   b4536:	f7ff fe6b 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b453a:	4b51      	ldr	r3, [pc, #324]	; (b4680 <loop+0x2fc>)
   b453c:	4a51      	ldr	r2, [pc, #324]	; (b4684 <loop+0x300>)
   b453e:	781b      	ldrb	r3, [r3, #0]
   b4540:	7812      	ldrb	r2, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4542:	4951      	ldr	r1, [pc, #324]	; (b4688 <loop+0x304>)
   b4544:	4313      	orrs	r3, r2
   b4546:	f88d 3000 	strb.w	r3, [sp]
   b454a:	4a40      	ldr	r2, [pc, #256]	; (b464c <loop+0x2c8>)
   b454c:	6809      	ldr	r1, [r1, #0]
   b454e:	233c      	movs	r3, #60	; 0x3c
   b4550:	a80b      	add	r0, sp, #44	; 0x2c
   b4552:	f002 fa05 	bl	b6960 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   b4556:	a80b      	add	r0, sp, #44	; 0x2c
   b4558:	f7ff fef3 	bl	b4342 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
	if (_M_pi != nullptr)
   b455c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b455e:	4605      	mov	r5, r0
   b4560:	b17c      	cbz	r4, b4582 <loop+0x1fe>
      if (--_M_use_count == 0)
   b4562:	6863      	ldr	r3, [r4, #4]
   b4564:	3b01      	subs	r3, #1
   b4566:	6063      	str	r3, [r4, #4]
   b4568:	b95b      	cbnz	r3, b4582 <loop+0x1fe>
          _M_dispose();
   b456a:	6823      	ldr	r3, [r4, #0]
   b456c:	4620      	mov	r0, r4
   b456e:	689b      	ldr	r3, [r3, #8]
   b4570:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4572:	68a3      	ldr	r3, [r4, #8]
   b4574:	3b01      	subs	r3, #1
   b4576:	60a3      	str	r3, [r4, #8]
   b4578:	b91b      	cbnz	r3, b4582 <loop+0x1fe>
            _M_destroy();
   b457a:	6823      	ldr	r3, [r4, #0]
   b457c:	4620      	mov	r0, r4
   b457e:	68db      	ldr	r3, [r3, #12]
   b4580:	4798      	blx	r3
        Log.info("publish result %d", success); 
   b4582:	4942      	ldr	r1, [pc, #264]	; (b468c <loop+0x308>)
   b4584:	4832      	ldr	r0, [pc, #200]	; (b4650 <loop+0x2cc>)
   b4586:	462a      	mov	r2, r5
   b4588:	f7ff fe42 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b458c:	e7a9      	b.n	b44e2 <loop+0x15e>
   b458e:	f001 fd07 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - stateTime >= MAX_TIME_TO_PUBLISH_MS) {
   b4592:	683b      	ldr	r3, [r7, #0]
   b4594:	1ac0      	subs	r0, r0, r3
   b4596:	f644 631f 	movw	r3, #19999	; 0x4e1f
   b459a:	4298      	cmp	r0, r3
   b459c:	d906      	bls.n	b45ac <loop+0x228>
          state = SLEEP_STATE;
   b459e:	2302      	movs	r3, #2
          Log.info("max time for publishing reached without success; go to sleep");
   b45a0:	4649      	mov	r1, r9
   b45a2:	4628      	mov	r0, r5
          state = SLEEP_STATE;
   b45a4:	7033      	strb	r3, [r6, #0]
          Log.info("max time for publishing reached without success; go to sleep");
   b45a6:	f7ff fe33 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
          isMaxTime = true;
   b45aa:	2401      	movs	r4, #1
        Log.info("Not max time, try again to connect and publish");
   b45ac:	4628      	mov	r0, r5
   b45ae:	4938      	ldr	r1, [pc, #224]	; (b4690 <loop+0x30c>)
   b45b0:	f7ff fe2e 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        delay(500);
   b45b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b45b8:	f001 fff2 	bl	b65a0 <delay>
    while (!isMaxTime) {
   b45bc:	2c00      	cmp	r4, #0
   b45be:	d0aa      	beq.n	b4516 <loop+0x192>
   b45c0:	e791      	b.n	b44e6 <loop+0x162>
    Log.info("going to sleep");
   b45c2:	4934      	ldr	r1, [pc, #208]	; (b4694 <loop+0x310>)
   b45c4:	4822      	ldr	r0, [pc, #136]	; (b4650 <loop+0x2cc>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b45c6:	4c34      	ldr	r4, [pc, #208]	; (b4698 <loop+0x314>)
   b45c8:	f7ff fe22 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    delay(500);
   b45cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b45d0:	f001 ffe6 	bl	b65a0 <delay>
    int wakeInSeconds = secondsUntilNextEvent(); // Calculate how long to sleep 
   b45d4:	f7ff fe8c 	bl	b42f0 <_Z21secondsUntilNextEventv>
   b45d8:	7d23      	ldrb	r3, [r4, #20]
   b45da:	4607      	mov	r7, r0
   b45dc:	2b00      	cmp	r3, #0
   b45de:	f000 808b 	beq.w	b46f8 <loop+0x374>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45e2:	6823      	ldr	r3, [r4, #0]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b45e4:	7225      	strb	r5, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45e6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b45e8:	2b00      	cmp	r3, #0
   b45ea:	d05d      	beq.n	b46a8 <loop+0x324>
            if (start->type == type) {
   b45ec:	889a      	ldrh	r2, [r3, #4]
   b45ee:	2a01      	cmp	r2, #1
   b45f0:	d007      	beq.n	b4602 <loop+0x27e>
            start = start->next;
   b45f2:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b45f4:	e7f8      	b.n	b45e8 <loop+0x264>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b45f6:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b45f8:	2b00      	cmp	r3, #0
   b45fa:	d055      	beq.n	b46a8 <loop+0x324>
            if (start->type == type) {
   b45fc:	889a      	ldrh	r2, [r3, #4]
   b45fe:	2a01      	cmp	r2, #1
   b4600:	d1f9      	bne.n	b45f6 <loop+0x272>
                if (gpioWakeup->pin == pin) {
   b4602:	899a      	ldrh	r2, [r3, #12]
   b4604:	2a02      	cmp	r2, #2
   b4606:	d1f6      	bne.n	b45f6 <loop+0x272>
                    gpioWakeup->mode = mode;
   b4608:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b460a:	7d23      	ldrb	r3, [r4, #20]
   b460c:	2b00      	cmp	r3, #0
   b460e:	d073      	beq.n	b46f8 <loop+0x374>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4610:	6823      	ldr	r3, [r4, #0]
      .duration(wakeInSeconds* 1000L); // Set seconds until wake
   b4612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4616:	68db      	ldr	r3, [r3, #12]
   b4618:	4347      	muls	r7, r0
        if (!start) {
   b461a:	2b00      	cmp	r3, #0
   b461c:	d05a      	beq.n	b46d4 <loop+0x350>
            if (start->type == type) {
   b461e:	889a      	ldrh	r2, [r3, #4]
   b4620:	2a04      	cmp	r2, #4
   b4622:	d07e      	beq.n	b4722 <loop+0x39e>
            start = start->next;
   b4624:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4626:	e7f8      	b.n	b461a <loop+0x296>
   b4628:	2003e638 	.word	0x2003e638
   b462c:	2003de64 	.word	0x2003de64
   b4630:	2003de8c 	.word	0x2003de8c
   b4634:	40668000 	.word	0x40668000
   b4638:	2003e1b0 	.word	0x2003e1b0
   b463c:	2003de60 	.word	0x2003de60
   b4640:	2003e1a8 	.word	0x2003e1a8
   b4644:	2003ddc8 	.word	0x2003ddc8
   b4648:	000b9bd3 	.word	0x000b9bd3
   b464c:	2003dde8 	.word	0x2003dde8
   b4650:	2003e698 	.word	0x2003e698
   b4654:	000b9d3c 	.word	0x000b9d3c
   b4658:	000b9cf8 	.word	0x000b9cf8
   b465c:	02faf080 	.word	0x02faf080
   b4660:	2003e1b4 	.word	0x2003e1b4
   b4664:	000b9be8 	.word	0x000b9be8
   b4668:	2003e644 	.word	0x2003e644
   b466c:	000b9bfc 	.word	0x000b9bfc
   b4670:	000b9c09 	.word	0x000b9c09
   b4674:	000b9e97 	.word	0x000b9e97
   b4678:	2003e63c 	.word	0x2003e63c
   b467c:	000b9c41 	.word	0x000b9c41
   b4680:	2003ddc5 	.word	0x2003ddc5
   b4684:	2003ddc4 	.word	0x2003ddc4
   b4688:	2003dd34 	.word	0x2003dd34
   b468c:	000b9c51 	.word	0x000b9c51
   b4690:	000b9ca0 	.word	0x000b9ca0
   b4694:	000b9ccf 	.word	0x000b9ccf
   b4698:	2003ddd0 	.word	0x2003ddd0
   b469c:	2003e1ac 	.word	0x2003e1ac
   b46a0:	000b9c2f 	.word	0x000b9c2f
   b46a4:	000b9c63 	.word	0x000b9c63
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b46a8:	4920      	ldr	r1, [pc, #128]	; (b472c <loop+0x3a8>)
   b46aa:	2010      	movs	r0, #16
   b46ac:	f004 fc40 	bl	b8f30 <_ZnwjRKSt9nothrow_t>
   b46b0:	4605      	mov	r5, r0
   b46b2:	2800      	cmp	r0, #0
   b46b4:	d037      	beq.n	b4726 <loop+0x3a2>
   b46b6:	2210      	movs	r2, #16
   b46b8:	2100      	movs	r1, #0
   b46ba:	f005 f8a5 	bl	b9808 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b46be:	4b1c      	ldr	r3, [pc, #112]	; (b4730 <loop+0x3ac>)
   b46c0:	602b      	str	r3, [r5, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b46c2:	2301      	movs	r3, #1
   b46c4:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b46c6:	6923      	ldr	r3, [r4, #16]
   b46c8:	60ab      	str	r3, [r5, #8]
            wakeupSource->pin = pin;
   b46ca:	2302      	movs	r3, #2
   b46cc:	81ab      	strh	r3, [r5, #12]
            wakeupSource->mode = mode;
   b46ce:	73ab      	strb	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b46d0:	6125      	str	r5, [r4, #16]
   b46d2:	e79a      	b.n	b460a <loop+0x286>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b46d4:	4915      	ldr	r1, [pc, #84]	; (b472c <loop+0x3a8>)
   b46d6:	2010      	movs	r0, #16
   b46d8:	f004 fc2a 	bl	b8f30 <_ZnwjRKSt9nothrow_t>
   b46dc:	4605      	mov	r5, r0
   b46de:	b310      	cbz	r0, b4726 <loop+0x3a2>
   b46e0:	2210      	movs	r2, #16
   b46e2:	2100      	movs	r1, #0
   b46e4:	f005 f890 	bl	b9808 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b46e8:	4b11      	ldr	r3, [pc, #68]	; (b4730 <loop+0x3ac>)
   b46ea:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b46ec:	2304      	movs	r3, #4
   b46ee:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b46f0:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b46f2:	6125      	str	r5, [r4, #16]
            wakeupSource->ms = ms;
   b46f4:	e9c5 3702 	strd	r3, r7, [r5, #8]
    SystemSleepResult result = System.sleep(config); // Device sleeps here
   b46f8:	490e      	ldr	r1, [pc, #56]	; (b4734 <loop+0x3b0>)
   b46fa:	a80b      	add	r0, sp, #44	; 0x2c
   b46fc:	f004 f8a4 	bl	b8848 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    Log.info("Feeling restless");
   b4700:	490d      	ldr	r1, [pc, #52]	; (b4738 <loop+0x3b4>)
   b4702:	480e      	ldr	r0, [pc, #56]	; (b473c <loop+0x3b8>)
   b4704:	f7ff fd84 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4708:	f001 fc4a 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   b470c:	4b0c      	ldr	r3, [pc, #48]	; (b4740 <loop+0x3bc>)
   b470e:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   b4710:	980b      	ldr	r0, [sp, #44]	; 0x2c
    state = DATALOG_STATE;
   b4712:	2300      	movs	r3, #0
   b4714:	7033      	strb	r3, [r6, #0]
   b4716:	2800      	cmp	r0, #0
   b4718:	f43f aee5 	beq.w	b44e6 <loop+0x162>
            free(wakeupSource_);
   b471c:	f001 fef8 	bl	b6510 <free>
}
   b4720:	e6e1      	b.n	b44e6 <loop+0x162>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4722:	60df      	str	r7, [r3, #12]
                return *this;
   b4724:	e7e8      	b.n	b46f8 <loop+0x374>
                valid_ = false;
   b4726:	7525      	strb	r5, [r4, #20]
                return *this;
   b4728:	e7e6      	b.n	b46f8 <loop+0x374>
   b472a:	bf00      	nop
   b472c:	000ba018 	.word	0x000ba018
   b4730:	00030010 	.word	0x00030010
   b4734:	2003ddd0 	.word	0x2003ddd0
   b4738:	000b9cde 	.word	0x000b9cde
   b473c:	2003e698 	.word	0x2003e698
   b4740:	2003e63c 	.word	0x2003e63c

000b4744 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4744:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4748:	4604      	mov	r4, r0
   b474a:	460d      	mov	r5, r1
   b474c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b474e:	d916      	bls.n	b477e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4750:	4290      	cmp	r0, r2
   b4752:	d215      	bcs.n	b4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4754:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4758:	1a75      	subs	r5, r6, r1
   b475a:	f1a1 0714 	sub.w	r7, r1, #20
   b475e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4760:	42b7      	cmp	r7, r6
   b4762:	d01c      	beq.n	b479e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4764:	b12c      	cbz	r4, b4772 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4766:	4631      	mov	r1, r6
   b4768:	4620      	mov	r0, r4
   b476a:	f004 f819 	bl	b87a0 <_ZN6StringC1EOS_>
   b476e:	7c33      	ldrb	r3, [r6, #16]
   b4770:	7423      	strb	r3, [r4, #16]
   b4772:	4630      	mov	r0, r6
   b4774:	f003 ffab 	bl	b86ce <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4778:	3e14      	subs	r6, #20
   b477a:	3c14      	subs	r4, #20
   b477c:	e7f0      	b.n	b4760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b477e:	d00e      	beq.n	b479e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4780:	42b5      	cmp	r5, r6
   b4782:	d00c      	beq.n	b479e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4784:	b12c      	cbz	r4, b4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4786:	4629      	mov	r1, r5
   b4788:	4620      	mov	r0, r4
   b478a:	f004 f809 	bl	b87a0 <_ZN6StringC1EOS_>
   b478e:	7c2b      	ldrb	r3, [r5, #16]
   b4790:	7423      	strb	r3, [r4, #16]
   b4792:	4628      	mov	r0, r5
   b4794:	f003 ff9b 	bl	b86ce <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4798:	3514      	adds	r5, #20
   b479a:	3414      	adds	r4, #20
   b479c:	e7f0      	b.n	b4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b47a4:	2300      	movs	r3, #0
   b47a6:	e9c0 3300 	strd	r3, r3, [r0]
   b47aa:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47ac:	684f      	ldr	r7, [r1, #4]
   b47ae:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b47b0:	4604      	mov	r4, r0
   b47b2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b47b4:	dd23      	ble.n	b47fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b47b6:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b47ba:	fb08 f007 	mul.w	r0, r8, r7
   b47be:	f001 fe9f 	bl	b6500 <malloc>
            if (!d) {
   b47c2:	4605      	mov	r5, r0
   b47c4:	b1d8      	cbz	r0, b47fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b47c6:	e9d4 1200 	ldrd	r1, r2, [r4]
   b47ca:	fb08 1202 	mla	r2, r8, r2, r1
   b47ce:	f7ff ffb9 	bl	b4744 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b47d2:	6820      	ldr	r0, [r4, #0]
   b47d4:	f001 fe9c 	bl	b6510 <free>
        data_ = d;
   b47d8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b47da:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b47dc:	e9d6 7300 	ldrd	r7, r3, [r6]
   b47e0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b47e4:	45b8      	cmp	r8, r7
   b47e6:	d008      	beq.n	b47fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b47e8:	4639      	mov	r1, r7
   b47ea:	4628      	mov	r0, r5
   b47ec:	f003 fff2 	bl	b87d4 <_ZN6StringC1ERKS_>
   b47f0:	7c3b      	ldrb	r3, [r7, #16]
   b47f2:	742b      	strb	r3, [r5, #16]
   b47f4:	3714      	adds	r7, #20
   b47f6:	3514      	adds	r5, #20
   b47f8:	e7f4      	b.n	b47e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b47fa:	6873      	ldr	r3, [r6, #4]
   b47fc:	6063      	str	r3, [r4, #4]
}
   b47fe:	4620      	mov	r0, r4
   b4800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4804 <_GLOBAL__sub_I_sd>:
        val_(val) {
   b4804:	4b41      	ldr	r3, [pc, #260]	; (b490c <_GLOBAL__sub_I_sd+0x108>)
   b4806:	2201      	movs	r2, #1
   b4808:	b570      	push	{r4, r5, r6, lr}
   b480a:	701a      	strb	r2, [r3, #0]
   b480c:	4b40      	ldr	r3, [pc, #256]	; (b4910 <_GLOBAL__sub_I_sd+0x10c>)
  SdFat() {
   b480e:	4c41      	ldr	r4, [pc, #260]	; (b4914 <_GLOBAL__sub_I_sd+0x110>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4810:	4d41      	ldr	r5, [pc, #260]	; (b4918 <_GLOBAL__sub_I_sd+0x114>)
  {
   b4812:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b4816:	2108      	movs	r1, #8
   b4818:	7019      	strb	r1, [r3, #0]
   b481a:	2164      	movs	r1, #100	; 0x64
   b481c:	2300      	movs	r3, #0
   b481e:	f8c4 1460 	str.w	r1, [r4, #1120]	; 0x460
   b4822:	493e      	ldr	r1, [pc, #248]	; (b491c <_GLOBAL__sub_I_sd+0x118>)
   b4824:	6063      	str	r3, [r4, #4]
   b4826:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b482a:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b482e:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   b4832:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b4836:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b483a:	7829      	ldrb	r1, [r5, #0]
   b483c:	f3bf 8f5b 	dmb	ish
   b4840:	4011      	ands	r1, r2
   b4842:	b08e      	sub	sp, #56	; 0x38
   b4844:	d10b      	bne.n	b485e <_GLOBAL__sub_I_sd+0x5a>
   b4846:	4628      	mov	r0, r5
   b4848:	9101      	str	r1, [sp, #4]
   b484a:	f7ff fc35 	bl	b40b8 <__cxa_guard_acquire>
   b484e:	9901      	ldr	r1, [sp, #4]
   b4850:	b128      	cbz	r0, b485e <_GLOBAL__sub_I_sd+0x5a>
   b4852:	4833      	ldr	r0, [pc, #204]	; (b4920 <_GLOBAL__sub_I_sd+0x11c>)
   b4854:	f003 fe7c 	bl	b8550 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4858:	4628      	mov	r0, r5
   b485a:	f7ff fc32 	bl	b40c2 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b485e:	4b30      	ldr	r3, [pc, #192]	; (b4920 <_GLOBAL__sub_I_sd+0x11c>)
   b4860:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
              error_(SYSTEM_ERROR_NONE) {
   b4864:	4b2f      	ldr	r3, [pc, #188]	; (b4924 <_GLOBAL__sub_I_sd+0x120>)
    SleepResult() {}
   b4866:	4a30      	ldr	r2, [pc, #192]	; (b4928 <_GLOBAL__sub_I_sd+0x124>)
   b4868:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b486a:	2400      	movs	r4, #0
   b486c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4870:	2002      	movs	r0, #2
   b4872:	f001 fd5d 	bl	b6330 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4876:	4621      	mov	r1, r4
   b4878:	2001      	movs	r0, #1
   b487a:	f001 fd69 	bl	b6350 <system_thread_set_state>
FuelGauge batteryMonitor;
   b487e:	4621      	mov	r1, r4
   b4880:	482a      	ldr	r0, [pc, #168]	; (b492c <_GLOBAL__sub_I_sd+0x128>)
        filter_(level, filters) {
   b4882:	4d2b      	ldr	r5, [pc, #172]	; (b4930 <_GLOBAL__sub_I_sd+0x12c>)
   b4884:	f002 fa44 	bl	b6d10 <_ZN9FuelGaugeC1Eb>
        capacity_(0) {
   b4888:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b488c:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b488e:	f004 f94f 	bl	b8b30 <_Z16_fetch_usbserialv>
   b4892:	a902      	add	r1, sp, #8
   b4894:	4606      	mov	r6, r0
   b4896:	a805      	add	r0, sp, #20
   b4898:	f7ff ff82 	bl	b47a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b489c:	a905      	add	r1, sp, #20
   b489e:	a808      	add	r0, sp, #32
   b48a0:	f7ff ff7e 	bl	b47a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b48a4:	4b23      	ldr	r3, [pc, #140]	; (b4934 <_GLOBAL__sub_I_sd+0x130>)
   b48a6:	602b      	str	r3, [r5, #0]
   b48a8:	a908      	add	r1, sp, #32
   b48aa:	a80b      	add	r0, sp, #44	; 0x2c
   b48ac:	f7ff ff78 	bl	b47a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b48b0:	aa0b      	add	r2, sp, #44	; 0x2c
   b48b2:	211e      	movs	r1, #30
   b48b4:	1d28      	adds	r0, r5, #4
   b48b6:	f003 fa1b 	bl	b7cf0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b48ba:	a80b      	add	r0, sp, #44	; 0x2c
   b48bc:	f7ff fd2e 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b48c0:	a808      	add	r0, sp, #32
   b48c2:	f7ff fd2b 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b48c6:	4b1c      	ldr	r3, [pc, #112]	; (b4938 <_GLOBAL__sub_I_sd+0x134>)
   b48c8:	602b      	str	r3, [r5, #0]
   b48ca:	622e      	str	r6, [r5, #32]
   b48cc:	a805      	add	r0, sp, #20
   b48ce:	f7ff fd25 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b48d2:	4b1a      	ldr	r3, [pc, #104]	; (b493c <_GLOBAL__sub_I_sd+0x138>)
   b48d4:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b48d6:	f004 f92b 	bl	b8b30 <_Z16_fetch_usbserialv>
   b48da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b48de:	f004 f917 	bl	b8b10 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b48e2:	f002 fee7 	bl	b76b4 <_ZN5spark10LogManager8instanceEv>
   b48e6:	4629      	mov	r1, r5
   b48e8:	f003 f8d8 	bl	b7a9c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b48ec:	a802      	add	r0, sp, #8
   b48ee:	f7ff fd15 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   b48f2:	4b13      	ldr	r3, [pc, #76]	; (b4940 <_GLOBAL__sub_I_sd+0x13c>)
   b48f4:	1d1a      	adds	r2, r3, #4
   b48f6:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b48f8:	4a12      	ldr	r2, [pc, #72]	; (b4944 <_GLOBAL__sub_I_sd+0x140>)
   b48fa:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b48fc:	2201      	movs	r2, #1
   b48fe:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4902:	611c      	str	r4, [r3, #16]
   b4904:	751a      	strb	r2, [r3, #20]
   b4906:	b00e      	add	sp, #56	; 0x38
   b4908:	bd70      	pop	{r4, r5, r6, pc}
   b490a:	bf00      	nop
   b490c:	2003ddc4 	.word	0x2003ddc4
   b4910:	2003ddc5 	.word	0x2003ddc5
   b4914:	2003e1b4 	.word	0x2003e1b4
   b4918:	2003ddac 	.word	0x2003ddac
   b491c:	000b9cf8 	.word	0x000b9cf8
   b4920:	2003ddb0 	.word	0x2003ddb0
   b4924:	2003ddb8 	.word	0x2003ddb8
   b4928:	ffff0000 	.word	0xffff0000
   b492c:	2003ddc8 	.word	0x2003ddc8
   b4930:	2003e184 	.word	0x2003e184
   b4934:	000b9d0c 	.word	0x000b9d0c
   b4938:	000b9ed0 	.word	0x000b9ed0
   b493c:	000b9d24 	.word	0x000b9d24
   b4940:	2003ddd0 	.word	0x2003ddd0
   b4944:	00030010 	.word	0x00030010

000b4948 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b4948:	b538      	push	{r3, r4, r5, lr}
   b494a:	4604      	mov	r4, r0
   b494c:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b494e:	2224      	movs	r2, #36	; 0x24
   b4950:	2100      	movs	r1, #0
   b4952:	f004 ff59 	bl	b9808 <memset>

  m_vol = vol;
   b4956:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b4958:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b495a:	2b10      	cmp	r3, #16
   b495c:	d003      	beq.n	b4966 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b495e:	2b20      	cmp	r3, #32
   b4960:	d006      	beq.n	b4970 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b4962:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b4964:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b4966:	2320      	movs	r3, #32
  m_flags = F_READ;
   b4968:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b496a:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b496c:	70a0      	strb	r0, [r4, #2]
  return true;
   b496e:	e7f9      	b.n	b4964 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b4970:	2340      	movs	r3, #64	; 0x40
   b4972:	e7f9      	b.n	b4968 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b4974 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b4974:	b510      	push	{r4, lr}
   b4976:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4978:	3024      	adds	r0, #36	; 0x24
   b497a:	f000 fe63 	bl	b5644 <_ZN8FatCache4syncEv>
   b497e:	b128      	cbz	r0, b498c <_ZN9FatVolume9cacheSyncEv+0x18>
   b4980:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b4984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4988:	f000 be5c 	b.w	b5644 <_ZN8FatCache4syncEv>
  }
   b498c:	bd10      	pop	{r4, pc}

000b498e <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b498e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4990:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b4992:	f043 0304 	orr.w	r3, r3, #4
   b4996:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4998:	f100 0210 	add.w	r2, r0, #16
   b499c:	6880      	ldr	r0, [r0, #8]
   b499e:	f000 bf07 	b.w	b57b0 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b49a4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b49a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b49a8:	7801      	ldrb	r1, [r0, #0]
   b49aa:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b49ae:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b49b0:	d003      	beq.n	b49ba <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b49b2:	2600      	movs	r6, #0
}
   b49b4:	4630      	mov	r0, r6
   b49b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b49ba:	6942      	ldr	r2, [r0, #20]
   b49bc:	4b17      	ldr	r3, [pc, #92]	; (b4a1c <_ZN7FatFile13addDirClusterEv+0x78>)
   b49be:	429a      	cmp	r2, r3
   b49c0:	d2f7      	bcs.n	b49b2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b49c2:	f7ff ffe4 	bl	b498e <_ZN7FatFile10addClusterEv>
   b49c6:	4606      	mov	r6, r0
   b49c8:	2800      	cmp	r0, #0
   b49ca:	d0f2      	beq.n	b49b2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b49cc:	6921      	ldr	r1, [r4, #16]
   b49ce:	68a0      	ldr	r0, [r4, #8]
   b49d0:	f000 fe83 	bl	b56da <_ZNK9FatVolume17clusterFirstBlockEm>
   b49d4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b49d6:	68a0      	ldr	r0, [r4, #8]
   b49d8:	2205      	movs	r2, #5
   b49da:	4639      	mov	r1, r7
   b49dc:	3024      	adds	r0, #36	; 0x24
   b49de:	f000 fe59 	bl	b5694 <_ZN8FatCache4readEmh>
  if (!pc) {
   b49e2:	4680      	mov	r8, r0
   b49e4:	2800      	cmp	r0, #0
   b49e6:	d0e4      	beq.n	b49b2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b49e8:	4629      	mov	r1, r5
   b49ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   b49ee:	f004 ff0b 	bl	b9808 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b49f2:	2501      	movs	r5, #1
   b49f4:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b49f6:	791a      	ldrb	r2, [r3, #4]
   b49f8:	42aa      	cmp	r2, r5
   b49fa:	d909      	bls.n	b4a10 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b49fc:	6818      	ldr	r0, [r3, #0]
   b49fe:	4642      	mov	r2, r8
   b4a00:	19e9      	adds	r1, r5, r7
   b4a02:	f001 f9b4 	bl	b5d6e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b4a06:	2800      	cmp	r0, #0
   b4a08:	d0d3      	beq.n	b49b2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4a0a:	3501      	adds	r5, #1
   b4a0c:	b2ed      	uxtb	r5, r5
   b4a0e:	e7f1      	b.n	b49f4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b4a10:	6963      	ldr	r3, [r4, #20]
   b4a12:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b4a16:	6163      	str	r3, [r4, #20]
  return true;
   b4a18:	e7cc      	b.n	b49b4 <_ZN7FatFile13addDirClusterEv+0x10>
   b4a1a:	bf00      	nop
   b4a1c:	001ffe00 	.word	0x001ffe00

000b4a20 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b4a20:	b510      	push	{r4, lr}
   b4a22:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b4a24:	6880      	ldr	r0, [r0, #8]
   b4a26:	460a      	mov	r2, r1
   b4a28:	3024      	adds	r0, #36	; 0x24
   b4a2a:	69a1      	ldr	r1, [r4, #24]
   b4a2c:	f000 fe32 	bl	b5694 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4a30:	b120      	cbz	r0, b4a3c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b4a32:	88a3      	ldrh	r3, [r4, #4]
   b4a34:	f003 030f 	and.w	r3, r3, #15
   b4a38:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b4a3c:	bd10      	pop	{r4, pc}

000b4a3e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b4a3e:	7803      	ldrb	r3, [r0, #0]
   b4a40:	b90b      	cbnz	r3, b4a46 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b4a42:	f7ff bf81 	b.w	b4948 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b4a46:	2000      	movs	r0, #0
   b4a48:	4770      	bx	lr

000b4a4a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b4a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b4a4e:	7803      	ldrb	r3, [r0, #0]
   b4a50:	4604      	mov	r4, r0
   b4a52:	4688      	mov	r8, r1
   b4a54:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b4a56:	2b00      	cmp	r3, #0
   b4a58:	d05d      	beq.n	b4b16 <_ZN7FatFile4readEPvj+0xcc>
   b4a5a:	7882      	ldrb	r2, [r0, #2]
   b4a5c:	07d1      	lsls	r1, r2, #31
   b4a5e:	d55a      	bpl.n	b4b16 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b4a60:	071a      	lsls	r2, r3, #28
   b4a62:	d52d      	bpl.n	b4ac0 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b4a64:	69c3      	ldr	r3, [r0, #28]
   b4a66:	6942      	ldr	r2, [r0, #20]
   b4a68:	1a9b      	subs	r3, r3, r2
   b4a6a:	429d      	cmp	r5, r3
   b4a6c:	bf28      	it	cs
   b4a6e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b4a70:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b4a72:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4a76:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b4a7a:	2e00      	cmp	r6, #0
   b4a7c:	f000 808f 	beq.w	b4b9e <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b4a80:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b4a82:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4a84:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b4a86:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b4a88:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4a8c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b4a90:	d51f      	bpl.n	b4ad2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4a92:	6a00      	ldr	r0, [r0, #32]
   b4a94:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b4a96:	68a0      	ldr	r0, [r4, #8]
   b4a98:	f1ba 0f00 	cmp.w	sl, #0
   b4a9c:	d142      	bne.n	b4b24 <_ZN7FatFile4readEPvj+0xda>
   b4a9e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4aa2:	d33f      	bcc.n	b4b24 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b4aa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4aa6:	4299      	cmp	r1, r3
   b4aa8:	d03c      	beq.n	b4b24 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b4aaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4aae:	d252      	bcs.n	b4b56 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b4ab0:	6800      	ldr	r0, [r0, #0]
   b4ab2:	4642      	mov	r2, r8
   b4ab4:	f001 f8d2 	bl	b5c5c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b4ab8:	b368      	cbz	r0, b4b16 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b4aba:	f44f 7700 	mov.w	r7, #512	; 0x200
   b4abe:	e044      	b.n	b4b4a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b4ac0:	069b      	lsls	r3, r3, #26
   b4ac2:	d5d5      	bpl.n	b4a70 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b4ac4:	6883      	ldr	r3, [r0, #8]
   b4ac6:	891a      	ldrh	r2, [r3, #8]
   b4ac8:	6943      	ldr	r3, [r0, #20]
   b4aca:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b4ace:	b29b      	uxth	r3, r3
   b4ad0:	e7cb      	b.n	b4a6a <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b4ad2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b4ad6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b4ada:	f1ba 0f00 	cmp.w	sl, #0
   b4ade:	d108      	bne.n	b4af2 <_ZN7FatFile4readEPvj+0xa8>
   b4ae0:	f1b9 0f00 	cmp.w	r9, #0
   b4ae4:	d105      	bne.n	b4af2 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b4ae6:	b95b      	cbnz	r3, b4b00 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4ae8:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b4aea:	bf4c      	ite	mi
   b4aec:	6a03      	ldrmi	r3, [r0, #32]
   b4aee:	6a23      	ldrpl	r3, [r4, #32]
   b4af0:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4af2:	6921      	ldr	r1, [r4, #16]
   b4af4:	68a0      	ldr	r0, [r4, #8]
   b4af6:	f000 fdf0 	bl	b56da <_ZNK9FatVolume17clusterFirstBlockEm>
   b4afa:	eb09 0100 	add.w	r1, r9, r0
   b4afe:	e7ca      	b.n	b4a96 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4b00:	6921      	ldr	r1, [r4, #16]
   b4b02:	465a      	mov	r2, fp
   b4b04:	f000 fdef 	bl	b56e6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b4b08:	2800      	cmp	r0, #0
   b4b0a:	db04      	blt.n	b4b16 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b4b0c:	d1f1      	bne.n	b4af2 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b4b0e:	7823      	ldrb	r3, [r4, #0]
   b4b10:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4b14:	d143      	bne.n	b4b9e <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b4b16:	7863      	ldrb	r3, [r4, #1]
   b4b18:	f043 0302 	orr.w	r3, r3, #2
   b4b1c:	7063      	strb	r3, [r4, #1]
  return -1;
   b4b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4b22:	e03d      	b.n	b4ba0 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b4b24:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b4b28:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b4b2a:	f04f 0200 	mov.w	r2, #0
   b4b2e:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b4b32:	bf28      	it	cs
   b4b34:	4637      	movcs	r7, r6
   b4b36:	f000 fdad 	bl	b5694 <_ZN8FatCache4readEmh>
      if (!pc) {
   b4b3a:	2800      	cmp	r0, #0
   b4b3c:	d0eb      	beq.n	b4b16 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b4b3e:	eb00 010a 	add.w	r1, r0, sl
   b4b42:	463a      	mov	r2, r7
   b4b44:	4640      	mov	r0, r8
   b4b46:	f004 fe37 	bl	b97b8 <memcpy>
    m_curPosition += n;
   b4b4a:	6963      	ldr	r3, [r4, #20]
   b4b4c:	443b      	add	r3, r7
    dst += n;
   b4b4e:	44b8      	add	r8, r7
    m_curPosition += n;
   b4b50:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b4b52:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b4b54:	e791      	b.n	b4a7a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b4b56:	7822      	ldrb	r2, [r4, #0]
   b4b58:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b4b5a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b4b5e:	d406      	bmi.n	b4b6e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b4b60:	7902      	ldrb	r2, [r0, #4]
   b4b62:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b4b66:	b2d2      	uxtb	r2, r2
   b4b68:	4592      	cmp	sl, r2
   b4b6a:	bf28      	it	cs
   b4b6c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4b6e:	4299      	cmp	r1, r3
      n = 512*nb;
   b4b70:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4b74:	d208      	bcs.n	b4b88 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b4b76:	68a0      	ldr	r0, [r4, #8]
   b4b78:	4653      	mov	r3, sl
   b4b7a:	6800      	ldr	r0, [r0, #0]
   b4b7c:	4642      	mov	r2, r8
   b4b7e:	f001 f8b5 	bl	b5cec <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b4b82:	2800      	cmp	r0, #0
   b4b84:	d1e1      	bne.n	b4b4a <_ZN7FatFile4readEPvj+0x100>
   b4b86:	e7c6      	b.n	b4b16 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4b88:	4453      	add	r3, sl
   b4b8a:	428b      	cmp	r3, r1
   b4b8c:	d9f3      	bls.n	b4b76 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b4b8e:	3024      	adds	r0, #36	; 0x24
   b4b90:	9101      	str	r1, [sp, #4]
   b4b92:	f000 fd57 	bl	b5644 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b4b96:	9901      	ldr	r1, [sp, #4]
   b4b98:	2800      	cmp	r0, #0
   b4b9a:	d1ec      	bne.n	b4b76 <_ZN7FatFile4readEPvj+0x12c>
   b4b9c:	e7bb      	b.n	b4b16 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b4b9e:	1ba8      	subs	r0, r5, r6
}
   b4ba0:	b003      	add	sp, #12
   b4ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4ba6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b4ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b4ba8:	2201      	movs	r2, #1
   b4baa:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b4bae:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b4bb2:	4604      	mov	r4, r0
   b4bb4:	f7ff ff49 	bl	b4a4a <_ZN7FatFile4readEPvj>
   b4bb8:	2801      	cmp	r0, #1
   b4bba:	bf0a      	itet	eq
   b4bbc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b4bc4:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b4bc8:	b002      	add	sp, #8
   b4bca:	bd70      	pop	{r4, r5, r6, pc}

000b4bcc <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4bce:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b4bd0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b4bd4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b4bd6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b4bda:	d000      	beq.n	b4bde <_ZN7FatFile12readDirCacheEb+0x12>
   b4bdc:	b999      	cbnz	r1, b4c06 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b4bde:	2201      	movs	r2, #1
   b4be0:	f10d 0107 	add.w	r1, sp, #7
   b4be4:	4620      	mov	r0, r4
   b4be6:	f7ff ff30 	bl	b4a4a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b4bea:	b240      	sxtb	r0, r0
   b4bec:	2801      	cmp	r0, #1
   b4bee:	d002      	beq.n	b4bf6 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b4bf0:	2000      	movs	r0, #0
}
   b4bf2:	b003      	add	sp, #12
   b4bf4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b4bf6:	6963      	ldr	r3, [r4, #20]
   b4bf8:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b4bfa:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b4bfc:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b4bfe:	3030      	adds	r0, #48	; 0x30
   b4c00:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b4c04:	e7f5      	b.n	b4bf2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b4c06:	3320      	adds	r3, #32
   b4c08:	e7f7      	b.n	b4bfa <_ZN7FatFile12readDirCacheEb+0x2e>

000b4c0a <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b4c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b4c0e:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b4c10:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b4c12:	4604      	mov	r4, r0
   b4c14:	460d      	mov	r5, r1
  if (!isOpen()) {
   b4c16:	b162      	cbz	r2, b4c32 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b4c18:	6940      	ldr	r0, [r0, #20]
   b4c1a:	4288      	cmp	r0, r1
   b4c1c:	d002      	beq.n	b4c24 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b4c1e:	b919      	cbnz	r1, b4c28 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b4c20:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b4c22:	6165      	str	r5, [r4, #20]
    return true;
   b4c24:	2001      	movs	r0, #1
   b4c26:	e006      	b.n	b4c36 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b4c28:	0716      	lsls	r6, r2, #28
   b4c2a:	d506      	bpl.n	b4c3a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b4c2c:	69e3      	ldr	r3, [r4, #28]
   b4c2e:	428b      	cmp	r3, r1
   b4c30:	d20b      	bcs.n	b4c4a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b4c32:	6127      	str	r7, [r4, #16]
  return false;
   b4c34:	2000      	movs	r0, #0
}
   b4c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b4c3a:	0691      	lsls	r1, r2, #26
   b4c3c:	d505      	bpl.n	b4c4a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b4c3e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b4c40:	891b      	ldrh	r3, [r3, #8]
   b4c42:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b4c46:	d9ec      	bls.n	b4c22 <_ZN7FatFile7seekSetEm+0x18>
   b4c48:	e7f3      	b.n	b4c32 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4c4a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b4c4e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b4c52:	1e43      	subs	r3, r0, #1
   b4c54:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4c58:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b4c5a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b4c5c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b4c5e:	42b3      	cmp	r3, r6
   b4c60:	d800      	bhi.n	b4c64 <_ZN7FatFile7seekSetEm+0x5a>
   b4c62:	b998      	cbnz	r0, b4c8c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4c64:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b4c66:	bf4c      	ite	mi
   b4c68:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b4c6c:	6a23      	ldrpl	r3, [r4, #32]
   b4c6e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4c70:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b4c74:	2e00      	cmp	r6, #0
   b4c76:	d0d4      	beq.n	b4c22 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b4c78:	6921      	ldr	r1, [r4, #16]
   b4c7a:	68a0      	ldr	r0, [r4, #8]
   b4c7c:	4642      	mov	r2, r8
   b4c7e:	f000 fd32 	bl	b56e6 <_ZN9FatVolume6fatGetEmPm>
   b4c82:	2800      	cmp	r0, #0
   b4c84:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b4c88:	dcf4      	bgt.n	b4c74 <_ZN7FatFile7seekSetEm+0x6a>
   b4c8a:	e7d2      	b.n	b4c32 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b4c8c:	1af6      	subs	r6, r6, r3
   b4c8e:	e7ef      	b.n	b4c70 <_ZN7FatFile7seekSetEm+0x66>

000b4c90 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b4c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c92:	460f      	mov	r7, r1
   b4c94:	4604      	mov	r4, r0
   b4c96:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b4c98:	2100      	movs	r1, #0
   b4c9a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b4c9c:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b4c9e:	f004 fdb3 	bl	b9808 <memset>
  m_vol = dirFile->m_vol;
   b4ca2:	68b8      	ldr	r0, [r7, #8]
   b4ca4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b4ca6:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b4ca8:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b4cac:	6a3b      	ldr	r3, [r7, #32]
   b4cae:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b4cb0:	016a      	lsls	r2, r5, #5
   b4cb2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b4cb6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b4cba:	071f      	lsls	r7, r3, #28
   b4cbc:	d444      	bmi.n	b4d48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b4cbe:	f003 0317 	and.w	r3, r3, #23
   b4cc2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b4cc4:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b4cc8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b4ccc:	bf04      	itt	eq
   b4cce:	f043 0308 	orreq.w	r3, r3, #8
   b4cd2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b4cd4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b4cd8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b4cda:	f006 0303 	and.w	r3, r6, #3
   b4cde:	2b01      	cmp	r3, #1
   b4ce0:	d02c      	beq.n	b4d3c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b4ce2:	2b02      	cmp	r3, #2
   b4ce4:	d028      	beq.n	b4d38 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b4ce6:	bb7b      	cbnz	r3, b4d48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b4ce8:	0571      	lsls	r1, r6, #21
   b4cea:	d42d      	bmi.n	b4d48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b4cec:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b4cee:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b4cf0:	78a1      	ldrb	r1, [r4, #2]
   b4cf2:	078b      	lsls	r3, r1, #30
   b4cf4:	d504      	bpl.n	b4d00 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b4cf6:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b4cf8:	06df      	lsls	r7, r3, #27
   b4cfa:	d425      	bmi.n	b4d48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b4cfc:	07dd      	lsls	r5, r3, #31
   b4cfe:	d423      	bmi.n	b4d48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b4d00:	11b3      	asrs	r3, r6, #6
   b4d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b4d06:	f006 0508 	and.w	r5, r6, #8
   b4d0a:	432b      	orrs	r3, r5
   b4d0c:	430b      	orrs	r3, r1
   b4d0e:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b4d10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b4d12:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4d14:	1883      	adds	r3, r0, r2
   b4d16:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b4d1a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b4d1e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b4d22:	0572      	lsls	r2, r6, #21
   b4d24:	d513      	bpl.n	b4d4e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4d26:	b959      	cbnz	r1, b4d40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b4d28:	78a3      	ldrb	r3, [r4, #2]
   b4d2a:	f043 0304 	orr.w	r3, r3, #4
   b4d2e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4d30:	0473      	lsls	r3, r6, #17
   b4d32:	d410      	bmi.n	b4d56 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b4d34:	2001      	movs	r0, #1
}
   b4d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b4d38:	2303      	movs	r3, #3
   b4d3a:	e7d8      	b.n	b4cee <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b4d3c:	2302      	movs	r3, #2
   b4d3e:	e7d6      	b.n	b4cee <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b4d40:	f000 fd71 	bl	b5826 <_ZN9FatVolume9freeChainEm>
   b4d44:	2800      	cmp	r0, #0
   b4d46:	d1ef      	bne.n	b4d28 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b4d48:	2000      	movs	r0, #0
   b4d4a:	7020      	strb	r0, [r4, #0]
  return false;
   b4d4c:	e7f3      	b.n	b4d36 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b4d4e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b4d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4d52:	61e3      	str	r3, [r4, #28]
   b4d54:	e7ec      	b.n	b4d30 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b4d56:	69e1      	ldr	r1, [r4, #28]
   b4d58:	4620      	mov	r0, r4
   b4d5a:	f7ff ff56 	bl	b4c0a <_ZN7FatFile7seekSetEm>
   b4d5e:	2800      	cmp	r0, #0
   b4d60:	d1e8      	bne.n	b4d34 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b4d62:	e7f1      	b.n	b4d48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b4d64 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b4d64:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b4d66:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b4d68:	4604      	mov	r4, r0
  if (!isOpen()) {
   b4d6a:	b90b      	cbnz	r3, b4d70 <_ZN7FatFile4syncEv+0xc>
    return true;
   b4d6c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b4d6e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b4d70:	7883      	ldrb	r3, [r0, #2]
   b4d72:	075a      	lsls	r2, r3, #29
   b4d74:	d523      	bpl.n	b4dbe <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b4d76:	2101      	movs	r1, #1
   b4d78:	f7ff fe52 	bl	b4a20 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4d7c:	4605      	mov	r5, r0
   b4d7e:	b928      	cbnz	r0, b4d8c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b4d80:	7863      	ldrb	r3, [r4, #1]
   b4d82:	f043 0301 	orr.w	r3, r3, #1
   b4d86:	7063      	strb	r3, [r4, #1]
  return false;
   b4d88:	2000      	movs	r0, #0
   b4d8a:	e7f0      	b.n	b4d6e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b4d8c:	7803      	ldrb	r3, [r0, #0]
   b4d8e:	2be5      	cmp	r3, #229	; 0xe5
   b4d90:	d0f6      	beq.n	b4d80 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b4d92:	7823      	ldrb	r3, [r4, #0]
   b4d94:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b4d96:	bf44      	itt	mi
   b4d98:	69e3      	ldrmi	r3, [r4, #28]
   b4d9a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b4d9c:	6a23      	ldr	r3, [r4, #32]
   b4d9e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b4da0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b4da2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b4da4:	4b09      	ldr	r3, [pc, #36]	; (b4dcc <_ZN7FatFile4syncEv+0x68>)
   b4da6:	681b      	ldr	r3, [r3, #0]
   b4da8:	b12b      	cbz	r3, b4db6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b4daa:	f100 0116 	add.w	r1, r0, #22
   b4dae:	3018      	adds	r0, #24
   b4db0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b4db2:	8b2b      	ldrh	r3, [r5, #24]
   b4db4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b4db6:	78a3      	ldrb	r3, [r4, #2]
   b4db8:	f023 0304 	bic.w	r3, r3, #4
   b4dbc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b4dbe:	68a0      	ldr	r0, [r4, #8]
   b4dc0:	f7ff fdd8 	bl	b4974 <_ZN9FatVolume9cacheSyncEv>
   b4dc4:	2800      	cmp	r0, #0
   b4dc6:	d0db      	beq.n	b4d80 <_ZN7FatFile4syncEv+0x1c>
   b4dc8:	e7d0      	b.n	b4d6c <_ZN7FatFile4syncEv+0x8>
   b4dca:	bf00      	nop
   b4dcc:	2003e640 	.word	0x2003e640

000b4dd0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b4dd0:	b510      	push	{r4, lr}
   b4dd2:	4604      	mov	r4, r0
  bool rtn = sync();
   b4dd4:	f7ff ffc6 	bl	b4d64 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b4dd8:	2300      	movs	r3, #0
   b4dda:	7023      	strb	r3, [r4, #0]
}
   b4ddc:	bd10      	pop	{r4, pc}

000b4dde <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4dde:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4de0:	b093      	sub	sp, #76	; 0x4c
   b4de2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4de4:	2300      	movs	r3, #0
   b4de6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b4de8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b4dea:	9201      	str	r2, [sp, #4]
   b4dec:	4606      	mov	r6, r0
   b4dee:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b4df0:	b113      	cbz	r3, b4df8 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b4df2:	2000      	movs	r0, #0
}
   b4df4:	b013      	add	sp, #76	; 0x4c
   b4df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b4df8:	780b      	ldrb	r3, [r1, #0]
   b4dfa:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4dfe:	d0f8      	beq.n	b4df2 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b4e00:	7813      	ldrb	r3, [r2, #0]
   b4e02:	2b2f      	cmp	r3, #47	; 0x2f
   b4e04:	d112      	bne.n	b4e2c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b4e06:	9a01      	ldr	r2, [sp, #4]
   b4e08:	7813      	ldrb	r3, [r2, #0]
   b4e0a:	2b2f      	cmp	r3, #47	; 0x2f
   b4e0c:	d102      	bne.n	b4e14 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b4e0e:	3201      	adds	r2, #1
   b4e10:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b4e12:	e7f8      	b.n	b4e06 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b4e14:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b4e16:	b91b      	cbnz	r3, b4e20 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b4e18:	4630      	mov	r0, r6
   b4e1a:	f7ff fe10 	bl	b4a3e <_ZN7FatFile8openRootEP9FatVolume>
   b4e1e:	e7e9      	b.n	b4df4 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b4e20:	a809      	add	r0, sp, #36	; 0x24
   b4e22:	f7ff fd91 	bl	b4948 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b4e26:	2800      	cmp	r0, #0
   b4e28:	d0e3      	beq.n	b4df2 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b4e2a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b4e2c:	9801      	ldr	r0, [sp, #4]
   b4e2e:	aa01      	add	r2, sp, #4
   b4e30:	a903      	add	r1, sp, #12
   b4e32:	f000 f90b 	bl	b504c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b4e36:	2800      	cmp	r0, #0
   b4e38:	d0db      	beq.n	b4df2 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b4e3a:	9b01      	ldr	r3, [sp, #4]
   b4e3c:	781b      	ldrb	r3, [r3, #0]
   b4e3e:	b19b      	cbz	r3, b4e68 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b4e40:	2300      	movs	r3, #0
   b4e42:	aa03      	add	r2, sp, #12
   b4e44:	4621      	mov	r1, r4
   b4e46:	4630      	mov	r0, r6
   b4e48:	f000 fa32 	bl	b52b0 <_ZN7FatFile4openEPS_P7fname_ti>
   b4e4c:	2800      	cmp	r0, #0
   b4e4e:	d0d0      	beq.n	b4df2 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b4e50:	4635      	mov	r5, r6
   b4e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e54:	ac09      	add	r4, sp, #36	; 0x24
   b4e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e5c:	682b      	ldr	r3, [r5, #0]
   b4e5e:	6023      	str	r3, [r4, #0]
    close();
   b4e60:	4630      	mov	r0, r6
   b4e62:	f7ff ffb5 	bl	b4dd0 <_ZN7FatFile5closeEv>
  while (1) {
   b4e66:	e7e0      	b.n	b4e2a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b4e68:	463b      	mov	r3, r7
   b4e6a:	aa03      	add	r2, sp, #12
   b4e6c:	4621      	mov	r1, r4
   b4e6e:	4630      	mov	r0, r6
   b4e70:	f000 fa1e 	bl	b52b0 <_ZN7FatFile4openEPS_P7fname_ti>
   b4e74:	e7be      	b.n	b4df4 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b4e78 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b4e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4e7c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b4e7e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4e80:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b4e82:	4604      	mov	r4, r0
   b4e84:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b4e86:	d55b      	bpl.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
   b4e88:	7883      	ldrb	r3, [r0, #2]
   b4e8a:	079a      	lsls	r2, r3, #30
   b4e8c:	d558      	bpl.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b4e8e:	071b      	lsls	r3, r3, #28
   b4e90:	d451      	bmi.n	b4f36 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b4e92:	6963      	ldr	r3, [r4, #20]
   b4e94:	43db      	mvns	r3, r3
   b4e96:	42bb      	cmp	r3, r7
   b4e98:	d352      	bcc.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
   b4e9a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4e9c:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4ea0:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b4ea2:	f1b8 0f00 	cmp.w	r8, #0
   b4ea6:	f000 8091 	beq.w	b4fcc <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b4eaa:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b4eac:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b4eae:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b4eb2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b4eb6:	d10e      	bne.n	b4ed6 <_ZN7FatFile5writeEPKvj+0x5e>
   b4eb8:	b96d      	cbnz	r5, b4ed6 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b4eba:	6921      	ldr	r1, [r4, #16]
   b4ebc:	2900      	cmp	r1, #0
   b4ebe:	d046      	beq.n	b4f4e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4ec0:	4652      	mov	r2, sl
   b4ec2:	f000 fc10 	bl	b56e6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b4ec6:	2800      	cmp	r0, #0
   b4ec8:	db3a      	blt.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b4eca:	d104      	bne.n	b4ed6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b4ecc:	4620      	mov	r0, r4
   b4ece:	f7ff fd5e 	bl	b498e <_ZN7FatFile10addClusterEv>
   b4ed2:	2800      	cmp	r0, #0
   b4ed4:	d034      	beq.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4ed6:	6921      	ldr	r1, [r4, #16]
   b4ed8:	68a0      	ldr	r0, [r4, #8]
   b4eda:	f000 fbfe 	bl	b56da <_ZNK9FatVolume17clusterFirstBlockEm>
   b4ede:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b4ee0:	68a0      	ldr	r0, [r4, #8]
   b4ee2:	b915      	cbnz	r5, b4eea <_ZN7FatFile5writeEPKvj+0x72>
   b4ee4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b4ee8:	d23f      	bcs.n	b4f6a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b4eea:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b4eee:	4546      	cmp	r6, r8
   b4ef0:	bf28      	it	cs
   b4ef2:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b4ef4:	2d00      	cmp	r5, #0
   b4ef6:	d136      	bne.n	b4f66 <_ZN7FatFile5writeEPKvj+0xee>
   b4ef8:	6962      	ldr	r2, [r4, #20]
   b4efa:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b4efc:	429a      	cmp	r2, r3
   b4efe:	bf34      	ite	cc
   b4f00:	2201      	movcc	r2, #1
   b4f02:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b4f04:	3024      	adds	r0, #36	; 0x24
   b4f06:	f000 fbc5 	bl	b5694 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b4f0a:	b1c8      	cbz	r0, b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b4f0c:	4428      	add	r0, r5
   b4f0e:	4632      	mov	r2, r6
   b4f10:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b4f12:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b4f14:	f004 fc50 	bl	b97b8 <memcpy>
      if (512 == (n + blockOffset)) {
   b4f18:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b4f1c:	d104      	bne.n	b4f28 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b4f1e:	68a0      	ldr	r0, [r4, #8]
   b4f20:	3024      	adds	r0, #36	; 0x24
   b4f22:	f000 fb8f 	bl	b5644 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b4f26:	b158      	cbz	r0, b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b4f28:	6963      	ldr	r3, [r4, #20]
   b4f2a:	4433      	add	r3, r6
   b4f2c:	6163      	str	r3, [r4, #20]
    src += n;
   b4f2e:	44b1      	add	r9, r6
    nToWrite -= n;
   b4f30:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b4f34:	e7b4      	b.n	b4ea0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b4f36:	69c1      	ldr	r1, [r0, #28]
   b4f38:	f7ff fe67 	bl	b4c0a <_ZN7FatFile7seekSetEm>
   b4f3c:	2800      	cmp	r0, #0
   b4f3e:	d1a8      	bne.n	b4e92 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b4f40:	7863      	ldrb	r3, [r4, #1]
   b4f42:	f043 0301 	orr.w	r3, r3, #1
   b4f46:	7063      	strb	r3, [r4, #1]
  return -1;
   b4f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4f4c:	e050      	b.n	b4ff0 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b4f4e:	6a23      	ldr	r3, [r4, #32]
   b4f50:	b93b      	cbnz	r3, b4f62 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b4f52:	4620      	mov	r0, r4
   b4f54:	f7ff fd1b 	bl	b498e <_ZN7FatFile10addClusterEv>
   b4f58:	2800      	cmp	r0, #0
   b4f5a:	d0f1      	beq.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b4f5c:	6923      	ldr	r3, [r4, #16]
   b4f5e:	6223      	str	r3, [r4, #32]
   b4f60:	e7b9      	b.n	b4ed6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b4f62:	6123      	str	r3, [r4, #16]
   b4f64:	e7b7      	b.n	b4ed6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b4f66:	2201      	movs	r2, #1
   b4f68:	e7cc      	b.n	b4f04 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b4f6a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b4f6e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b4f70:	d31b      	bcc.n	b4faa <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b4f72:	f890 c004 	ldrb.w	ip, [r0, #4]
   b4f76:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b4f7a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b4f7c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b4f80:	4573      	cmp	r3, lr
   b4f82:	bf28      	it	cs
   b4f84:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4f86:	4291      	cmp	r1, r2
      n = 512*nb;
   b4f88:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4f8c:	d307      	bcc.n	b4f9e <_ZN7FatFile5writeEPKvj+0x126>
   b4f8e:	441a      	add	r2, r3
   b4f90:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b4f92:	bf82      	ittt	hi
   b4f94:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b4f98:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b4f9c:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b4f9e:	68a5      	ldr	r5, [r4, #8]
   b4fa0:	464a      	mov	r2, r9
   b4fa2:	6828      	ldr	r0, [r5, #0]
   b4fa4:	f000 ff59 	bl	b5e5a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b4fa8:	e7bd      	b.n	b4f26 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b4faa:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b4fac:	bf02      	ittt	eq
   b4fae:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b4fb2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b4fb6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b4fb8:	68a3      	ldr	r3, [r4, #8]
   b4fba:	464a      	mov	r2, r9
   b4fbc:	6818      	ldr	r0, [r3, #0]
   b4fbe:	f000 fed6 	bl	b5d6e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b4fc2:	2800      	cmp	r0, #0
   b4fc4:	d0bc      	beq.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b4fc6:	f44f 7600 	mov.w	r6, #512	; 0x200
   b4fca:	e7ad      	b.n	b4f28 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b4fcc:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b4fce:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b4fd0:	42b2      	cmp	r2, r6
   b4fd2:	d204      	bcs.n	b4fde <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b4fd4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b4fd6:	f043 0304 	orr.w	r3, r3, #4
   b4fda:	70a3      	strb	r3, [r4, #2]
   b4fdc:	e003      	b.n	b4fe6 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b4fde:	4a08      	ldr	r2, [pc, #32]	; (b5000 <_ZN7FatFile5writeEPKvj+0x188>)
   b4fe0:	6812      	ldr	r2, [r2, #0]
   b4fe2:	2a00      	cmp	r2, #0
   b4fe4:	d1f7      	bne.n	b4fd6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b4fe6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b4fea:	2b00      	cmp	r3, #0
   b4fec:	db02      	blt.n	b4ff4 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b4fee:	4638      	mov	r0, r7
}
   b4ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	f7ff feb5 	bl	b4d64 <_ZN7FatFile4syncEv>
   b4ffa:	2800      	cmp	r0, #0
   b4ffc:	d1f7      	bne.n	b4fee <_ZN7FatFile5writeEPKvj+0x176>
   b4ffe:	e79f      	b.n	b4f40 <_ZN7FatFile5writeEPKvj+0xc8>
   b5000:	2003e640 	.word	0x2003e640

000b5004 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5004:	2904      	cmp	r1, #4
   b5006:	d804      	bhi.n	b5012 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5008:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b500c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5010:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5012:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5014:	bf9b      	ittet	ls
   b5016:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b501a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b501e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5020:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5022:	bf84      	itt	hi
   b5024:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5028:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b502a:	4770      	bx	lr

000b502c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b502c:	1e41      	subs	r1, r0, #1
   b502e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5032:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5034:	0842      	lsrs	r2, r0, #1
   b5036:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b503a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b503e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5042:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5044:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5046:	d1f5      	bne.n	b5034 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5048:	4770      	bx	lr
	...

000b504c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b504c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5050:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5052:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5056:	2b20      	cmp	r3, #32
   b5058:	d0fa      	beq.n	b5050 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b505a:	4d6a      	ldr	r5, [pc, #424]	; (b5204 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b505c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b505e:	2400      	movs	r4, #0
    c = path[len];
   b5060:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5062:	b1c3      	cbz	r3, b5096 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5064:	2b2f      	cmp	r3, #47	; 0x2f
   b5066:	d016      	beq.n	b5096 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5068:	2b5c      	cmp	r3, #92	; 0x5c
   b506a:	d102      	bne.n	b5072 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b506c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b506e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5072:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5076:	b2c0      	uxtb	r0, r0
   b5078:	281d      	cmp	r0, #29
   b507a:	d803      	bhi.n	b5084 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b507c:	fa25 f000 	lsr.w	r0, r5, r0
   b5080:	07c0      	lsls	r0, r0, #31
   b5082:	d4f3      	bmi.n	b506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5084:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5088:	283c      	cmp	r0, #60	; 0x3c
   b508a:	d0ef      	beq.n	b506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b508c:	3b20      	subs	r3, #32
   b508e:	2b5e      	cmp	r3, #94	; 0x5e
   b5090:	d8ec      	bhi.n	b506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5092:	3401      	adds	r4, #1
    c = path[len];
   b5094:	e7e4      	b.n	b5060 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5096:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5098:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b509a:	4607      	mov	r7, r0
   b509c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b50a0:	2d20      	cmp	r5, #32
   b50a2:	d0fa      	beq.n	b509a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b50a4:	2d2f      	cmp	r5, #47	; 0x2f
   b50a6:	d0f8      	beq.n	b509a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b50a8:	6017      	str	r7, [r2, #0]
  while (len) {
   b50aa:	b14c      	cbz	r4, b50c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b50ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b50b0:	2a2e      	cmp	r2, #46	; 0x2e
   b50b2:	d001      	beq.n	b50b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b50b4:	2a20      	cmp	r2, #32
   b50b6:	d101      	bne.n	b50bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b50b8:	3c01      	subs	r4, #1
  while (len) {
   b50ba:	e7f6      	b.n	b50aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b50bc:	2cff      	cmp	r4, #255	; 0xff
   b50be:	dcd5      	bgt.n	b506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b50c0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b50c4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b50c8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b50ca:	f8c1 300d 	str.w	r3, [r1, #13]
   b50ce:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b50d0:	f04f 0800 	mov.w	r8, #0
   b50d4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b50d8:	2b2e      	cmp	r3, #46	; 0x2e
   b50da:	d001      	beq.n	b50e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b50dc:	2b20      	cmp	r3, #32
   b50de:	d102      	bne.n	b50e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b50e0:	f108 0801 	add.w	r8, r8, #1
   b50e4:	e7f6      	b.n	b50d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b50e6:	fab8 f088 	clz	r0, r8
   b50ea:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b50ec:	1e65      	subs	r5, r4, #1
   b50ee:	1c6b      	adds	r3, r5, #1
   b50f0:	d002      	beq.n	b50f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b50f2:	5d73      	ldrb	r3, [r6, r5]
   b50f4:	2b2e      	cmp	r3, #46	; 0x2e
   b50f6:	d114      	bne.n	b5122 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b50f8:	f04f 0900 	mov.w	r9, #0
   b50fc:	2707      	movs	r7, #7
   b50fe:	464a      	mov	r2, r9
   b5100:	46ca      	mov	sl, r9
   b5102:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5106:	45a0      	cmp	r8, r4
   b5108:	da68      	bge.n	b51dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b510a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b510e:	2b20      	cmp	r3, #32
   b5110:	d003      	beq.n	b511a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5112:	2b2e      	cmp	r3, #46	; 0x2e
   b5114:	d107      	bne.n	b5126 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5116:	45a8      	cmp	r8, r5
   b5118:	d012      	beq.n	b5140 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b511a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b511c:	f108 0801 	add.w	r8, r8, #1
   b5120:	e7f1      	b.n	b5106 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5122:	3d01      	subs	r5, #1
   b5124:	e7e3      	b.n	b50ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5126:	2b22      	cmp	r3, #34	; 0x22
   b5128:	d008      	beq.n	b513c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b512a:	2b7c      	cmp	r3, #124	; 0x7c
   b512c:	d006      	beq.n	b513c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b512e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5132:	f1bc 0f05 	cmp.w	ip, #5
   b5136:	d80a      	bhi.n	b514e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5138:	2b2d      	cmp	r3, #45	; 0x2d
   b513a:	d012      	beq.n	b5162 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b513c:	45a8      	cmp	r8, r5
   b513e:	d15b      	bne.n	b51f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5140:	2f0a      	cmp	r7, #10
   b5142:	d04a      	beq.n	b51da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5144:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5146:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5148:	f04f 0e10 	mov.w	lr, #16
   b514c:	e7e6      	b.n	b511c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b514e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5152:	f1bc 0f05 	cmp.w	ip, #5
   b5156:	d9f1      	bls.n	b513c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5158:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b515c:	f1bc 0f02 	cmp.w	ip, #2
   b5160:	d9ec      	bls.n	b513c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5162:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5166:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b516a:	d8e7      	bhi.n	b513c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b516c:	45a8      	cmp	r8, r5
   b516e:	d0e7      	beq.n	b5140 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5170:	42ba      	cmp	r2, r7
   b5172:	d830      	bhi.n	b51d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5174:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5178:	f1bc 0f19 	cmp.w	ip, #25
   b517c:	d81a      	bhi.n	b51b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b517e:	3b20      	subs	r3, #32
        lc |= bit;
   b5180:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5184:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5186:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b518a:	f102 0c01 	add.w	ip, r2, #1
   b518e:	fa5f fc8c 	uxtb.w	ip, ip
   b5192:	440a      	add	r2, r1
      if (i < 7) {
   b5194:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5198:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b519a:	d801      	bhi.n	b51a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b519c:	f881 c00c 	strb.w	ip, [r1, #12]
   b51a0:	4662      	mov	r2, ip
   b51a2:	e7bb      	b.n	b511c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b51a4:	45a8      	cmp	r8, r5
   b51a6:	dc18      	bgt.n	b51da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b51a8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b51aa:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b51ac:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b51ae:	f04f 0e10 	mov.w	lr, #16
   b51b2:	e7b2      	b.n	b511a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b51b4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b51b8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b51bc:	bf98      	it	ls
   b51be:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b51c2:	e7e2      	b.n	b518a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b51c4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b51c6:	2001      	movs	r0, #1
   b51c8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b51ca:	4419      	add	r1, r3
   b51cc:	237e      	movs	r3, #126	; 0x7e
   b51ce:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b51d0:	2331      	movs	r3, #49	; 0x31
   b51d2:	738b      	strb	r3, [r1, #14]
   b51d4:	e74b      	b.n	b506e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b51d6:	2f0a      	cmp	r7, #10
   b51d8:	d1e4      	bne.n	b51a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b51da:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b51dc:	7b4b      	ldrb	r3, [r1, #13]
   b51de:	2b20      	cmp	r3, #32
   b51e0:	f43f af44 	beq.w	b506c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b51e4:	2800      	cmp	r0, #0
   b51e6:	d0ed      	beq.n	b51c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b51e8:	ea1a 0f09 	tst.w	sl, r9
   b51ec:	bf18      	it	ne
   b51ee:	f04f 0902 	movne.w	r9, #2
   b51f2:	f881 9000 	strb.w	r9, [r1]
   b51f6:	e73a      	b.n	b506e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b51f8:	42ba      	cmp	r2, r7
   b51fa:	d8ec      	bhi.n	b51d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b51fc:	2000      	movs	r0, #0
      c = '_';
   b51fe:	235f      	movs	r3, #95	; 0x5f
   b5200:	e7c3      	b.n	b518a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5202:	bf00      	nop
   b5204:	31000101 	.word	0x31000101

000b5208 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b520c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5210:	4606      	mov	r6, r0
   b5212:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5214:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5216:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5218:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b521c:	6861      	ldr	r1, [r4, #4]
   b521e:	68a2      	ldr	r2, [r4, #8]
   b5220:	186b      	adds	r3, r5, r1
   b5222:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5224:	4411      	add	r1, r2
   b5226:	4291      	cmp	r1, r2
   b5228:	d006      	beq.n	b5238 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b522a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b522e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5232:	4043      	eors	r3, r0
   b5234:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5236:	e7f6      	b.n	b5226 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5238:	f1b9 0f03 	cmp.w	r9, #3
   b523c:	bf28      	it	cs
   b523e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5242:	f109 0204 	add.w	r2, r9, #4
   b5246:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5248:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b524c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b524e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5250:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5252:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5254:	bf94      	ite	ls
   b5256:	3130      	addls	r1, #48	; 0x30
   b5258:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b525a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b525c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b525e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5262:	d1f1      	bne.n	b5248 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5264:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5268:	2100      	movs	r1, #0
   b526a:	735f      	strb	r7, [r3, #13]
   b526c:	4630      	mov	r0, r6
   b526e:	f7ff fccc 	bl	b4c0a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5272:	2101      	movs	r1, #1
   b5274:	4630      	mov	r0, r6
   b5276:	f7ff fca9 	bl	b4bcc <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b527a:	4601      	mov	r1, r0
   b527c:	b928      	cbnz	r0, b528a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b527e:	7870      	ldrb	r0, [r6, #1]
   b5280:	fab0 f080 	clz	r0, r0
   b5284:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b528a:	7803      	ldrb	r3, [r0, #0]
   b528c:	b16b      	cbz	r3, b52aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b528e:	7ac3      	ldrb	r3, [r0, #11]
   b5290:	071b      	lsls	r3, r3, #28
   b5292:	d4ee      	bmi.n	b5272 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5294:	220b      	movs	r2, #11
   b5296:	4640      	mov	r0, r8
   b5298:	f004 fa7e 	bl	b9798 <memcmp>
   b529c:	2800      	cmp	r0, #0
   b529e:	d1e8      	bne.n	b5272 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b52a0:	3501      	adds	r5, #1
   b52a2:	b2ad      	uxth	r5, r5
   b52a4:	2d64      	cmp	r5, #100	; 0x64
   b52a6:	d1b9      	bne.n	b521c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b52a8:	e7ed      	b.n	b5286 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b52aa:	2001      	movs	r0, #1
   b52ac:	e7eb      	b.n	b5286 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b52b0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b52b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52b4:	ed2d 8b02 	vpush	{d8}
   b52b8:	b08b      	sub	sp, #44	; 0x2c
   b52ba:	460d      	mov	r5, r1
   b52bc:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b52be:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b52c0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b52c2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b52c6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b52c8:	d105      	bne.n	b52d6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b52ca:	2000      	movs	r0, #0
}
   b52cc:	b00b      	add	sp, #44	; 0x2c
   b52ce:	ecbd 8b02 	vpop	{d8}
   b52d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b52d6:	9b07      	ldr	r3, [sp, #28]
   b52d8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b52da:	2b00      	cmp	r3, #0
   b52dc:	d1f5      	bne.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b52de:	6853      	ldr	r3, [r2, #4]
   b52e0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b52e2:	7813      	ldrb	r3, [r2, #0]
   b52e4:	079c      	lsls	r4, r3, #30
   b52e6:	bf1f      	itttt	ne
   b52e8:	9b05      	ldrne	r3, [sp, #20]
   b52ea:	330c      	addne	r3, #12
   b52ec:	220d      	movne	r2, #13
   b52ee:	fbb3 f3f2 	udivne	r3, r3, r2
   b52f2:	bf1a      	itte	ne
   b52f4:	3301      	addne	r3, #1
   b52f6:	b2db      	uxtbne	r3, r3
   b52f8:	2301      	moveq	r3, #1
    seekSet(0);
   b52fa:	2100      	movs	r1, #0
   b52fc:	4628      	mov	r0, r5
   b52fe:	9303      	str	r3, [sp, #12]
   b5300:	f7ff fc83 	bl	b4c0a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5304:	f107 030d 	add.w	r3, r7, #13
  }
   b5308:	f04f 0b00 	mov.w	fp, #0
   b530c:	ee08 3a10 	vmov	s16, r3
   b5310:	46da      	mov	sl, fp
   b5312:	465c      	mov	r4, fp
   b5314:	465e      	mov	r6, fp
   b5316:	f8cd b010 	str.w	fp, [sp, #16]
   b531a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b531c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b531e:	2101      	movs	r1, #1
   b5320:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5322:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b5326:	f7ff fc51 	bl	b4bcc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b532a:	4603      	mov	r3, r0
   b532c:	2800      	cmp	r0, #0
   b532e:	d171      	bne.n	b5414 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5330:	786b      	ldrb	r3, [r5, #1]
   b5332:	2b00      	cmp	r3, #0
   b5334:	d1c9      	bne.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b5336:	9b06      	ldr	r3, [sp, #24]
   b5338:	059a      	lsls	r2, r3, #22
   b533a:	d5c6      	bpl.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b533c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b5340:	3b01      	subs	r3, #1
   b5342:	2b01      	cmp	r3, #1
   b5344:	d8c1      	bhi.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b5346:	9b04      	ldr	r3, [sp, #16]
   b5348:	2c00      	cmp	r4, #0
   b534a:	bf08      	it	eq
   b534c:	4643      	moveq	r3, r8
   b534e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5350:	9b03      	ldr	r3, [sp, #12]
   b5352:	429c      	cmp	r4, r3
   b5354:	f0c0 80f1 	bcc.w	b553a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5358:	f1b9 0f00 	cmp.w	r9, #0
   b535c:	f040 810a 	bne.w	b5574 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b5360:	9b04      	ldr	r3, [sp, #16]
   b5362:	4628      	mov	r0, r5
   b5364:	0159      	lsls	r1, r3, #5
   b5366:	f7ff fc50 	bl	b4c0a <_ZN7FatFile7seekSetEm>
   b536a:	2800      	cmp	r0, #0
   b536c:	d0ad      	beq.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b536e:	9b03      	ldr	r3, [sp, #12]
   b5370:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b5374:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5378:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b537a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b537e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5382:	2e00      	cmp	r6, #0
   b5384:	f000 810d 	beq.w	b55a2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b5388:	2100      	movs	r1, #0
   b538a:	4628      	mov	r0, r5
   b538c:	f7ff fc1e 	bl	b4bcc <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5390:	4604      	mov	r4, r0
   b5392:	2800      	cmp	r0, #0
   b5394:	d099      	beq.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b5396:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5398:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b539c:	454e      	cmp	r6, r9
   b539e:	f043 0301 	orr.w	r3, r3, #1
   b53a2:	bf0c      	ite	eq
   b53a4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b53a8:	46b3      	movne	fp, r6
   b53aa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b53ae:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b53b2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b53b6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b53ba:	f107 000d 	add.w	r0, r7, #13
   b53be:	f7ff fe35 	bl	b502c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b53c2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b53c6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b53c8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b53cc:	f00b 031f 	and.w	r3, fp, #31
   b53d0:	220d      	movs	r2, #13
   b53d2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b53d4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b53d8:	4353      	muls	r3, r2
   b53da:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b53dc:	9905      	ldr	r1, [sp, #20]
   b53de:	4299      	cmp	r1, r3
   b53e0:	f240 80d0 	bls.w	b5584 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b53e4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b53e8:	2a04      	cmp	r2, #4
   b53ea:	fa5f fe82 	uxtb.w	lr, r2
   b53ee:	f102 0001 	add.w	r0, r2, #1
   b53f2:	f200 80cd 	bhi.w	b5590 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b53f6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b53fa:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b53fe:	280d      	cmp	r0, #13
   b5400:	f103 0301 	add.w	r3, r3, #1
   b5404:	4602      	mov	r2, r0
   b5406:	d1e9      	bne.n	b53dc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b5408:	3e01      	subs	r6, #1
   b540a:	b2f6      	uxtb	r6, r6
   b540c:	e7b9      	b.n	b5382 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b540e:	f04f 0901 	mov.w	r9, #1
   b5412:	e783      	b.n	b531c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b5414:	7802      	ldrb	r2, [r0, #0]
   b5416:	2ae5      	cmp	r2, #229	; 0xe5
   b5418:	d000      	beq.n	b541c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b541a:	b97a      	cbnz	r2, b543c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b541c:	9904      	ldr	r1, [sp, #16]
   b541e:	2c00      	cmp	r4, #0
   b5420:	bf08      	it	eq
   b5422:	4641      	moveq	r1, r8
   b5424:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b5426:	9903      	ldr	r1, [sp, #12]
   b5428:	428c      	cmp	r4, r1
        freeFound++;
   b542a:	bf3c      	itt	cc
   b542c:	3401      	addcc	r4, #1
   b542e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b5430:	2a00      	cmp	r2, #0
   b5432:	d080      	beq.n	b5336 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5434:	2ae5      	cmp	r2, #229	; 0xe5
   b5436:	d105      	bne.n	b5444 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b5438:	2600      	movs	r6, #0
   b543a:	e76f      	b.n	b531c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b543c:	9903      	ldr	r1, [sp, #12]
   b543e:	428c      	cmp	r4, r1
   b5440:	bf38      	it	cc
   b5442:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b5444:	2a2e      	cmp	r2, #46	; 0x2e
   b5446:	d0f7      	beq.n	b5438 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b5448:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b544a:	290f      	cmp	r1, #15
   b544c:	d14a      	bne.n	b54e4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b544e:	bb16      	cbnz	r6, b5496 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b5450:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b5454:	f43f af62 	beq.w	b531c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b5458:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b545c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b5460:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b5462:	220d      	movs	r2, #13
   b5464:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b5468:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b546c:	9a05      	ldr	r2, [sp, #20]
   b546e:	4542      	cmp	r2, r8
   b5470:	d9e2      	bls.n	b5438 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5472:	eba2 0208 	sub.w	r2, r2, r8
   b5476:	9208      	str	r2, [sp, #32]
   b5478:	2200      	movs	r2, #0
   b547a:	eb02 0108 	add.w	r1, r2, r8
   b547e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b5480:	4618      	mov	r0, r3
   b5482:	b2d1      	uxtb	r1, r2
   b5484:	f7ff fdbe 	bl	b5004 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b5488:	9908      	ldr	r1, [sp, #32]
   b548a:	428a      	cmp	r2, r1
   b548c:	d10d      	bne.n	b54aa <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b548e:	2800      	cmp	r0, #0
   b5490:	bf18      	it	ne
   b5492:	2600      	movne	r6, #0
   b5494:	e742      	b.n	b531c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b5496:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b549a:	fa5f fa8a 	uxtb.w	sl, sl
   b549e:	4552      	cmp	r2, sl
   b54a0:	d1ca      	bne.n	b5438 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b54a2:	7b5a      	ldrb	r2, [r3, #13]
   b54a4:	455a      	cmp	r2, fp
   b54a6:	d0dc      	beq.n	b5462 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b54a8:	e7c6      	b.n	b5438 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54aa:	28ff      	cmp	r0, #255	; 0xff
   b54ac:	d8c4      	bhi.n	b5438 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b54ae:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b54b2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b54b6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54b8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b54ba:	bf9c      	itt	ls
   b54bc:	f10e 0020 	addls.w	r0, lr, #32
   b54c0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54c4:	4608      	mov	r0, r1
   b54c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b54c8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b54ca:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b54ce:	f1bc 0f19 	cmp.w	ip, #25
   b54d2:	bf9c      	itt	ls
   b54d4:	3120      	addls	r1, #32
   b54d6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b54d8:	4571      	cmp	r1, lr
   b54da:	d1ad      	bne.n	b5438 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b54dc:	3201      	adds	r2, #1
   b54de:	2a0d      	cmp	r2, #13
   b54e0:	d1cb      	bne.n	b547a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b54e2:	e71b      	b.n	b531c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b54e4:	0708      	lsls	r0, r1, #28
   b54e6:	d4a7      	bmi.n	b5438 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b54e8:	b15e      	cbz	r6, b5502 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b54ea:	f1ba 0f01 	cmp.w	sl, #1
   b54ee:	f47f aeec 	bne.w	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b54f2:	4618      	mov	r0, r3
   b54f4:	f7ff fd9a 	bl	b502c <_ZN7FatFile11lfnChecksumEPh>
   b54f8:	4558      	cmp	r0, fp
   b54fa:	f47f aee6 	bne.w	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b54fe:	46b1      	mov	r9, r6
   b5500:	e00e      	b.n	b5520 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5502:	ee18 1a10 	vmov	r1, s16
   b5506:	220b      	movs	r2, #11
   b5508:	4618      	mov	r0, r3
   b550a:	f004 f945 	bl	b9798 <memcmp>
   b550e:	2800      	cmp	r0, #0
   b5510:	f47f af04 	bne.w	b531c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5514:	f897 9000 	ldrb.w	r9, [r7]
   b5518:	f019 0901 	ands.w	r9, r9, #1
   b551c:	f47f af77 	bne.w	b540e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5520:	9b06      	ldr	r3, [sp, #24]
   b5522:	0519      	lsls	r1, r3, #20
   b5524:	f53f aed1 	bmi.w	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b5528:	9b06      	ldr	r3, [sp, #24]
   b552a:	9807      	ldr	r0, [sp, #28]
   b552c:	f8cd 9000 	str.w	r9, [sp]
   b5530:	4642      	mov	r2, r8
   b5532:	4629      	mov	r1, r5
   b5534:	f7ff fbac 	bl	b4c90 <_ZN7FatFile15openCachedEntryEPS_tih>
   b5538:	e6c8      	b.n	b52cc <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b553a:	2100      	movs	r1, #0
   b553c:	4628      	mov	r0, r5
   b553e:	f7ff fb45 	bl	b4bcc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5542:	b9a0      	cbnz	r0, b556e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b5544:	786b      	ldrb	r3, [r5, #1]
   b5546:	2b00      	cmp	r3, #0
   b5548:	f47f aebf 	bne.w	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b554c:	4628      	mov	r0, r5
   b554e:	f7ff fa29 	bl	b49a4 <_ZN7FatFile13addDirClusterEv>
   b5552:	2800      	cmp	r0, #0
   b5554:	f43f aeb9 	beq.w	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b5558:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b555a:	791b      	ldrb	r3, [r3, #4]
   b555c:	2b01      	cmp	r3, #1
   b555e:	f63f aefb 	bhi.w	b5358 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b5562:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b5564:	3410      	adds	r4, #16
   b5566:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5568:	42a3      	cmp	r3, r4
   b556a:	d8ef      	bhi.n	b554c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b556c:	e6f4      	b.n	b5358 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b556e:	3401      	adds	r4, #1
   b5570:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b5572:	e6ed      	b.n	b5350 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b5574:	4639      	mov	r1, r7
   b5576:	4628      	mov	r0, r5
   b5578:	f7ff fe46 	bl	b5208 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b557c:	2800      	cmp	r0, #0
   b557e:	f47f aeef 	bne.w	b5360 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b5582:	e6a2      	b.n	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5584:	bf14      	ite	ne
   b5586:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b558a:	2100      	moveq	r1, #0
   b558c:	b289      	uxth	r1, r1
   b558e:	e72b      	b.n	b53e8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5590:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b5594:	bf94      	ite	ls
   b5596:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b559a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b559e:	8091      	strh	r1, [r2, #4]
   b55a0:	e72d      	b.n	b53fe <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b55a2:	4631      	mov	r1, r6
   b55a4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b55a6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b55aa:	f7ff fb0f 	bl	b4bcc <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b55ae:	4604      	mov	r4, r0
   b55b0:	2800      	cmp	r0, #0
   b55b2:	f43f ae8a 	beq.w	b52ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b55b6:	2220      	movs	r2, #32
   b55b8:	4631      	mov	r1, r6
   b55ba:	f004 f925 	bl	b9808 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b55be:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b55c2:	6023      	str	r3, [r4, #0]
   b55c4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b55c8:	6063      	str	r3, [r4, #4]
   b55ca:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b55ce:	8123      	strh	r3, [r4, #8]
   b55d0:	7dfb      	ldrb	r3, [r7, #23]
   b55d2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b55d4:	783b      	ldrb	r3, [r7, #0]
   b55d6:	f003 0318 	and.w	r3, r3, #24
   b55da:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b55dc:	4b0f      	ldr	r3, [pc, #60]	; (b561c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b55de:	681b      	ldr	r3, [r3, #0]
   b55e0:	b19b      	cbz	r3, b560a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b55e2:	f104 010e 	add.w	r1, r4, #14
   b55e6:	f104 0010 	add.w	r0, r4, #16
   b55ea:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b55ec:	8a23      	ldrh	r3, [r4, #16]
   b55ee:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b55f0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b55f2:	89e3      	ldrh	r3, [r4, #14]
   b55f4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b55f6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b55f8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b55fc:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5600:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5604:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b5608:	e78e      	b.n	b5528 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b560a:	2321      	movs	r3, #33	; 0x21
   b560c:	7423      	strb	r3, [r4, #16]
   b560e:	2328      	movs	r3, #40	; 0x28
   b5610:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5612:	2308      	movs	r3, #8
   b5614:	73a6      	strb	r6, [r4, #14]
   b5616:	73e3      	strb	r3, [r4, #15]
   b5618:	e7e8      	b.n	b55ec <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b561a:	bf00      	nop
   b561c:	2003e640 	.word	0x2003e640

000b5620 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5620:	b513      	push	{r0, r1, r4, lr}
   b5622:	4604      	mov	r4, r0
    }
   b5624:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5626:	b159      	cbz	r1, b5640 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5628:	9101      	str	r1, [sp, #4]
   b562a:	f004 f96a 	bl	b9902 <strlen>
   b562e:	6823      	ldr	r3, [r4, #0]
   b5630:	9901      	ldr	r1, [sp, #4]
   b5632:	68db      	ldr	r3, [r3, #12]
   b5634:	4602      	mov	r2, r0
   b5636:	4620      	mov	r0, r4
    }
   b5638:	b002      	add	sp, #8
   b563a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b563e:	4718      	bx	r3
    }
   b5640:	b002      	add	sp, #8
   b5642:	bd10      	pop	{r4, pc}

000b5644 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b5644:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b5646:	7803      	ldrb	r3, [r0, #0]
   b5648:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b564a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b564c:	d520      	bpl.n	b5690 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b564e:	6843      	ldr	r3, [r0, #4]
   b5650:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b5652:	f100 020c 	add.w	r2, r0, #12
   b5656:	6818      	ldr	r0, [r3, #0]
   b5658:	9201      	str	r2, [sp, #4]
   b565a:	f000 fb88 	bl	b5d6e <_ZN9SdSpiCard10writeBlockEmPKh>
   b565e:	9a01      	ldr	r2, [sp, #4]
   b5660:	4605      	mov	r5, r0
   b5662:	b918      	cbnz	r0, b566c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b5664:	2500      	movs	r5, #0
}
   b5666:	4628      	mov	r0, r5
   b5668:	b003      	add	sp, #12
   b566a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b566c:	7823      	ldrb	r3, [r4, #0]
   b566e:	079b      	lsls	r3, r3, #30
   b5670:	d404      	bmi.n	b567c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b5672:	7823      	ldrb	r3, [r4, #0]
   b5674:	f023 0301 	bic.w	r3, r3, #1
   b5678:	7023      	strb	r3, [r4, #0]
   b567a:	e7f4      	b.n	b5666 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b567c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b5680:	6919      	ldr	r1, [r3, #16]
   b5682:	4401      	add	r1, r0
   b5684:	6818      	ldr	r0, [r3, #0]
   b5686:	f000 fb72 	bl	b5d6e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b568a:	2800      	cmp	r0, #0
   b568c:	d1f1      	bne.n	b5672 <_ZN8FatCache4syncEv+0x2e>
   b568e:	e7e9      	b.n	b5664 <_ZN8FatCache4syncEv+0x20>
  return true;
   b5690:	2501      	movs	r5, #1
   b5692:	e7e8      	b.n	b5666 <_ZN8FatCache4syncEv+0x22>

000b5694 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5694:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b5696:	6883      	ldr	r3, [r0, #8]
   b5698:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b569a:	4604      	mov	r4, r0
   b569c:	460e      	mov	r6, r1
   b569e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b56a0:	d009      	beq.n	b56b6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b56a2:	f7ff ffcf 	bl	b5644 <_ZN8FatCache4syncEv>
   b56a6:	b908      	cbnz	r0, b56ac <_ZN8FatCache4readEmh+0x18>
  return 0;
   b56a8:	2000      	movs	r0, #0
}
   b56aa:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b56ac:	076b      	lsls	r3, r5, #29
   b56ae:	d50a      	bpl.n	b56c6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b56b0:	2300      	movs	r3, #0
   b56b2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b56b4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b56b6:	7822      	ldrb	r2, [r4, #0]
   b56b8:	f005 0503 	and.w	r5, r5, #3
   b56bc:	4620      	mov	r0, r4
   b56be:	4315      	orrs	r5, r2
   b56c0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b56c4:	e7f1      	b.n	b56aa <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b56c6:	6863      	ldr	r3, [r4, #4]
   b56c8:	f104 020c 	add.w	r2, r4, #12
   b56cc:	6818      	ldr	r0, [r3, #0]
   b56ce:	4631      	mov	r1, r6
   b56d0:	f000 fac4 	bl	b5c5c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b56d4:	2800      	cmp	r0, #0
   b56d6:	d1eb      	bne.n	b56b0 <_ZN8FatCache4readEmh+0x1c>
   b56d8:	e7e6      	b.n	b56a8 <_ZN8FatCache4readEmh+0x14>

000b56da <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b56da:	7983      	ldrb	r3, [r0, #6]
   b56dc:	6940      	ldr	r0, [r0, #20]
   b56de:	3902      	subs	r1, #2
   b56e0:	4099      	lsls	r1, r3
}
   b56e2:	4408      	add	r0, r1
   b56e4:	4770      	bx	lr

000b56e6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b56e6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b56e8:	b570      	push	{r4, r5, r6, lr}
   b56ea:	4605      	mov	r5, r0
   b56ec:	460c      	mov	r4, r1
   b56ee:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b56f0:	d802      	bhi.n	b56f8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b56f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b56f6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b56f8:	69c3      	ldr	r3, [r0, #28]
   b56fa:	428b      	cmp	r3, r1
   b56fc:	d3f9      	bcc.n	b56f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b56fe:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5700:	2b20      	cmp	r3, #32
   b5702:	d116      	bne.n	b5732 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b5704:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5706:	2202      	movs	r2, #2
   b5708:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b570c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5710:	f7ff ffc0 	bl	b5694 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5714:	2800      	cmp	r0, #0
   b5716:	d0ec      	beq.n	b56f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b5718:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b571c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b5720:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b5724:	69ea      	ldr	r2, [r5, #28]
   b5726:	429a      	cmp	r2, r3
  *value = next;
   b5728:	bf26      	itte	cs
   b572a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b572c:	2001      	movcs	r0, #1
    return 0;
   b572e:	2000      	movcc	r0, #0
   b5730:	e7e1      	b.n	b56f6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b5732:	2b10      	cmp	r3, #16
   b5734:	d1dd      	bne.n	b56f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5736:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b573a:	6981      	ldr	r1, [r0, #24]
   b573c:	2202      	movs	r2, #2
   b573e:	4419      	add	r1, r3
   b5740:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5744:	f7ff ffa6 	bl	b5694 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5748:	2800      	cmp	r0, #0
   b574a:	d0d2      	beq.n	b56f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b574c:	b2e4      	uxtb	r4, r4
   b574e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b5752:	e7e7      	b.n	b5724 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b5754 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5754:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b5756:	b538      	push	{r3, r4, r5, lr}
   b5758:	460c      	mov	r4, r1
   b575a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b575c:	d801      	bhi.n	b5762 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b575e:	2000      	movs	r0, #0
}
   b5760:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5762:	69c3      	ldr	r3, [r0, #28]
   b5764:	428b      	cmp	r3, r1
   b5766:	d3fa      	bcc.n	b575e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b5768:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b576a:	2b20      	cmp	r3, #32
   b576c:	d10f      	bne.n	b578e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b576e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5770:	2203      	movs	r2, #3
   b5772:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5776:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b577a:	f7ff ff8b 	bl	b5694 <_ZN8FatCache4readEmh>
    if (!pc) {
   b577e:	2800      	cmp	r0, #0
   b5780:	d0ed      	beq.n	b575e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b5782:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5786:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b578a:	2001      	movs	r0, #1
   b578c:	e7e8      	b.n	b5760 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b578e:	2b10      	cmp	r3, #16
   b5790:	d1e5      	bne.n	b575e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5792:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5796:	6981      	ldr	r1, [r0, #24]
   b5798:	2203      	movs	r2, #3
   b579a:	4419      	add	r1, r3
   b579c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b57a0:	f7ff ff78 	bl	b5694 <_ZN8FatCache4readEmh>
    if (!pc) {
   b57a4:	2800      	cmp	r0, #0
   b57a6:	d0da      	beq.n	b575e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b57a8:	b2e4      	uxtb	r4, r4
   b57aa:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b57ae:	e7ec      	b.n	b578a <_ZN9FatVolume6fatPutEmm+0x36>

000b57b0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b57b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b57b4:	68c4      	ldr	r4, [r0, #12]
   b57b6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b57b8:	4605      	mov	r5, r0
   b57ba:	460e      	mov	r6, r1
   b57bc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b57be:	d301      	bcc.n	b57c4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b57c0:	2701      	movs	r7, #1
   b57c2:	e001      	b.n	b57c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b57c4:	460c      	mov	r4, r1
    setStart = false;
   b57c6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b57c8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b57ca:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b57cc:	42a3      	cmp	r3, r4
   b57ce:	d202      	bcs.n	b57d6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b57d0:	b9c7      	cbnz	r7, b5804 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b57d2:	68ec      	ldr	r4, [r5, #12]
   b57d4:	e7f4      	b.n	b57c0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b57d6:	42a6      	cmp	r6, r4
   b57d8:	d014      	beq.n	b5804 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b57da:	aa01      	add	r2, sp, #4
   b57dc:	4621      	mov	r1, r4
   b57de:	4628      	mov	r0, r5
   b57e0:	f7ff ff81 	bl	b56e6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b57e4:	2800      	cmp	r0, #0
   b57e6:	db0d      	blt.n	b5804 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b57e8:	d0ee      	beq.n	b57c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b57ea:	9b01      	ldr	r3, [sp, #4]
   b57ec:	2b00      	cmp	r3, #0
   b57ee:	d1eb      	bne.n	b57c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b57f0:	b107      	cbz	r7, b57f4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b57f2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b57f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b57f8:	4621      	mov	r1, r4
   b57fa:	4628      	mov	r0, r5
   b57fc:	f7ff ffaa 	bl	b5754 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b5800:	4607      	mov	r7, r0
   b5802:	b920      	cbnz	r0, b580e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b5804:	2700      	movs	r7, #0
}
   b5806:	4638      	mov	r0, r7
   b5808:	b002      	add	sp, #8
   b580a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b580e:	b916      	cbnz	r6, b5816 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b5810:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b5814:	e7f7      	b.n	b5806 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b5816:	4622      	mov	r2, r4
   b5818:	4631      	mov	r1, r6
   b581a:	4628      	mov	r0, r5
   b581c:	f7ff ff9a 	bl	b5754 <_ZN9FatVolume6fatPutEmm>
   b5820:	2800      	cmp	r0, #0
   b5822:	d1f5      	bne.n	b5810 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b5824:	e7ee      	b.n	b5804 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b5826 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b5826:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5828:	4605      	mov	r5, r0
   b582a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b582c:	aa01      	add	r2, sp, #4
   b582e:	4621      	mov	r1, r4
   b5830:	4628      	mov	r0, r5
   b5832:	f7ff ff58 	bl	b56e6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5836:	1e06      	subs	r6, r0, #0
   b5838:	db10      	blt.n	b585c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b583a:	2200      	movs	r2, #0
   b583c:	4621      	mov	r1, r4
   b583e:	4628      	mov	r0, r5
   b5840:	f7ff ff88 	bl	b5754 <_ZN9FatVolume6fatPutEmm>
   b5844:	b150      	cbz	r0, b585c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b5846:	68eb      	ldr	r3, [r5, #12]
   b5848:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b584a:	bf24      	itt	cs
   b584c:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b5850:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b5852:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b5854:	2e00      	cmp	r6, #0
   b5856:	d1e9      	bne.n	b582c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b5858:	b002      	add	sp, #8
   b585a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b585c:	2000      	movs	r0, #0
   b585e:	e7fb      	b.n	b5858 <_ZN9FatVolume9freeChainEm+0x32>

000b5860 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b5860:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b5862:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b5864:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b5866:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b5868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b586c:	4604      	mov	r4, r0
  m_fatType = 0;
   b586e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b5870:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b5874:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b5876:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b587a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b587c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b5880:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b5884:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b5888:	460d      	mov	r5, r1
   b588a:	b1b9      	cbz	r1, b58bc <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b588c:	2904      	cmp	r1, #4
   b588e:	d901      	bls.n	b5894 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b5890:	2000      	movs	r0, #0
}
   b5892:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b5894:	4611      	mov	r1, r2
   b5896:	4630      	mov	r0, r6
   b5898:	f7ff fefc 	bl	b5694 <_ZN8FatCache4readEmh>
    if (!pc) {
   b589c:	2800      	cmp	r0, #0
   b589e:	d0f7      	beq.n	b5890 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b58a0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b58a4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b58a8:	065b      	lsls	r3, r3, #25
   b58aa:	d1f1      	bne.n	b5890 <_ZN9FatVolume4initEh+0x30>
   b58ac:	f105 011b 	add.w	r1, r5, #27
   b58b0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b58b4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b58b8:	2d00      	cmp	r5, #0
   b58ba:	d0e9      	beq.n	b5890 <_ZN9FatVolume4initEh+0x30>
   b58bc:	2200      	movs	r2, #0
   b58be:	4629      	mov	r1, r5
   b58c0:	4630      	mov	r0, r6
   b58c2:	f7ff fee7 	bl	b5694 <_ZN8FatCache4readEmh>
  if (!pc) {
   b58c6:	2800      	cmp	r0, #0
   b58c8:	d0e2      	beq.n	b5890 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b58ca:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b58ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b58d2:	d1dd      	bne.n	b5890 <_ZN9FatVolume4initEh+0x30>
   b58d4:	7c03      	ldrb	r3, [r0, #16]
   b58d6:	2b02      	cmp	r3, #2
   b58d8:	d1da      	bne.n	b5890 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b58da:	89c3      	ldrh	r3, [r0, #14]
   b58dc:	2b00      	cmp	r3, #0
   b58de:	d0d7      	beq.n	b5890 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b58e0:	7b41      	ldrb	r1, [r0, #13]
   b58e2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b58e4:	1e4b      	subs	r3, r1, #1
   b58e6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b58e8:	2300      	movs	r3, #0
   b58ea:	71a3      	strb	r3, [r4, #6]
   b58ec:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b58ee:	2301      	movs	r3, #1
   b58f0:	4299      	cmp	r1, r3
   b58f2:	d007      	beq.n	b5904 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b58f4:	3e01      	subs	r6, #1
   b58f6:	d0cb      	beq.n	b5890 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b58f8:	79a2      	ldrb	r2, [r4, #6]
   b58fa:	005b      	lsls	r3, r3, #1
   b58fc:	3201      	adds	r2, #1
   b58fe:	b2db      	uxtb	r3, r3
   b5900:	71a2      	strb	r2, [r4, #6]
   b5902:	e7f5      	b.n	b58f0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b5904:	8ac1      	ldrh	r1, [r0, #22]
   b5906:	b901      	cbnz	r1, b590a <_ZN9FatVolume4initEh+0xaa>
   b5908:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b590a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b590c:	89c3      	ldrh	r3, [r0, #14]
   b590e:	442b      	add	r3, r5
   b5910:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b5912:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b5916:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b5918:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b591c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b591e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b5922:	0149      	lsls	r1, r1, #5
   b5924:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b5928:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b592c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b592e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b5932:	b902      	cbnz	r2, b5936 <_ZN9FatVolume4initEh+0xd6>
   b5934:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b5936:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b5938:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b593a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b593c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b593e:	1c4b      	adds	r3, r1, #1
   b5940:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b5942:	f640 73f4 	movw	r3, #4084	; 0xff4
   b5946:	4299      	cmp	r1, r3
   b5948:	d802      	bhi.n	b5950 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b594a:	230c      	movs	r3, #12
   b594c:	71e3      	strb	r3, [r4, #7]
   b594e:	e79f      	b.n	b5890 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b5950:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b5954:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b5956:	bf85      	ittet	hi
   b5958:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b595a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b595c:	2310      	movls	r3, #16
    m_fatType = 32;
   b595e:	2320      	movhi	r3, #32
   b5960:	71e3      	strb	r3, [r4, #7]
  return true;
   b5962:	2001      	movs	r0, #1
   b5964:	e795      	b.n	b5892 <_ZN9FatVolume4initEh+0x32>

000b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b5966:	f000 bacb 	b.w	b5f00 <_ZN14SdSpiAltDriver4sendEh>

000b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b596a:	f000 baae 	b.w	b5eca <_ZN14SdSpiAltDriver7receiveEv>
	...

000b5970 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5970:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5972:	4e0e      	ldr	r6, [pc, #56]	; (b59ac <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5974:	460d      	mov	r5, r1
   b5976:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5978:	f000 fb0a 	bl	b5f90 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b597c:	6833      	ldr	r3, [r6, #0]
   b597e:	1ac0      	subs	r0, r0, r3
   b5980:	4b0b      	ldr	r3, [pc, #44]	; (b59b0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b5982:	4298      	cmp	r0, r3
   b5984:	d908      	bls.n	b5998 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5986:	f000 fb0b 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b598a:	4b0a      	ldr	r3, [pc, #40]	; (b59b4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b598c:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b598e:	f000 fd27 	bl	b63e0 <spark_process>
   b5992:	f000 fafd 	bl	b5f90 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b5996:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5998:	f000 fb02 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b599c:	b280      	uxth	r0, r0
   b599e:	1b40      	subs	r0, r0, r5
}
   b59a0:	42a0      	cmp	r0, r4
   b59a2:	bfd4      	ite	le
   b59a4:	2000      	movle	r0, #0
   b59a6:	2001      	movgt	r0, #1
   b59a8:	bd70      	pop	{r4, r5, r6, pc}
   b59aa:	bf00      	nop
   b59ac:	2003e648 	.word	0x2003e648
   b59b0:	000186a0 	.word	0x000186a0
   b59b4:	2003e710 	.word	0x2003e710

000b59b8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b59b8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b59ba:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b59bc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b59be:	b94d      	cbnz	r5, b59d4 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b59c0:	6840      	ldr	r0, [r0, #4]
   b59c2:	f000 fa6b 	bl	b5e9c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b59c6:	6863      	ldr	r3, [r4, #4]
   b59c8:	4629      	mov	r1, r5
   b59ca:	7d18      	ldrb	r0, [r3, #20]
   b59cc:	f003 f9c1 	bl	b8d52 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b59d0:	2301      	movs	r3, #1
   b59d2:	7223      	strb	r3, [r4, #8]
  }
}
   b59d4:	bd38      	pop	{r3, r4, r5, pc}

000b59d6 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b59d6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b59d8:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b59da:	4604      	mov	r4, r0
  if (m_spiActive) {
   b59dc:	b16b      	cbz	r3, b59fa <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b59de:	6843      	ldr	r3, [r0, #4]
   b59e0:	2101      	movs	r1, #1
   b59e2:	7d18      	ldrb	r0, [r3, #20]
   b59e4:	f003 f9b5 	bl	b8d52 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b59e8:	6860      	ldr	r0, [r4, #4]
   b59ea:	21ff      	movs	r1, #255	; 0xff
   b59ec:	f7ff ffbb 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b59f0:	6860      	ldr	r0, [r4, #4]
   b59f2:	f000 fa67 	bl	b5ec4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b59f6:	2300      	movs	r3, #0
   b59f8:	7223      	strb	r3, [r4, #8]
  }
}
   b59fa:	bd10      	pop	{r4, pc}

000b59fc <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b59fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59fe:	4604      	mov	r4, r0
   b5a00:	460d      	mov	r5, r1
   b5a02:	4616      	mov	r6, r2
   b5a04:	f000 facc 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b5a08:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b5a0a:	6860      	ldr	r0, [r4, #4]
   b5a0c:	f7ff ffad 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5a10:	28ff      	cmp	r0, #255	; 0xff
   b5a12:	7260      	strb	r0, [r4, #9]
   b5a14:	d10e      	bne.n	b5a34 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b5a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a1a:	4639      	mov	r1, r7
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	f7ff ffa7 	bl	b5970 <_ZN9SdSpiCard10isTimedOutEtt>
   b5a22:	2800      	cmp	r0, #0
   b5a24:	d0f1      	beq.n	b5a0a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b5a26:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b5a28:	4620      	mov	r0, r4
   b5a2a:	7023      	strb	r3, [r4, #0]
   b5a2c:	f7ff ffd3 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5a30:	2000      	movs	r0, #0
}
   b5a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b5a34:	28fe      	cmp	r0, #254	; 0xfe
   b5a36:	d001      	beq.n	b5a3c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b5a38:	2350      	movs	r3, #80	; 0x50
   b5a3a:	e7f5      	b.n	b5a28 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b5a3c:	6860      	ldr	r0, [r4, #4]
   b5a3e:	4632      	mov	r2, r6
   b5a40:	4629      	mov	r1, r5
   b5a42:	f000 fa47 	bl	b5ed4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b5a46:	7260      	strb	r0, [r4, #9]
   b5a48:	b108      	cbz	r0, b5a4e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b5a4a:	2360      	movs	r3, #96	; 0x60
   b5a4c:	e7ec      	b.n	b5a28 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b5a4e:	6860      	ldr	r0, [r4, #4]
   b5a50:	f7ff ff8b 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b5a54:	6860      	ldr	r0, [r4, #4]
   b5a56:	f7ff ff88 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b5a5a:	2001      	movs	r0, #1
   b5a5c:	e7e9      	b.n	b5a32 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b5a5e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b5a5e:	b570      	push	{r4, r5, r6, lr}
   b5a60:	4604      	mov	r4, r0
   b5a62:	460e      	mov	r6, r1
   b5a64:	f000 fa9c 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
   b5a68:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b5a6a:	4632      	mov	r2, r6
   b5a6c:	4629      	mov	r1, r5
   b5a6e:	4620      	mov	r0, r4
   b5a70:	f7ff ff7e 	bl	b5970 <_ZN9SdSpiCard10isTimedOutEtt>
   b5a74:	b930      	cbnz	r0, b5a84 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b5a76:	6860      	ldr	r0, [r4, #4]
   b5a78:	f7ff ff77 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5a7c:	28ff      	cmp	r0, #255	; 0xff
   b5a7e:	d1f4      	bne.n	b5a6a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b5a80:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b5a82:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5a84:	2000      	movs	r0, #0
   b5a86:	e7fc      	b.n	b5a82 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b5a88 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b5a8a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5a8c:	9201      	str	r2, [sp, #4]
   b5a8e:	4604      	mov	r4, r0
   b5a90:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b5a92:	b90b      	cbnz	r3, b5a98 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b5a94:	f7ff ff90 	bl	b59b8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b5a98:	b125      	cbz	r5, b5aa4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b5a9a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b5a9e:	4620      	mov	r0, r4
   b5aa0:	f7ff ffdd 	bl	b5a5e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b5aa4:	6860      	ldr	r0, [r4, #4]
   b5aa6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b5aaa:	f7ff ff5c 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5aae:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b5ab0:	af01      	add	r7, sp, #4
   b5ab2:	5db9      	ldrb	r1, [r7, r6]
   b5ab4:	6860      	ldr	r0, [r4, #4]
   b5ab6:	f7ff ff56 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b5aba:	3e01      	subs	r6, #1
   b5abc:	d2f9      	bcs.n	b5ab2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b5abe:	2d00      	cmp	r5, #0
   b5ac0:	6860      	ldr	r0, [r4, #4]
   b5ac2:	bf0c      	ite	eq
   b5ac4:	2195      	moveq	r1, #149	; 0x95
   b5ac6:	2187      	movne	r1, #135	; 0x87
   b5ac8:	f7ff ff4d 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b5acc:	6860      	ldr	r0, [r4, #4]
   b5ace:	f7ff ff4c 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5ad2:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b5ad4:	6860      	ldr	r0, [r4, #4]
   b5ad6:	f7ff ff48 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5ada:	0603      	lsls	r3, r0, #24
   b5adc:	7260      	strb	r0, [r4, #9]
   b5ade:	d503      	bpl.n	b5ae8 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b5ae0:	3d01      	subs	r5, #1
   b5ae2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5ae6:	d1f5      	bne.n	b5ad4 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b5ae8:	b003      	add	sp, #12
   b5aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5aec <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b5aec:	b570      	push	{r4, r5, r6, lr}
   b5aee:	4604      	mov	r4, r0
   b5af0:	460d      	mov	r5, r1
   b5af2:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b5af4:	2137      	movs	r1, #55	; 0x37
   b5af6:	2200      	movs	r2, #0
   b5af8:	f7ff ffc6 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b5afc:	4632      	mov	r2, r6
   b5afe:	4629      	mov	r1, r5
   b5b00:	4620      	mov	r0, r4
  }
   b5b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b5b06:	f7ff bfbf 	b.w	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b5b0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b5b10:	2500      	movs	r5, #0
   b5b12:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b5b14:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b5b16:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b5b18:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5b1a:	4604      	mov	r4, r0
   b5b1c:	4690      	mov	r8, r2
   b5b1e:	461e      	mov	r6, r3
   b5b20:	f000 fa3e 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b5b24:	4641      	mov	r1, r8
   b5b26:	4607      	mov	r7, r0
   b5b28:	6860      	ldr	r0, [r4, #4]
   b5b2a:	f000 f9bb 	bl	b5ea4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b5b2e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b5b30:	4a49      	ldr	r2, [pc, #292]	; (b5c58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b5b32:	721d      	strb	r5, [r3, #8]
   b5b34:	2501      	movs	r5, #1
   b5b36:	60da      	str	r2, [r3, #12]
   b5b38:	821d      	strh	r5, [r3, #16]
  spiStart();
   b5b3a:	4620      	mov	r0, r4
   b5b3c:	f7ff ff3c 	bl	b59b8 <_ZN9SdSpiCard8spiStartEv>
   b5b40:	6863      	ldr	r3, [r4, #4]
   b5b42:	4629      	mov	r1, r5
   b5b44:	7d18      	ldrb	r0, [r3, #20]
   b5b46:	f003 f904 	bl	b8d52 <digitalWrite>
   b5b4a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b5b4c:	6860      	ldr	r0, [r4, #4]
   b5b4e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b5b50:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b5b52:	f7ff ff08 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b5b56:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5b5a:	d1f7      	bne.n	b5b4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b5b5c:	6863      	ldr	r3, [r4, #4]
   b5b5e:	4629      	mov	r1, r5
   b5b60:	7d18      	ldrb	r0, [r3, #20]
   b5b62:	f003 f8f6 	bl	b8d52 <digitalWrite>
  }
   b5b66:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b5b68:	2200      	movs	r2, #0
   b5b6a:	4611      	mov	r1, r2
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	f7ff ff8b 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5b72:	2801      	cmp	r0, #1
   b5b74:	4680      	mov	r8, r0
   b5b76:	d018      	beq.n	b5baa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b5b78:	3d01      	subs	r5, #1
   b5b7a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5b7e:	d107      	bne.n	b5b90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b5b80:	2320      	movs	r3, #32
  spiStop();
   b5b82:	4620      	mov	r0, r4
   b5b84:	7023      	strb	r3, [r4, #0]
   b5b86:	f7ff ff26 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5b8a:	2000      	movs	r0, #0
}
   b5b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b5b90:	6860      	ldr	r0, [r4, #4]
   b5b92:	21fd      	movs	r1, #253	; 0xfd
   b5b94:	f7ff fee7 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5b98:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b5b9c:	6860      	ldr	r0, [r4, #4]
   b5b9e:	f7ff fee4 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b5ba2:	f1b8 0801 	subs.w	r8, r8, #1
   b5ba6:	d1f9      	bne.n	b5b9c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b5ba8:	e7de      	b.n	b5b68 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b5baa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b5bae:	2108      	movs	r1, #8
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	f7ff ff69 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5bb6:	2805      	cmp	r0, #5
   b5bb8:	d114      	bne.n	b5be4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b5bba:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b5bbe:	2500      	movs	r5, #0
   b5bc0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b5bc2:	462a      	mov	r2, r5
   b5bc4:	2129      	movs	r1, #41	; 0x29
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	f7ff ff90 	bl	b5aec <_ZN9SdSpiCard8cardAcmdEhm>
   b5bcc:	4602      	mov	r2, r0
   b5bce:	b1d8      	cbz	r0, b5c08 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b5bd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b5bd4:	4639      	mov	r1, r7
   b5bd6:	4620      	mov	r0, r4
   b5bd8:	f7ff feca 	bl	b5970 <_ZN9SdSpiCard10isTimedOutEtt>
   b5bdc:	2800      	cmp	r0, #0
   b5bde:	d0f0      	beq.n	b5bc2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b5be0:	2343      	movs	r3, #67	; 0x43
   b5be2:	e7ce      	b.n	b5b82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b5be4:	2504      	movs	r5, #4
      m_status = spiReceive();
   b5be6:	6860      	ldr	r0, [r4, #4]
   b5be8:	f7ff febf 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b5bec:	3d01      	subs	r5, #1
   b5bee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b5bf2:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b5bf4:	d1f7      	bne.n	b5be6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b5bf6:	28aa      	cmp	r0, #170	; 0xaa
   b5bf8:	d104      	bne.n	b5c04 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b5bfa:	2302      	movs	r3, #2
   b5bfc:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b5bfe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b5c02:	e7dd      	b.n	b5bc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b5c04:	2325      	movs	r3, #37	; 0x25
   b5c06:	e7bc      	b.n	b5b82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b5c08:	7aa3      	ldrb	r3, [r4, #10]
   b5c0a:	2b02      	cmp	r3, #2
   b5c0c:	d118      	bne.n	b5c40 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b5c0e:	213a      	movs	r1, #58	; 0x3a
   b5c10:	4620      	mov	r0, r4
   b5c12:	f7ff ff39 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5c16:	b108      	cbz	r0, b5c1c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b5c18:	2337      	movs	r3, #55	; 0x37
   b5c1a:	e7b2      	b.n	b5b82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b5c1c:	6860      	ldr	r0, [r4, #4]
   b5c1e:	f7ff fea4 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5c22:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b5c26:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b5c28:	bf04      	itt	eq
   b5c2a:	2303      	moveq	r3, #3
   b5c2c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b5c2e:	6860      	ldr	r0, [r4, #4]
   b5c30:	f7ff fe9b 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5c34:	6860      	ldr	r0, [r4, #4]
   b5c36:	f7ff fe98 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5c3a:	6860      	ldr	r0, [r4, #4]
   b5c3c:	f7ff fe95 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b5c40:	4620      	mov	r0, r4
   b5c42:	f7ff fec8 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b5c46:	6863      	ldr	r3, [r4, #4]
   b5c48:	7930      	ldrb	r0, [r6, #4]
   b5c4a:	68b1      	ldr	r1, [r6, #8]
   b5c4c:	89b2      	ldrh	r2, [r6, #12]
   b5c4e:	821a      	strh	r2, [r3, #16]
   b5c50:	7218      	strb	r0, [r3, #8]
   b5c52:	60d9      	str	r1, [r3, #12]
  return true;
   b5c54:	2001      	movs	r0, #1
   b5c56:	e799      	b.n	b5b8c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b5c58:	0003d090 	.word	0x0003d090

000b5c5c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5c5c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5c5e:	7a83      	ldrb	r3, [r0, #10]
   b5c60:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5c62:	bf18      	it	ne
   b5c64:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5c66:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b5c68:	460a      	mov	r2, r1
   b5c6a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b5c6c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b5c6e:	f7ff ff0b 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5c72:	b130      	cbz	r0, b5c82 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b5c74:	2330      	movs	r3, #48	; 0x30
   b5c76:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5c78:	4620      	mov	r0, r4
   b5c7a:	f7ff feac 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5c7e:	2500      	movs	r5, #0
   b5c80:	e00b      	b.n	b5c9a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b5c82:	4629      	mov	r1, r5
   b5c84:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff feb7 	bl	b59fc <_ZN9SdSpiCard8readDataEPhj>
   b5c8e:	4605      	mov	r5, r0
   b5c90:	2800      	cmp	r0, #0
   b5c92:	d0f1      	beq.n	b5c78 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b5c94:	4620      	mov	r0, r4
   b5c96:	f7ff fe9e 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
}
   b5c9a:	4628      	mov	r0, r5
   b5c9c:	bd38      	pop	{r3, r4, r5, pc}

000b5c9e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5c9e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5ca0:	7a83      	ldrb	r3, [r0, #10]
   b5ca2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5ca4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5ca6:	bf18      	it	ne
   b5ca8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b5caa:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b5cac:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b5cae:	f7ff feeb 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5cb2:	b130      	cbz	r0, b5cc2 <_ZN9SdSpiCard9readStartEm+0x24>
   b5cb4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b5cb6:	4620      	mov	r0, r4
   b5cb8:	7023      	strb	r3, [r4, #0]
   b5cba:	f7ff fe8c 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5cbe:	2000      	movs	r0, #0
}
   b5cc0:	bd10      	pop	{r4, pc}
  return true;
   b5cc2:	2001      	movs	r0, #1
   b5cc4:	e7fc      	b.n	b5cc0 <_ZN9SdSpiCard9readStartEm+0x22>

000b5cc6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b5cc6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b5cc8:	2200      	movs	r2, #0
   b5cca:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b5ccc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b5cce:	f7ff fedb 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5cd2:	b130      	cbz	r0, b5ce2 <_ZN9SdSpiCard8readStopEv+0x1c>
   b5cd4:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	7023      	strb	r3, [r4, #0]
   b5cda:	f7ff fe7c 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5cde:	2000      	movs	r0, #0
}
   b5ce0:	bd10      	pop	{r4, pc}
  spiStop();
   b5ce2:	4620      	mov	r0, r4
   b5ce4:	f7ff fe77 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b5ce8:	2001      	movs	r0, #1
   b5cea:	e7f9      	b.n	b5ce0 <_ZN9SdSpiCard8readStopEv+0x1a>

000b5cec <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b5cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cee:	4604      	mov	r4, r0
   b5cf0:	4616      	mov	r6, r2
   b5cf2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b5cf4:	f7ff ffd3 	bl	b5c9e <_ZN9SdSpiCard9readStartEm>
   b5cf8:	b168      	cbz	r0, b5d16 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b5cfa:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b5cfc:	b2ab      	uxth	r3, r5
   b5cfe:	429f      	cmp	r7, r3
   b5d00:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b5d04:	d909      	bls.n	b5d1a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b5d06:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5d0a:	4620      	mov	r0, r4
   b5d0c:	f7ff fe76 	bl	b59fc <_ZN9SdSpiCard8readDataEPhj>
   b5d10:	3501      	adds	r5, #1
   b5d12:	2800      	cmp	r0, #0
   b5d14:	d1f2      	bne.n	b5cfc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b5d16:	2000      	movs	r0, #0
   b5d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b5d1a:	4620      	mov	r0, r4
}
   b5d1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b5d20:	f7ff bfd1 	b.w	b5cc6 <_ZN9SdSpiCard8readStopEv>

000b5d24 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b5d24:	b538      	push	{r3, r4, r5, lr}
   b5d26:	4604      	mov	r4, r0
   b5d28:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b5d2a:	6840      	ldr	r0, [r0, #4]
   b5d2c:	f7ff fe1b 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b5d30:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5d34:	6860      	ldr	r0, [r4, #4]
   b5d36:	4629      	mov	r1, r5
   b5d38:	f000 f8e6 	bl	b5f08 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b5d3c:	6860      	ldr	r0, [r4, #4]
   b5d3e:	21ff      	movs	r1, #255	; 0xff
   b5d40:	f7ff fe11 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b5d44:	6860      	ldr	r0, [r4, #4]
   b5d46:	21ff      	movs	r1, #255	; 0xff
   b5d48:	f7ff fe0d 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b5d4c:	6860      	ldr	r0, [r4, #4]
   b5d4e:	f7ff fe0c 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5d52:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b5d54:	f000 001f 	and.w	r0, r0, #31
   b5d58:	2805      	cmp	r0, #5
   b5d5a:	d006      	beq.n	b5d6a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b5d5c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5d5e:	4620      	mov	r0, r4
   b5d60:	7023      	strb	r3, [r4, #0]
   b5d62:	f7ff fe38 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5d66:	2000      	movs	r0, #0
}
   b5d68:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b5d6a:	2001      	movs	r0, #1
   b5d6c:	e7fc      	b.n	b5d68 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b5d6e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5d6e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b5d70:	7a83      	ldrb	r3, [r0, #10]
   b5d72:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b5d74:	bf18      	it	ne
   b5d76:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5d78:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b5d7a:	460a      	mov	r2, r1
   b5d7c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b5d7e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b5d80:	f7ff fe82 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5d84:	4606      	mov	r6, r0
   b5d86:	b130      	cbz	r0, b5d96 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b5d88:	2332      	movs	r3, #50	; 0x32
   b5d8a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5d8c:	4620      	mov	r0, r4
   b5d8e:	f7ff fe22 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5d92:	2500      	movs	r5, #0
   b5d94:	e01f      	b.n	b5dd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b5d96:	462a      	mov	r2, r5
   b5d98:	21fe      	movs	r1, #254	; 0xfe
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	f7ff ffc2 	bl	b5d24 <_ZN9SdSpiCard9writeDataEhPKh>
   b5da0:	2800      	cmp	r0, #0
   b5da2:	d0f3      	beq.n	b5d8c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5da4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b5da8:	4620      	mov	r0, r4
   b5daa:	f7ff fe58 	bl	b5a5e <_ZN9SdSpiCard11waitNotBusyEt>
   b5dae:	4605      	mov	r5, r0
   b5db0:	b908      	cbnz	r0, b5db6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b5db2:	235a      	movs	r3, #90	; 0x5a
   b5db4:	e7e9      	b.n	b5d8a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b5db6:	4632      	mov	r2, r6
   b5db8:	210d      	movs	r1, #13
   b5dba:	4620      	mov	r0, r4
   b5dbc:	f7ff fe64 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5dc0:	b108      	cbz	r0, b5dc6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b5dc2:	2329      	movs	r3, #41	; 0x29
   b5dc4:	e7e1      	b.n	b5d8a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b5dc6:	6860      	ldr	r0, [r4, #4]
   b5dc8:	f7ff fdcf 	bl	b596a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5dcc:	2800      	cmp	r0, #0
   b5dce:	d1f8      	bne.n	b5dc2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	f7ff fe00 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
}
   b5dd6:	4628      	mov	r0, r5
   b5dd8:	bd70      	pop	{r4, r5, r6, pc}

000b5dda <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b5dda:	b513      	push	{r0, r1, r4, lr}
   b5ddc:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5dde:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b5de2:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5de4:	f7ff fe3b 	bl	b5a5e <_ZN9SdSpiCard11waitNotBusyEt>
   b5de8:	9a01      	ldr	r2, [sp, #4]
   b5dea:	b930      	cbnz	r0, b5dfa <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b5dec:	235b      	movs	r3, #91	; 0x5b
   b5dee:	7023      	strb	r3, [r4, #0]
  spiStop();
   b5df0:	4620      	mov	r0, r4
   b5df2:	f7ff fdf0 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5df6:	2000      	movs	r0, #0
   b5df8:	e005      	b.n	b5e06 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b5dfa:	21fc      	movs	r1, #252	; 0xfc
   b5dfc:	4620      	mov	r0, r4
   b5dfe:	f7ff ff91 	bl	b5d24 <_ZN9SdSpiCard9writeDataEhPKh>
   b5e02:	2800      	cmp	r0, #0
   b5e04:	d0f4      	beq.n	b5df0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b5e06:	b002      	add	sp, #8
   b5e08:	bd10      	pop	{r4, pc}

000b5e0a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5e0a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b5e0c:	7a83      	ldrb	r3, [r0, #10]
   b5e0e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5e10:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b5e12:	bf18      	it	ne
   b5e14:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b5e16:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b5e18:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b5e1a:	f7ff fe35 	bl	b5a88 <_ZN9SdSpiCard11cardCommandEhm>
   b5e1e:	b130      	cbz	r0, b5e2e <_ZN9SdSpiCard10writeStartEm+0x24>
   b5e20:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b5e22:	4620      	mov	r0, r4
   b5e24:	7023      	strb	r3, [r4, #0]
   b5e26:	f7ff fdd6 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5e2a:	2000      	movs	r0, #0
}
   b5e2c:	bd10      	pop	{r4, pc}
  return true;
   b5e2e:	2001      	movs	r0, #1
   b5e30:	e7fc      	b.n	b5e2c <_ZN9SdSpiCard10writeStartEm+0x22>

000b5e32 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b5e32:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5e34:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b5e38:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b5e3a:	f7ff fe10 	bl	b5a5e <_ZN9SdSpiCard11waitNotBusyEt>
   b5e3e:	4605      	mov	r5, r0
   b5e40:	b930      	cbnz	r0, b5e50 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b5e42:	2356      	movs	r3, #86	; 0x56
   b5e44:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b5e46:	4620      	mov	r0, r4
   b5e48:	f7ff fdc5 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b5e4c:	4628      	mov	r0, r5
   b5e4e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b5e50:	6860      	ldr	r0, [r4, #4]
   b5e52:	21fd      	movs	r1, #253	; 0xfd
   b5e54:	f7ff fd87 	bl	b5966 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5e58:	e7f5      	b.n	b5e46 <_ZN9SdSpiCard9writeStopEv+0x14>

000b5e5a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b5e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e5c:	4604      	mov	r4, r0
   b5e5e:	4616      	mov	r6, r2
   b5e60:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b5e62:	f7ff ffd2 	bl	b5e0a <_ZN9SdSpiCard10writeStartEm>
   b5e66:	b170      	cbz	r0, b5e86 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5e68:	2500      	movs	r5, #0
   b5e6a:	42bd      	cmp	r5, r7
   b5e6c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b5e70:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b5e72:	d004      	beq.n	b5e7e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b5e74:	f7ff ffb1 	bl	b5dda <_ZN9SdSpiCard9writeDataEPKh>
   b5e78:	b128      	cbz	r0, b5e86 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b5e7a:	3501      	adds	r5, #1
   b5e7c:	e7f5      	b.n	b5e6a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b5e7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b5e82:	f7ff bfd6 	b.w	b5e32 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b5e86:	4620      	mov	r0, r4
   b5e88:	f7ff fda5 	bl	b59d6 <_ZN9SdSpiCard7spiStopEv>
}
   b5e8c:	2000      	movs	r0, #0
   b5e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e90 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b5e90:	4b01      	ldr	r3, [pc, #4]	; (b5e98 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b5e92:	2201      	movs	r2, #1
   b5e94:	701a      	strb	r2, [r3, #0]
}
   b5e96:	4770      	bx	lr
   b5e98:	2003e64c 	.word	0x2003e64c

000b5e9c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b5e9c:	1d01      	adds	r1, r0, #4
   b5e9e:	6800      	ldr	r0, [r0, #0]
   b5ea0:	f002 bb8e 	b.w	b85c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b5ea4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b5ea4:	b510      	push	{r4, lr}
   b5ea6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b5ea8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b5eaa:	6800      	ldr	r0, [r0, #0]
   b5eac:	f002 fb5a 	bl	b8564 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b5eb0:	7d20      	ldrb	r0, [r4, #20]
   b5eb2:	2101      	movs	r1, #1
   b5eb4:	f002 ff3c 	bl	b8d30 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b5eb8:	7d20      	ldrb	r0, [r4, #20]
   b5eba:	2101      	movs	r1, #1
}
   b5ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b5ec0:	f002 bf47 	b.w	b8d52 <digitalWrite>

000b5ec4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b5ec4:	6800      	ldr	r0, [r0, #0]
   b5ec6:	f002 bb61 	b.w	b858c <_ZN8SPIClass14endTransactionEv>

000b5eca <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b5eca:	6800      	ldr	r0, [r0, #0]
   b5ecc:	21ff      	movs	r1, #255	; 0xff
   b5ece:	f002 bbe5 	b.w	b869c <_ZN8SPIClass8transferEh>
	...

000b5ed4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b5ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ed6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5ed8:	4a07      	ldr	r2, [pc, #28]	; (b5ef8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b5eda:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5edc:	2500      	movs	r5, #0
   b5ede:	4c07      	ldr	r4, [pc, #28]	; (b5efc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5ee0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5ee2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b5ee4:	460a      	mov	r2, r1
   b5ee6:	4629      	mov	r1, r5
   b5ee8:	f002 fbde 	bl	b86a8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b5eec:	7823      	ldrb	r3, [r4, #0]
   b5eee:	2b00      	cmp	r3, #0
   b5ef0:	d0fc      	beq.n	b5eec <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b5ef2:	2000      	movs	r0, #0
   b5ef4:	b003      	add	sp, #12
   b5ef6:	bd30      	pop	{r4, r5, pc}
   b5ef8:	000b5e91 	.word	0x000b5e91
   b5efc:	2003e64c 	.word	0x2003e64c

000b5f00 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b5f00:	6800      	ldr	r0, [r0, #0]
   b5f02:	f002 bbcb 	b.w	b869c <_ZN8SPIClass8transferEh>
	...

000b5f08 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b5f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5f0a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5f0c:	4a06      	ldr	r2, [pc, #24]	; (b5f28 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b5f0e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b5f10:	2500      	movs	r5, #0
   b5f12:	4c06      	ldr	r4, [pc, #24]	; (b5f2c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5f14:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b5f16:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b5f18:	462a      	mov	r2, r5
   b5f1a:	f002 fbc5 	bl	b86a8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b5f1e:	7823      	ldrb	r3, [r4, #0]
   b5f20:	2b00      	cmp	r3, #0
   b5f22:	d0fc      	beq.n	b5f1e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b5f24:	b003      	add	sp, #12
   b5f26:	bd30      	pop	{r4, r5, pc}
   b5f28:	000b5e91 	.word	0x000b5e91
   b5f2c:	2003e64c 	.word	0x2003e64c

000b5f30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <os_mutex_recursive_create+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	00030248 	.word	0x00030248

000b5f40 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <os_mutex_recursive_destroy+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	00030248 	.word	0x00030248

000b5f50 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <os_mutex_recursive_lock+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	00030248 	.word	0x00030248

000b5f60 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <os_mutex_recursive_unlock+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	00030248 	.word	0x00030248

000b5f70 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <HAL_RNG_GetRandomNumber+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	685b      	ldr	r3, [r3, #4]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030218 	.word	0x00030218

000b5f80 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <HAL_Delay_Microseconds+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	68db      	ldr	r3, [r3, #12]
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030218 	.word	0x00030218

000b5f90 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	691b      	ldr	r3, [r3, #16]
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030218 	.word	0x00030218

000b5fa0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	695b      	ldr	r3, [r3, #20]
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030218 	.word	0x00030218

000b5fb0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <hal_rtc_time_is_valid+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030218 	.word	0x00030218

000b5fc0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <hal_rtc_get_time+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030218 	.word	0x00030218

000b5fd0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <HAL_Validate_Pin_Function+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	685b      	ldr	r3, [r3, #4]
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	0003022c 	.word	0x0003022c

000b5fe0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <HAL_Pin_Mode+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	689b      	ldr	r3, [r3, #8]
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	0003022c 	.word	0x0003022c

000b5ff0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <HAL_Get_Pin_Mode+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	68db      	ldr	r3, [r3, #12]
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	0003022c 	.word	0x0003022c

000b6000 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <HAL_GPIO_Write+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	691b      	ldr	r3, [r3, #16]
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	0003022c 	.word	0x0003022c

000b6010 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <hal_adc_read+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	0003022c 	.word	0x0003022c

000b6020 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <hal_i2c_begin_transmission+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	699b      	ldr	r3, [r3, #24]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	00030228 	.word	0x00030228

000b6030 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <hal_i2c_end_transmission+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	69db      	ldr	r3, [r3, #28]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	00030228 	.word	0x00030228

000b6040 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <hal_i2c_write+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	6a1b      	ldr	r3, [r3, #32]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	00030228 	.word	0x00030228

000b6050 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <hal_i2c_available+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	00030228 	.word	0x00030228

000b6060 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <hal_i2c_read+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030228 	.word	0x00030228

000b6070 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <hal_i2c_peek+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	00030228 	.word	0x00030228

000b6080 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <hal_i2c_flush+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030228 	.word	0x00030228

000b6090 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <hal_i2c_is_enabled+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030228 	.word	0x00030228

000b60a0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <hal_i2c_init+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030228 	.word	0x00030228

000b60b0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <hal_i2c_lock+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030228 	.word	0x00030228

000b60c0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <hal_i2c_unlock+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030228 	.word	0x00030228

000b60d0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <hal_i2c_request_ex+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030228 	.word	0x00030228

000b60e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <inet_inet_ntop+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	695b      	ldr	r3, [r3, #20]
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030264 	.word	0x00030264

000b60f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <netdb_freeaddrinfo+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	689b      	ldr	r3, [r3, #8]
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030268 	.word	0x00030268

000b6100 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <netdb_getaddrinfo+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	68db      	ldr	r3, [r3, #12]
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030268 	.word	0x00030268

000b6110 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <hal_spi_begin+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	681b      	ldr	r3, [r3, #0]
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030230 	.word	0x00030230

000b6120 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <hal_spi_transfer+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	695b      	ldr	r3, [r3, #20]
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030230 	.word	0x00030230

000b6130 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <hal_spi_init+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	69db      	ldr	r3, [r3, #28]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030230 	.word	0x00030230

000b6140 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <hal_spi_is_enabled+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	6a1b      	ldr	r3, [r3, #32]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030230 	.word	0x00030230

000b6150 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <hal_spi_info+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030230 	.word	0x00030230

000b6160 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <hal_spi_transfer_dma+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030230 	.word	0x00030230

000b6170 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <hal_spi_transfer_dma_status+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	00030230 	.word	0x00030230

000b6180 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <hal_spi_set_settings+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	00030230 	.word	0x00030230

000b6190 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <hal_spi_acquire+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030230 	.word	0x00030230

000b61a0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <hal_spi_release+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030230 	.word	0x00030230

000b61b0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <hal_usart_end+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	689b      	ldr	r3, [r3, #8]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	0003023c 	.word	0x0003023c

000b61c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <hal_usart_write+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	68db      	ldr	r3, [r3, #12]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	0003023c 	.word	0x0003023c

000b61d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <hal_usart_available+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	691b      	ldr	r3, [r3, #16]
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	0003023c 	.word	0x0003023c

000b61e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <hal_usart_read+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	695b      	ldr	r3, [r3, #20]
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	0003023c 	.word	0x0003023c

000b61f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <hal_usart_peek+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	699b      	ldr	r3, [r3, #24]
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	0003023c 	.word	0x0003023c

000b6200 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <hal_usart_flush+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	69db      	ldr	r3, [r3, #28]
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	0003023c 	.word	0x0003023c

000b6210 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <hal_usart_is_enabled+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	6a1b      	ldr	r3, [r3, #32]
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	0003023c 	.word	0x0003023c

000b6220 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <hal_usart_available_data_for_write+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	0003023c 	.word	0x0003023c

000b6230 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <hal_usart_begin_config+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	0003023c 	.word	0x0003023c

000b6240 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <hal_usart_init_ex+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	0003023c 	.word	0x0003023c

000b6250 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <HAL_USB_USART_Init+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	681b      	ldr	r3, [r3, #0]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	0003024c 	.word	0x0003024c

000b6260 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <HAL_USB_USART_Begin+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	685b      	ldr	r3, [r3, #4]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	0003024c 	.word	0x0003024c

000b6270 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <HAL_USB_USART_End+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	689b      	ldr	r3, [r3, #8]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	0003024c 	.word	0x0003024c

000b6280 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <HAL_USB_USART_Available_Data+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	691b      	ldr	r3, [r3, #16]
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	0003024c 	.word	0x0003024c

000b6290 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	695b      	ldr	r3, [r3, #20]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	0003024c 	.word	0x0003024c

000b62a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <HAL_USB_USART_Receive_Data+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	699b      	ldr	r3, [r3, #24]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	0003024c 	.word	0x0003024c

000b62b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <HAL_USB_USART_Send_Data+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	69db      	ldr	r3, [r3, #28]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	0003024c 	.word	0x0003024c

000b62c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <HAL_USB_USART_Flush_Data+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6a1b      	ldr	r3, [r3, #32]
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	0003024c 	.word	0x0003024c

000b62d0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <panic_+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030260 	.word	0x00030260

000b62e0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <log_message+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030260 	.word	0x00030260

000b62f0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <log_message_v+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030260 	.word	0x00030260

000b6300 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <log_level_name+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	00030260 	.word	0x00030260

000b6310 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <log_set_callbacks+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	00030260 	.word	0x00030260

000b6320 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <system_mode+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	681b      	ldr	r3, [r3, #0]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	00030220 	.word	0x00030220

000b6330 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <set_system_mode+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	685b      	ldr	r3, [r3, #4]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030220 	.word	0x00030220

000b6340 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <system_delay_ms+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	695b      	ldr	r3, [r3, #20]
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030220 	.word	0x00030220

000b6350 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <system_thread_set_state+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030220 	.word	0x00030220

000b6360 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <application_thread_current+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030220 	.word	0x00030220

000b6370 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <application_thread_invoke+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030220 	.word	0x00030220

000b6380 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <system_thread_get_state+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	00030220 	.word	0x00030220

000b6390 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b03      	ldr	r3, [pc, #12]	; (b63a0 <system_ctrl_set_app_request_handler+0x10>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b639a:	9301      	str	r3, [sp, #4]
   b639c:	bd08      	pop	{r3, pc}
   b639e:	0000      	.short	0x0000
   b63a0:	00030220 	.word	0x00030220

000b63a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b03      	ldr	r3, [pc, #12]	; (b63b4 <system_ctrl_set_result+0x10>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b63ae:	9301      	str	r3, [sp, #4]
   b63b0:	bd08      	pop	{r3, pc}
   b63b2:	0000      	.short	0x0000
   b63b4:	00030220 	.word	0x00030220

000b63b8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b63b8:	b508      	push	{r3, lr}
   b63ba:	4b03      	ldr	r3, [pc, #12]	; (b63c8 <system_sleep_ext+0x10>)
   b63bc:	681b      	ldr	r3, [r3, #0]
   b63be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b63c2:	9301      	str	r3, [sp, #4]
   b63c4:	bd08      	pop	{r3, pc}
   b63c6:	0000      	.short	0x0000
   b63c8:	00030220 	.word	0x00030220

000b63cc <system_power_management_get_config>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   b63cc:	b508      	push	{r3, lr}
   b63ce:	4b03      	ldr	r3, [pc, #12]	; (b63dc <system_power_management_get_config+0x10>)
   b63d0:	681b      	ldr	r3, [r3, #0]
   b63d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b63d6:	9301      	str	r3, [sp, #4]
   b63d8:	bd08      	pop	{r3, pc}
   b63da:	0000      	.short	0x0000
   b63dc:	00030220 	.word	0x00030220

000b63e0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <spark_process+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	689b      	ldr	r3, [r3, #8]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	00030244 	.word	0x00030244

000b63f0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <spark_cloud_flag_connect+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	68db      	ldr	r3, [r3, #12]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	00030244 	.word	0x00030244

000b6400 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <spark_cloud_flag_connected+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	695b      	ldr	r3, [r3, #20]
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	00030244 	.word	0x00030244

000b6410 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <spark_send_event+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	6a1b      	ldr	r3, [r3, #32]
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030244 	.word	0x00030244

000b6420 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <spark_sync_time_pending+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030244 	.word	0x00030244

000b6430 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030244 	.word	0x00030244

000b6440 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <network_connect+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	685b      	ldr	r3, [r3, #4]
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030240 	.word	0x00030240

000b6450 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <network_connecting+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	689b      	ldr	r3, [r3, #8]
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030240 	.word	0x00030240

000b6460 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <network_disconnect+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	68db      	ldr	r3, [r3, #12]
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030240 	.word	0x00030240

000b6470 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <network_ready+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	691b      	ldr	r3, [r3, #16]
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030240 	.word	0x00030240

000b6480 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <network_on+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	695b      	ldr	r3, [r3, #20]
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030240 	.word	0x00030240

000b6490 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <network_off+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	699b      	ldr	r3, [r3, #24]
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030240 	.word	0x00030240

000b64a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <network_listen+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	69db      	ldr	r3, [r3, #28]
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	00030240 	.word	0x00030240

000b64b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <network_listening+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	6a1b      	ldr	r3, [r3, #32]
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030240 	.word	0x00030240

000b64c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <network_set_listen_timeout+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030240 	.word	0x00030240

000b64d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <network_get_listen_timeout+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	00030240 	.word	0x00030240

000b64e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <network_is_on+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	00030240 	.word	0x00030240

000b64f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <network_is_off+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	00030240 	.word	0x00030240

000b6500 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <malloc+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	681b      	ldr	r3, [r3, #0]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	0003021c 	.word	0x0003021c

000b6510 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <free+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	685b      	ldr	r3, [r3, #4]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	0003021c 	.word	0x0003021c

000b6520 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <realloc+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	689b      	ldr	r3, [r3, #8]
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	0003021c 	.word	0x0003021c

000b6530 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <snprintf+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	69db      	ldr	r3, [r3, #28]
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	0003021c 	.word	0x0003021c

000b6540 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <vsnprintf+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	0003021c 	.word	0x0003021c

000b6550 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <abort+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	0003021c 	.word	0x0003021c

000b6560 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <_malloc_r+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	0003021c 	.word	0x0003021c

000b6570 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <__errno+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	0003021c 	.word	0x0003021c

000b6580 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <__assert_func+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	0003021c 	.word	0x0003021c

000b6590 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6590:	b508      	push	{r3, lr}
   b6592:	4b02      	ldr	r3, [pc, #8]	; (b659c <newlib_impure_ptr_callback+0xc>)
   b6594:	681b      	ldr	r3, [r3, #0]
   b6596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	bd08      	pop	{r3, pc}
   b659c:	0003021c 	.word	0x0003021c

000b65a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b65a0:	2100      	movs	r1, #0
   b65a2:	f7ff becd 	b.w	b6340 <system_delay_ms>

000b65a6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b65a6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b65a8:	6883      	ldr	r3, [r0, #8]
   b65aa:	4604      	mov	r4, r0
   b65ac:	b90b      	cbnz	r3, b65b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b65ae:	f002 fcc3 	bl	b8f38 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b65b2:	68c3      	ldr	r3, [r0, #12]
   b65b4:	4798      	blx	r3
      if (_M_manager)
   b65b6:	68a3      	ldr	r3, [r4, #8]
   b65b8:	b11b      	cbz	r3, b65c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b65ba:	2203      	movs	r2, #3
   b65bc:	4621      	mov	r1, r4
   b65be:	4620      	mov	r0, r4
   b65c0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b65c2:	4620      	mov	r0, r4
   b65c4:	2110      	movs	r1, #16
}
   b65c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b65ca:	f7fd bd66 	b.w	b409a <_ZdlPvj>

000b65ce <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b65ce:	b510      	push	{r4, lr}
      if (_M_manager)
   b65d0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b65d2:	4604      	mov	r4, r0
      if (_M_manager)
   b65d4:	b113      	cbz	r3, b65dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b65d6:	2203      	movs	r2, #3
   b65d8:	4601      	mov	r1, r0
   b65da:	4798      	blx	r3
    }
   b65dc:	4620      	mov	r0, r4
   b65de:	bd10      	pop	{r4, pc}

000b65e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b65e0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b65e2:	6843      	ldr	r3, [r0, #4]
   b65e4:	3b01      	subs	r3, #1
    {
   b65e6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b65e8:	6043      	str	r3, [r0, #4]
   b65ea:	b963      	cbnz	r3, b6606 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b65ec:	6803      	ldr	r3, [r0, #0]
   b65ee:	689b      	ldr	r3, [r3, #8]
   b65f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b65f2:	68a3      	ldr	r3, [r4, #8]
   b65f4:	3b01      	subs	r3, #1
   b65f6:	60a3      	str	r3, [r4, #8]
   b65f8:	b92b      	cbnz	r3, b6606 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b65fa:	6823      	ldr	r3, [r4, #0]
   b65fc:	4620      	mov	r0, r4
   b65fe:	68db      	ldr	r3, [r3, #12]
    }
   b6600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6604:	4718      	bx	r3
    }
   b6606:	bd10      	pop	{r4, pc}

000b6608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6608:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b660a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b660e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6610:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6614:	42ae      	cmp	r6, r5
   b6616:	d004      	beq.n	b6622 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b6618:	4628      	mov	r0, r5
   b661a:	f002 f858 	bl	b86ce <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b661e:	3510      	adds	r5, #16
   b6620:	e7f8      	b.n	b6614 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6622:	6820      	ldr	r0, [r4, #0]
   b6624:	f7ff ff74 	bl	b6510 <free>
    AllocatorT::free(data_);
}
   b6628:	4620      	mov	r0, r4
   b662a:	bd70      	pop	{r4, r5, r6, pc}

000b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b662c:	b510      	push	{r4, lr}
   b662e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6630:	6800      	ldr	r0, [r0, #0]
   b6632:	b108      	cbz	r0, b6638 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6634:	f7ff ffd4 	bl	b65e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6638:	4620      	mov	r0, r4
   b663a:	bd10      	pop	{r4, pc}

000b663c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b663c:	b513      	push	{r0, r1, r4, lr}
   b663e:	460b      	mov	r3, r1
   b6640:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6642:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6646:	466c      	mov	r4, sp
   b6648:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b664c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6650:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6654:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6658:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b665c:	b002      	add	sp, #8
   b665e:	bd10      	pop	{r4, pc}

000b6660 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6660:	4802      	ldr	r0, [pc, #8]	; (b666c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6662:	2300      	movs	r3, #0
   b6664:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6666:	f7ff bc63 	b.w	b5f30 <os_mutex_recursive_create>
   b666a:	bf00      	nop
   b666c:	2003e650 	.word	0x2003e650

000b6670 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6670:	2200      	movs	r2, #0
   b6672:	6840      	ldr	r0, [r0, #4]
   b6674:	4611      	mov	r1, r2
   b6676:	f7ff befb 	b.w	b6470 <network_ready>

000b667a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b667a:	2200      	movs	r2, #0
   b667c:	6840      	ldr	r0, [r0, #4]
   b667e:	4611      	mov	r1, r2
   b6680:	f7ff bf16 	b.w	b64b0 <network_listening>

000b6684 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6684:	2200      	movs	r2, #0
   b6686:	6840      	ldr	r0, [r0, #4]
   b6688:	4611      	mov	r1, r2
   b668a:	f7ff bf21 	b.w	b64d0 <network_get_listen_timeout>

000b668e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b668e:	6840      	ldr	r0, [r0, #4]
   b6690:	2200      	movs	r2, #0
   b6692:	f7ff bf15 	b.w	b64c0 <network_set_listen_timeout>

000b6696 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6696:	6840      	ldr	r0, [r0, #4]
   b6698:	2200      	movs	r2, #0
   b669a:	f081 0101 	eor.w	r1, r1, #1
   b669e:	f7ff beff 	b.w	b64a0 <network_listen>

000b66a2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b66a2:	2300      	movs	r3, #0
   b66a4:	6840      	ldr	r0, [r0, #4]
   b66a6:	461a      	mov	r2, r3
   b66a8:	4619      	mov	r1, r3
   b66aa:	f7ff bef1 	b.w	b6490 <network_off>

000b66ae <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b66ae:	2300      	movs	r3, #0
   b66b0:	6840      	ldr	r0, [r0, #4]
   b66b2:	461a      	mov	r2, r3
   b66b4:	4619      	mov	r1, r3
   b66b6:	f7ff bee3 	b.w	b6480 <network_on>

000b66ba <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b66ba:	2200      	movs	r2, #0
   b66bc:	6840      	ldr	r0, [r0, #4]
   b66be:	4611      	mov	r1, r2
   b66c0:	f7ff bec6 	b.w	b6450 <network_connecting>

000b66c4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b66c4:	6840      	ldr	r0, [r0, #4]
   b66c6:	2200      	movs	r2, #0
   b66c8:	2102      	movs	r1, #2
   b66ca:	f7ff bec9 	b.w	b6460 <network_disconnect>

000b66ce <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b66ce:	2300      	movs	r3, #0
   b66d0:	6840      	ldr	r0, [r0, #4]
   b66d2:	461a      	mov	r2, r3
   b66d4:	f7ff beb4 	b.w	b6440 <network_connect>

000b66d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b66d8:	4b08      	ldr	r3, [pc, #32]	; (b66fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b66da:	b510      	push	{r4, lr}
   b66dc:	2428      	movs	r4, #40	; 0x28
   b66de:	4622      	mov	r2, r4
   b66e0:	4618      	mov	r0, r3
   b66e2:	2100      	movs	r1, #0
   b66e4:	f003 f890 	bl	b9808 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b66e8:	4b05      	ldr	r3, [pc, #20]	; (b6700 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b66ea:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b66ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b66f0:	6042      	str	r2, [r0, #4]
   b66f2:	2204      	movs	r2, #4
   b66f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b66f6:	4a03      	ldr	r2, [pc, #12]	; (b6704 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b66f8:	601a      	str	r2, [r3, #0]
   b66fa:	bd10      	pop	{r4, pc}
   b66fc:	2003e65c 	.word	0x2003e65c
   b6700:	2003e654 	.word	0x2003e654
   b6704:	000b9d70 	.word	0x000b9d70

000b6708 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6708:	4770      	bx	lr

000b670a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b670a:	2000      	movs	r0, #0
   b670c:	4770      	bx	lr

000b670e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b670e:	b510      	push	{r4, lr}
   b6710:	2110      	movs	r1, #16
   b6712:	4604      	mov	r4, r0
   b6714:	f7fd fcc1 	bl	b409a <_ZdlPvj>
   b6718:	4620      	mov	r0, r4
   b671a:	bd10      	pop	{r4, pc}

000b671c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b671c:	b508      	push	{r3, lr}
      { delete this; }
   b671e:	f7ff fff6 	bl	b670e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6722:	bd08      	pop	{r3, pc}

000b6724 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6724:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6726:	2200      	movs	r2, #0
   b6728:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b672c:	6002      	str	r2, [r0, #0]
   b672e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6730:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6732:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6734:	680c      	ldr	r4, [r1, #0]
   b6736:	8085      	strh	r5, [r0, #4]
   b6738:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b673a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b673c:	bd30      	pop	{r4, r5, pc}

000b673e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b673e:	b510      	push	{r4, lr}
   b6740:	4604      	mov	r4, r0
    free((void*)msg_);
   b6742:	6800      	ldr	r0, [r0, #0]
   b6744:	f7ff fee4 	bl	b6510 <free>
}
   b6748:	4620      	mov	r0, r4
   b674a:	bd10      	pop	{r4, pc}

000b674c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b674c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b674e:	68c4      	ldr	r4, [r0, #12]
   b6750:	b1f4      	cbz	r4, b6790 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   b6752:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6754:	2b02      	cmp	r3, #2
   b6756:	d103      	bne.n	b6760 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6758:	f104 000c 	add.w	r0, r4, #12
   b675c:	f7ff ffef 	bl	b673e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6760:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6762:	b135      	cbz	r5, b6772 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6764:	4628      	mov	r0, r5
   b6766:	f7ff ff32 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
   b676a:	2110      	movs	r1, #16
   b676c:	4628      	mov	r0, r5
   b676e:	f7fd fc94 	bl	b409a <_ZdlPvj>
   b6772:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6774:	b135      	cbz	r5, b6784 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6776:	4628      	mov	r0, r5
   b6778:	f7ff ff29 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
   b677c:	2110      	movs	r1, #16
   b677e:	4628      	mov	r0, r5
   b6780:	f7fd fc8b 	bl	b409a <_ZdlPvj>
   b6784:	4620      	mov	r0, r4
   b6786:	2114      	movs	r1, #20
   b6788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b678c:	f7fd bc85 	b.w	b409a <_ZdlPvj>
   b6790:	bd38      	pop	{r3, r4, r5, pc}

000b6792 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6792:	680b      	ldr	r3, [r1, #0]
   b6794:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6796:	684b      	ldr	r3, [r1, #4]
   b6798:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b679a:	b113      	cbz	r3, b67a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b679c:	685a      	ldr	r2, [r3, #4]
   b679e:	3201      	adds	r2, #1
   b67a0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b67a2:	4770      	bx	lr

000b67a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b67a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b67a6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b67a8:	4668      	mov	r0, sp
   b67aa:	460d      	mov	r5, r1
   b67ac:	f7ff fff1 	bl	b6792 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67b0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b67b2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67b4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b67b6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b67b8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b67ba:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b67bc:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b67be:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b67c0:	f7ff ff34 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b67c4:	b135      	cbz	r5, b67d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b67c6:	1d28      	adds	r0, r5, #4
   b67c8:	f7ff ff30 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67cc:	2108      	movs	r1, #8
   b67ce:	4628      	mov	r0, r5
   b67d0:	f7fd fc63 	bl	b409a <_ZdlPvj>
        return p;
    }
   b67d4:	4620      	mov	r0, r4
   b67d6:	b003      	add	sp, #12
   b67d8:	bd30      	pop	{r4, r5, pc}

000b67da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b67da:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b67dc:	b510      	push	{r4, lr}
      if (_M_empty())
   b67de:	b90a      	cbnz	r2, b67e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b67e0:	f002 fbaa 	bl	b8f38 <_ZSt25__throw_bad_function_callv>
    }
   b67e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b67e8:	68c3      	ldr	r3, [r0, #12]
   b67ea:	4718      	bx	r3

000b67ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b67ec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b67ee:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b67f0:	f100 0110 	add.w	r1, r0, #16
   b67f4:	f7ff fff1 	bl	b67da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b67f8:	bd08      	pop	{r3, pc}

000b67fa <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b67fa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b67fc:	b510      	push	{r4, lr}
      if (_M_empty())
   b67fe:	b90a      	cbnz	r2, b6804 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6800:	f002 fb9a 	bl	b8f38 <_ZSt25__throw_bad_function_callv>
    }
   b6804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6808:	68c3      	ldr	r3, [r0, #12]
   b680a:	4718      	bx	r3

000b680c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b680c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b680e:	6800      	ldr	r0, [r0, #0]
   b6810:	f100 0110 	add.w	r1, r0, #16
   b6814:	f7ff fff1 	bl	b67fa <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6818:	bd08      	pop	{r3, pc}
	...

000b681c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b681c:	b538      	push	{r3, r4, r5, lr}
   b681e:	2300      	movs	r3, #0
   b6820:	4604      	mov	r4, r0
   b6822:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6824:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6826:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6828:	f7fd fc33 	bl	b4092 <_Znwj>
   b682c:	b128      	cbz	r0, b683a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b682e:	2301      	movs	r3, #1
   b6830:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6834:	4b02      	ldr	r3, [pc, #8]	; (b6840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6836:	6003      	str	r3, [r0, #0]
   b6838:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b683a:	6020      	str	r0, [r4, #0]
	}
   b683c:	4620      	mov	r0, r4
   b683e:	bd38      	pop	{r3, r4, r5, pc}
   b6840:	000b9dac 	.word	0x000b9dac

000b6844 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6844:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6846:	2300      	movs	r3, #0
   b6848:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b684a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b684c:	4604      	mov	r4, r0
   b684e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6850:	b12b      	cbz	r3, b685e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6852:	2202      	movs	r2, #2
   b6854:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6856:	68eb      	ldr	r3, [r5, #12]
   b6858:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b685a:	68ab      	ldr	r3, [r5, #8]
   b685c:	60a3      	str	r3, [r4, #8]
    }
   b685e:	4620      	mov	r0, r4
   b6860:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6864:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6866:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b6868:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b686a:	4668      	mov	r0, sp
   b686c:	f7ff ff5a 	bl	b6724 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6870:	f04f 0302 	mov.w	r3, #2
   b6874:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6878:	2a00      	cmp	r2, #0
   b687a:	d103      	bne.n	b6884 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b687c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6880:	2900      	cmp	r1, #0
   b6882:	d1f7      	bne.n	b6874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6884:	d125      	bne.n	b68d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6886:	f104 050c 	add.w	r5, r4, #12
   b688a:	4669      	mov	r1, sp
   b688c:	4628      	mov	r0, r5
   b688e:	f7ff ff49 	bl	b6724 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6892:	f3bf 8f5b 	dmb	ish
   b6896:	2301      	movs	r3, #1
   b6898:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b689a:	2000      	movs	r0, #0
   b689c:	f104 0308 	add.w	r3, r4, #8
   b68a0:	f3bf 8f5b 	dmb	ish
   b68a4:	e853 6f00 	ldrex	r6, [r3]
   b68a8:	e843 0200 	strex	r2, r0, [r3]
   b68ac:	2a00      	cmp	r2, #0
   b68ae:	d1f9      	bne.n	b68a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b68b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b68b4:	b16e      	cbz	r6, b68d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b68b6:	f7ff fd53 	bl	b6360 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b68ba:	b178      	cbz	r0, b68dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b68bc:	4629      	mov	r1, r5
   b68be:	4630      	mov	r0, r6
   b68c0:	f7ff ff8b 	bl	b67da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b68c4:	4630      	mov	r0, r6
   b68c6:	f7ff fe82 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b68ca:	2110      	movs	r1, #16
   b68cc:	4630      	mov	r0, r6
   b68ce:	f7fd fbe4 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b68d2:	4668      	mov	r0, sp
   b68d4:	f7ff ff33 	bl	b673e <_ZN8particle5ErrorD1Ev>
    }
   b68d8:	b009      	add	sp, #36	; 0x24
   b68da:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b68dc:	4631      	mov	r1, r6
   b68de:	a802      	add	r0, sp, #8
   b68e0:	f7ff ffb0 	bl	b6844 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b68e4:	68e0      	ldr	r0, [r4, #12]
   b68e6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b68ea:	b108      	cbz	r0, b68f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b68ec:	f002 ffec 	bl	b98c8 <strdup>
        type_(type) {
   b68f0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b68f2:	2010      	movs	r0, #16
   b68f4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b68f8:	f7fd fbcb 	bl	b4092 <_Znwj>
   b68fc:	4605      	mov	r5, r0
   b68fe:	b1e8      	cbz	r0, b693c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6900:	2700      	movs	r7, #0
   b6902:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6904:	2018      	movs	r0, #24
   b6906:	f7fd fbc4 	bl	b4092 <_Znwj>
   b690a:	4604      	mov	r4, r0
   b690c:	b188      	cbz	r0, b6932 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b690e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6910:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6912:	a802      	add	r0, sp, #8
   b6914:	f7ff fe92 	bl	b663c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6918:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b691a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b691c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b691e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6920:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6922:	a906      	add	r1, sp, #24
   b6924:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6926:	60e3      	str	r3, [r4, #12]
   b6928:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b692c:	9205      	str	r2, [sp, #20]
   b692e:	f7ff fef9 	bl	b6724 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6932:	4b08      	ldr	r3, [pc, #32]	; (b6954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6934:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6936:	4b08      	ldr	r3, [pc, #32]	; (b6958 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6938:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b693a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b693c:	a806      	add	r0, sp, #24
   b693e:	f7ff fefe 	bl	b673e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6942:	a802      	add	r0, sp, #8
   b6944:	f7ff fe43 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6948:	2200      	movs	r2, #0
   b694a:	4629      	mov	r1, r5
   b694c:	4803      	ldr	r0, [pc, #12]	; (b695c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b694e:	f7ff fd0f 	bl	b6370 <application_thread_invoke>
   b6952:	e7b7      	b.n	b68c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6954:	000b67ed 	.word	0x000b67ed
   b6958:	000b6a71 	.word	0x000b6a71
   b695c:	000b65a7 	.word	0x000b65a7

000b6960 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6964:	b08b      	sub	sp, #44	; 0x2c
   b6966:	4605      	mov	r5, r0
   b6968:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b696c:	460f      	mov	r7, r1
   b696e:	4690      	mov	r8, r2
   b6970:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6972:	f7ff fd45 	bl	b6400 <spark_cloud_flag_connected>
   b6976:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6978:	4683      	mov	fp, r0
   b697a:	bb38      	cbnz	r0, b69cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b697c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6980:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6982:	a905      	add	r1, sp, #20
   b6984:	4630      	mov	r0, r6
   b6986:	f8ad 3018 	strh.w	r3, [sp, #24]
   b698a:	f7ff fecb 	bl	b6724 <_ZN8particle5ErrorC1EOS0_>
   b698e:	2014      	movs	r0, #20
   b6990:	f7fd fb7f 	bl	b4092 <_Znwj>
   b6994:	4604      	mov	r4, r0
   b6996:	b148      	cbz	r0, b69ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6998:	2302      	movs	r3, #2
   b699a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b699c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b699e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b69a2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b69a4:	4631      	mov	r1, r6
   b69a6:	300c      	adds	r0, #12
   b69a8:	f7ff febc 	bl	b6724 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b69ac:	4628      	mov	r0, r5
	: __shared_count(__p)
   b69ae:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b69b0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b69b4:	f7ff ff32 	bl	b681c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b69b8:	4630      	mov	r0, r6
   b69ba:	f7ff fec0 	bl	b673e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b69be:	a805      	add	r0, sp, #20
   b69c0:	f7ff febd 	bl	b673e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b69c4:	4628      	mov	r0, r5
   b69c6:	b00b      	add	sp, #44	; 0x2c
   b69c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b69cc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b69ce:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b69d0:	2014      	movs	r0, #20
   b69d2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b69d6:	9307      	str	r3, [sp, #28]
   b69d8:	f7fd fb5b 	bl	b4092 <_Znwj>
   b69dc:	4601      	mov	r1, r0
   b69de:	b118      	cbz	r0, b69e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b69e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b69e4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b69e6:	7044      	strb	r4, [r0, #1]
   b69e8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b69ea:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b69ec:	f7ff ff16 	bl	b681c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b69f0:	4b1e      	ldr	r3, [pc, #120]	; (b6a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b69f2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b69f4:	2008      	movs	r0, #8
   b69f6:	f7fd fb4c 	bl	b4092 <_Znwj>
   b69fa:	4604      	mov	r4, r0
   b69fc:	b110      	cbz	r0, b6a04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b69fe:	a903      	add	r1, sp, #12
   b6a00:	f7ff fec7 	bl	b6792 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6a04:	9600      	str	r6, [sp, #0]
   b6a06:	fa5f f38a 	uxtb.w	r3, sl
   b6a0a:	464a      	mov	r2, r9
   b6a0c:	4641      	mov	r1, r8
   b6a0e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6a10:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6a12:	f7ff fcfd 	bl	b6410 <spark_send_event>
   b6a16:	b9b8      	cbnz	r0, b6a48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6a18:	9b03      	ldr	r3, [sp, #12]
   b6a1a:	785b      	ldrb	r3, [r3, #1]
   b6a1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6a20:	b993      	cbnz	r3, b6a48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6a22:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6a26:	a905      	add	r1, sp, #20
   b6a28:	a803      	add	r0, sp, #12
   b6a2a:	9205      	str	r2, [sp, #20]
   b6a2c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6a30:	f7ff ff18 	bl	b6864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6a34:	a805      	add	r0, sp, #20
   b6a36:	f7ff fe82 	bl	b673e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6a3a:	a805      	add	r0, sp, #20
   b6a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6a3e:	f7ff feb1 	bl	b67a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6a42:	a806      	add	r0, sp, #24
   b6a44:	f7ff fdf2 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a48:	a903      	add	r1, sp, #12
   b6a4a:	a805      	add	r0, sp, #20
   b6a4c:	f7ff fea1 	bl	b6792 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a50:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6a52:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a54:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6a56:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6a58:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6a5a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6a5c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6a5e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6a60:	f7ff fde4 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a64:	a804      	add	r0, sp, #16
   b6a66:	f7ff fde1 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6a6a:	e7ab      	b.n	b69c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6a6c:	000b6aed 	.word	0x000b6aed

000b6a70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6a70:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a74:	4605      	mov	r5, r0
	switch (__op)
   b6a76:	d103      	bne.n	b6a80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6a78:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6a7a:	6003      	str	r3, [r0, #0]
      }
   b6a7c:	2000      	movs	r0, #0
   b6a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6a80:	2a02      	cmp	r2, #2
   b6a82:	d010      	beq.n	b6aa6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6a84:	2a03      	cmp	r2, #3
   b6a86:	d1f9      	bne.n	b6a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6a88:	6804      	ldr	r4, [r0, #0]
   b6a8a:	2c00      	cmp	r4, #0
   b6a8c:	d0f6      	beq.n	b6a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6a8e:	f104 0010 	add.w	r0, r4, #16
   b6a92:	f7ff fe54 	bl	b673e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6a96:	4620      	mov	r0, r4
   b6a98:	f7ff fd99 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6a9c:	2118      	movs	r1, #24
   b6a9e:	4620      	mov	r0, r4
   b6aa0:	f7fd fafb 	bl	b409a <_ZdlPvj>
   b6aa4:	e7ea      	b.n	b6a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6aa6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6aa8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6aaa:	f7fd faf2 	bl	b4092 <_Znwj>
   b6aae:	4604      	mov	r4, r0
   b6ab0:	b150      	cbz	r0, b6ac8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6ab2:	4631      	mov	r1, r6
   b6ab4:	f7ff fec6 	bl	b6844 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6ab8:	6930      	ldr	r0, [r6, #16]
   b6aba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6abe:	b108      	cbz	r0, b6ac4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6ac0:	f002 ff02 	bl	b98c8 <strdup>
        type_(type) {
   b6ac4:	6120      	str	r0, [r4, #16]
   b6ac6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6ac8:	602c      	str	r4, [r5, #0]
	}
   b6aca:	e7d7      	b.n	b6a7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6acc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6acc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6ace:	2300      	movs	r3, #0
   b6ad0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6ad2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6ad4:	4604      	mov	r4, r0
   b6ad6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6ad8:	b12b      	cbz	r3, b6ae6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6ada:	2202      	movs	r2, #2
   b6adc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6ade:	68eb      	ldr	r3, [r5, #12]
   b6ae0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6ae2:	68ab      	ldr	r3, [r5, #8]
   b6ae4:	60a3      	str	r3, [r4, #8]
    }
   b6ae6:	4620      	mov	r0, r4
   b6ae8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6aec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6aee:	b089      	sub	sp, #36	; 0x24
   b6af0:	4604      	mov	r4, r0
   b6af2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6af4:	a801      	add	r0, sp, #4
   b6af6:	4611      	mov	r1, r2
   b6af8:	f7ff fe54 	bl	b67a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6afc:	b1a4      	cbz	r4, b6b28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6afe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6b00:	b11d      	cbz	r5, b6b0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6b02:	4628      	mov	r0, r5
   b6b04:	f002 fee0 	bl	b98c8 <strdup>
   b6b08:	4605      	mov	r5, r0
   b6b0a:	a801      	add	r0, sp, #4
   b6b0c:	a903      	add	r1, sp, #12
        type_(type) {
   b6b0e:	9503      	str	r5, [sp, #12]
   b6b10:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6b14:	f7ff fea6 	bl	b6864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6b18:	a803      	add	r0, sp, #12
   b6b1a:	f7ff fe10 	bl	b673e <_ZN8particle5ErrorD1Ev>
   b6b1e:	a802      	add	r0, sp, #8
   b6b20:	f7ff fd84 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6b24:	b009      	add	sp, #36	; 0x24
   b6b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6b28:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6b2a:	2301      	movs	r3, #1
   b6b2c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6b30:	2a00      	cmp	r2, #0
   b6b32:	d103      	bne.n	b6b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6b34:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6b38:	2900      	cmp	r1, #0
   b6b3a:	d1f7      	bne.n	b6b2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6b3c:	d1ef      	bne.n	b6b1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6b3e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6b40:	f3bf 8f5b 	dmb	ish
   b6b44:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6b46:	1d2b      	adds	r3, r5, #4
   b6b48:	f3bf 8f5b 	dmb	ish
   b6b4c:	e853 6f00 	ldrex	r6, [r3]
   b6b50:	e843 4200 	strex	r2, r4, [r3]
   b6b54:	2a00      	cmp	r2, #0
   b6b56:	d1f9      	bne.n	b6b4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6b58:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6b5c:	2e00      	cmp	r6, #0
   b6b5e:	d0de      	beq.n	b6b1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6b60:	4620      	mov	r0, r4
   b6b62:	f7ff fbfd 	bl	b6360 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6b66:	4607      	mov	r7, r0
   b6b68:	b160      	cbz	r0, b6b84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6b6a:	f105 010c 	add.w	r1, r5, #12
   b6b6e:	4630      	mov	r0, r6
   b6b70:	f7ff fe43 	bl	b67fa <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6b74:	4630      	mov	r0, r6
   b6b76:	f7ff fd2a 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6b7a:	2110      	movs	r1, #16
   b6b7c:	4630      	mov	r0, r6
   b6b7e:	f7fd fa8c 	bl	b409a <_ZdlPvj>
   b6b82:	e7cc      	b.n	b6b1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6b84:	4631      	mov	r1, r6
   b6b86:	a803      	add	r0, sp, #12
   b6b88:	f7ff ffa0 	bl	b6acc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b8c:	7b2b      	ldrb	r3, [r5, #12]
   b6b8e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6b92:	2010      	movs	r0, #16
   b6b94:	f7fd fa7d 	bl	b4092 <_Znwj>
   b6b98:	4605      	mov	r5, r0
   b6b9a:	b1d0      	cbz	r0, b6bd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6b9c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b9e:	2014      	movs	r0, #20
   b6ba0:	f7fd fa77 	bl	b4092 <_Znwj>
   b6ba4:	4604      	mov	r4, r0
   b6ba6:	b178      	cbz	r0, b6bc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6ba8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6baa:	4601      	mov	r1, r0
   b6bac:	a803      	add	r0, sp, #12
   b6bae:	f7ff fd45 	bl	b663c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6bb2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6bb4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6bb6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6bb8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6bba:	9205      	str	r2, [sp, #20]
   b6bbc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6bbe:	60e3      	str	r3, [r4, #12]
   b6bc0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6bc4:	9206      	str	r2, [sp, #24]
   b6bc6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6bc8:	4b06      	ldr	r3, [pc, #24]	; (b6be4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6bca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6bcc:	4b06      	ldr	r3, [pc, #24]	; (b6be8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6bd0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6bd2:	a803      	add	r0, sp, #12
   b6bd4:	f7ff fcfb 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6bd8:	2200      	movs	r2, #0
   b6bda:	4629      	mov	r1, r5
   b6bdc:	4803      	ldr	r0, [pc, #12]	; (b6bec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6bde:	f7ff fbc7 	bl	b6370 <application_thread_invoke>
   b6be2:	e7c7      	b.n	b6b74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6be4:	000b680d 	.word	0x000b680d
   b6be8:	000b6bf1 	.word	0x000b6bf1
   b6bec:	000b65a7 	.word	0x000b65a7

000b6bf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6bf0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6bf2:	b570      	push	{r4, r5, r6, lr}
   b6bf4:	4604      	mov	r4, r0
	switch (__op)
   b6bf6:	d103      	bne.n	b6c00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6bf8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6bfa:	6003      	str	r3, [r0, #0]
      }
   b6bfc:	2000      	movs	r0, #0
   b6bfe:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6c00:	2a02      	cmp	r2, #2
   b6c02:	d00c      	beq.n	b6c1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6c04:	2a03      	cmp	r2, #3
   b6c06:	d1f9      	bne.n	b6bfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6c08:	6804      	ldr	r4, [r0, #0]
   b6c0a:	2c00      	cmp	r4, #0
   b6c0c:	d0f6      	beq.n	b6bfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6c0e:	4620      	mov	r0, r4
   b6c10:	f7ff fcdd 	bl	b65ce <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6c14:	2114      	movs	r1, #20
   b6c16:	4620      	mov	r0, r4
   b6c18:	f7fd fa3f 	bl	b409a <_ZdlPvj>
   b6c1c:	e7ee      	b.n	b6bfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c1e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6c20:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6c22:	f7fd fa36 	bl	b4092 <_Znwj>
   b6c26:	4605      	mov	r5, r0
   b6c28:	b120      	cbz	r0, b6c34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6c2a:	4631      	mov	r1, r6
   b6c2c:	f7ff ff4e 	bl	b6acc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6c30:	7c33      	ldrb	r3, [r6, #16]
   b6c32:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6c34:	6025      	str	r5, [r4, #0]
	}
   b6c36:	e7e1      	b.n	b6bfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6c38 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6c38:	2200      	movs	r2, #0
   b6c3a:	6840      	ldr	r0, [r0, #4]
   b6c3c:	4611      	mov	r1, r2
   b6c3e:	f7ff bc37 	b.w	b64b0 <network_listening>

000b6c42 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6c42:	2200      	movs	r2, #0
   b6c44:	6840      	ldr	r0, [r0, #4]
   b6c46:	4611      	mov	r1, r2
   b6c48:	f7ff bc42 	b.w	b64d0 <network_get_listen_timeout>

000b6c4c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6c4c:	6840      	ldr	r0, [r0, #4]
   b6c4e:	2200      	movs	r2, #0
   b6c50:	f7ff bc36 	b.w	b64c0 <network_set_listen_timeout>

000b6c54 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6c54:	6840      	ldr	r0, [r0, #4]
   b6c56:	2200      	movs	r2, #0
   b6c58:	f081 0101 	eor.w	r1, r1, #1
   b6c5c:	f7ff bc20 	b.w	b64a0 <network_listen>

000b6c60 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6c60:	2300      	movs	r3, #0
   b6c62:	6840      	ldr	r0, [r0, #4]
   b6c64:	461a      	mov	r2, r3
   b6c66:	4619      	mov	r1, r3
   b6c68:	f7ff bc12 	b.w	b6490 <network_off>

000b6c6c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6c6c:	2300      	movs	r3, #0
   b6c6e:	6840      	ldr	r0, [r0, #4]
   b6c70:	461a      	mov	r2, r3
   b6c72:	4619      	mov	r1, r3
   b6c74:	f7ff bc04 	b.w	b6480 <network_on>

000b6c78 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6c78:	2200      	movs	r2, #0
   b6c7a:	6840      	ldr	r0, [r0, #4]
   b6c7c:	4611      	mov	r1, r2
   b6c7e:	f7ff bbf7 	b.w	b6470 <network_ready>

000b6c82 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6c82:	2200      	movs	r2, #0
   b6c84:	6840      	ldr	r0, [r0, #4]
   b6c86:	4611      	mov	r1, r2
   b6c88:	f7ff bbe2 	b.w	b6450 <network_connecting>

000b6c8c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6c8c:	6840      	ldr	r0, [r0, #4]
   b6c8e:	2200      	movs	r2, #0
   b6c90:	2102      	movs	r1, #2
   b6c92:	f7ff bbe5 	b.w	b6460 <network_disconnect>

000b6c96 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6c96:	2300      	movs	r3, #0
   b6c98:	6840      	ldr	r0, [r0, #4]
   b6c9a:	461a      	mov	r2, r3
   b6c9c:	f7ff bbd0 	b.w	b6440 <network_connect>

000b6ca0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6ca0:	4b02      	ldr	r3, [pc, #8]	; (b6cac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6ca2:	2203      	movs	r2, #3
   b6ca4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6ca6:	4a02      	ldr	r2, [pc, #8]	; (b6cb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6ca8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6caa:	4770      	bx	lr
   b6cac:	2003e684 	.word	0x2003e684
   b6cb0:	000b9dc8 	.word	0x000b9dc8

000b6cb4 <_ZN8particle6detail9_getVCellEhh>:
namespace particle {
namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   b6cb4:	0909      	lsrs	r1, r1, #4
   b6cb6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   b6cba:	ee07 1a90 	vmov	s15, r1
        return value / 800.0;
    }
   b6cbe:	ed9f 0a03 	vldr	s0, [pc, #12]	; b6ccc <_ZN8particle6detail9_getVCellEhh+0x18>
        float value = (float)((MSB << 4) | (LSB >> 4));
   b6cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
   b6cc6:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b6cca:	4770      	bx	lr
   b6ccc:	44480000 	.word	0x44480000

000b6cd0 <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b6cd0:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   b6cd4:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   b6cd8:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b6cda:	bf0c      	ite	eq
   b6cdc:	eddf 7a04 	vldreq	s15, [pc, #16]	; b6cf0 <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b6ce0:	eddf 7a04 	vldrne	s15, [pc, #16]	; b6cf4 <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b6ce4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b6ce8:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   b6cec:	4770      	bx	lr
   b6cee:	bf00      	nop
   b6cf0:	3b000000 	.word	0x3b000000
   b6cf4:	3b800000 	.word	0x3b800000

000b6cf8 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b6cf8:	6800      	ldr	r0, [r0, #0]
   b6cfa:	f000 b91c 	b.w	b6f36 <_ZN7TwoWire4lockEv>

000b6cfe <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b6cfe:	b510      	push	{r4, lr}
   b6d00:	4604      	mov	r4, r0
      lock_(_lock) {
   b6d02:	6001      	str	r1, [r0, #0]
   b6d04:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b6d06:	b10a      	cbz	r2, b6d0c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b6d08:	f7ff fff6 	bl	b6cf8 <_ZN9FuelGauge4lockEv>
}
   b6d0c:	4620      	mov	r0, r4
   b6d0e:	bd10      	pop	{r4, pc}

000b6d10 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b6d10:	b513      	push	{r0, r1, r4, lr}
   b6d12:	4604      	mov	r4, r0
   b6d14:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b6d16:	f002 f8a7 	bl	b8e68 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b6d1a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b6d1c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b6d1e:	4620      	mov	r0, r4
   b6d20:	f7ff ffed 	bl	b6cfe <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b6d24:	4620      	mov	r0, r4
   b6d26:	b002      	add	sp, #8
   b6d28:	bd10      	pop	{r4, pc}

000b6d2a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b6d2a:	6800      	ldr	r0, [r0, #0]
   b6d2c:	f000 b90c 	b.w	b6f48 <_ZN7TwoWire6unlockEv>

000b6d30 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b6d30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6d34:	4604      	mov	r4, r0
   b6d36:	460d      	mov	r5, r1
   b6d38:	4617      	mov	r7, r2
   b6d3a:	461e      	mov	r6, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b6d3c:	f7ff ffdc 	bl	b6cf8 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6d40:	2236      	movs	r2, #54	; 0x36
   b6d42:	2300      	movs	r3, #0
   b6d44:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b6d48:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b6d4a:	230a      	movs	r3, #10
   b6d4c:	f04f 0801 	mov.w	r8, #1
   b6d50:	4669      	mov	r1, sp
   b6d52:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6d56:	f000 f8d2 	bl	b6efe <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b6d5a:	6820      	ldr	r0, [r4, #0]
   b6d5c:	6803      	ldr	r3, [r0, #0]
   b6d5e:	4629      	mov	r1, r5
   b6d60:	689b      	ldr	r3, [r3, #8]
   b6d62:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b6d64:	6820      	ldr	r0, [r4, #0]
   b6d66:	4641      	mov	r1, r8
   b6d68:	f000 f8e1 	bl	b6f2e <_ZN7TwoWire15endTransmissionEh>
   b6d6c:	4605      	mov	r5, r0
   b6d6e:	b140      	cbz	r0, b6d82 <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b6d70:	f06f 059f 	mvn.w	r5, #159	; 0x9f

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   b6d74:	4620      	mov	r0, r4
   b6d76:	f7ff ffd8 	bl	b6d2a <_ZN9FuelGauge6unlockEv>
}
   b6d7a:	4628      	mov	r0, r5
   b6d7c:	b004      	add	sp, #16
   b6d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b6d82:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b6d84:	6820      	ldr	r0, [r4, #0]
   b6d86:	9301      	str	r3, [sp, #4]
   b6d88:	4669      	mov	r1, sp
   b6d8a:	f000 f8a1 	bl	b6ed0 <_ZN7TwoWire11requestFromERK16WireTransmission>
   b6d8e:	2802      	cmp	r0, #2
   b6d90:	d1ee      	bne.n	b6d70 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b6d92:	6820      	ldr	r0, [r4, #0]
   b6d94:	6803      	ldr	r3, [r0, #0]
   b6d96:	695b      	ldr	r3, [r3, #20]
   b6d98:	4798      	blx	r3
   b6d9a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b6d9c:	6820      	ldr	r0, [r4, #0]
   b6d9e:	6803      	ldr	r3, [r0, #0]
   b6da0:	695b      	ldr	r3, [r3, #20]
   b6da2:	4798      	blx	r3
   b6da4:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b6da6:	e7e5      	b.n	b6d74 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b6da8 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   b6da8:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   b6daa:	2300      	movs	r3, #0
   b6dac:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   b6db0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b6db4:	f10d 0206 	add.w	r2, sp, #6
   b6db8:	f10d 0307 	add.w	r3, sp, #7
   b6dbc:	2102      	movs	r1, #2
   b6dbe:	f7ff ffb7 	bl	b6d30 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b6dc2:	b940      	cbnz	r0, b6dd6 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   b6dc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6dc8:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   b6dcc:	b003      	add	sp, #12
   b6dce:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   b6dd2:	f7ff bf6f 	b.w	b6cb4 <_ZN8particle6detail9_getVCellEhh>
}
   b6dd6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b6dda:	b003      	add	sp, #12
   b6ddc:	f85d fb04 	ldr.w	pc, [sp], #4

000b6de0 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   b6de0:	b510      	push	{r4, lr}
   b6de2:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   b6de4:	2300      	movs	r3, #0
   b6de6:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   b6dea:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b6dee:	2104      	movs	r1, #4
   b6df0:	f10d 030f 	add.w	r3, sp, #15
   b6df4:	f10d 020e 	add.w	r2, sp, #14
   b6df8:	f7ff ff9a 	bl	b6d30 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b6dfc:	4601      	mov	r1, r0
   b6dfe:	b9c8      	cbnz	r0, b6e34 <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   b6e00:	2420      	movs	r4, #32
   b6e02:	9001      	str	r0, [sp, #4]
   b6e04:	4622      	mov	r2, r4
   b6e06:	a804      	add	r0, sp, #16
   b6e08:	f002 fcfe 	bl	b9808 <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b6e0c:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   b6e0e:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b6e12:	a804      	add	r0, sp, #16
   b6e14:	f7ff fada 	bl	b63cc <system_power_management_get_config>
   b6e18:	b950      	cbnz	r0, b6e30 <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   b6e1a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b6e1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b6e22:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   b6e26:	b00c      	add	sp, #48	; 0x30
   b6e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b6e2c:	f7ff bf50 	b.w	b6cd0 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   b6e30:	2212      	movs	r2, #18
   b6e32:	e7f4      	b.n	b6e1e <_ZN9FuelGauge6getSoCEv+0x3e>
}
   b6e34:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b6e38:	b00c      	add	sp, #48	; 0x30
   b6e3a:	bd10      	pop	{r4, pc}

000b6e3c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6e3c:	4770      	bx	lr

000b6e3e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e40:	4606      	mov	r6, r0
   b6e42:	4615      	mov	r5, r2
   b6e44:	460c      	mov	r4, r1
   b6e46:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6e48:	42bc      	cmp	r4, r7
   b6e4a:	d006      	beq.n	b6e5a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6e4c:	6833      	ldr	r3, [r6, #0]
   b6e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6e52:	689b      	ldr	r3, [r3, #8]
   b6e54:	4630      	mov	r0, r6
   b6e56:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6e58:	e7f6      	b.n	b6e48 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6e5a:	4628      	mov	r0, r5
   b6e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e5e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6e5e:	7c00      	ldrb	r0, [r0, #16]
   b6e60:	2200      	movs	r2, #0
   b6e62:	f7ff b8ed 	b.w	b6040 <hal_i2c_write>

000b6e66 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6e66:	7c00      	ldrb	r0, [r0, #16]
   b6e68:	2100      	movs	r1, #0
   b6e6a:	f7ff b8f1 	b.w	b6050 <hal_i2c_available>

000b6e6e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6e6e:	7c00      	ldrb	r0, [r0, #16]
   b6e70:	2100      	movs	r1, #0
   b6e72:	f7ff b8f5 	b.w	b6060 <hal_i2c_read>

000b6e76 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6e76:	7c00      	ldrb	r0, [r0, #16]
   b6e78:	2100      	movs	r1, #0
   b6e7a:	f7ff b8f9 	b.w	b6070 <hal_i2c_peek>

000b6e7e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6e7e:	7c00      	ldrb	r0, [r0, #16]
   b6e80:	2100      	movs	r1, #0
   b6e82:	f7ff b8fd 	b.w	b6080 <hal_i2c_flush>

000b6e86 <_ZN7TwoWireD0Ev>:
   b6e86:	b510      	push	{r4, lr}
   b6e88:	2114      	movs	r1, #20
   b6e8a:	4604      	mov	r4, r0
   b6e8c:	f7fd f905 	bl	b409a <_ZdlPvj>
   b6e90:	4620      	mov	r0, r4
   b6e92:	bd10      	pop	{r4, pc}

000b6e94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6e94:	b538      	push	{r3, r4, r5, lr}
   b6e96:	4604      	mov	r4, r0
   b6e98:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e9e:	2200      	movs	r2, #0
   b6ea0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6ea4:	4b09      	ldr	r3, [pc, #36]	; (b6ecc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6ea6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6ea8:	4608      	mov	r0, r1
   b6eaa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6eac:	4629      	mov	r1, r5
   b6eae:	f7ff f8f7 	bl	b60a0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6eb2:	30bf      	adds	r0, #191	; 0xbf
   b6eb4:	d108      	bne.n	b6ec8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6eb6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6eb8:	07db      	lsls	r3, r3, #31
   b6eba:	d505      	bpl.n	b6ec8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6ebc:	6868      	ldr	r0, [r5, #4]
   b6ebe:	f7ff fb27 	bl	b6510 <free>
    free(conf.tx_buffer);
   b6ec2:	68e8      	ldr	r0, [r5, #12]
   b6ec4:	f7ff fb24 	bl	b6510 <free>
}
   b6ec8:	4620      	mov	r0, r4
   b6eca:	bd38      	pop	{r3, r4, r5, pc}
   b6ecc:	000b9e04 	.word	0x000b9e04

000b6ed0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6ed2:	2200      	movs	r2, #0
   b6ed4:	2314      	movs	r3, #20
   b6ed6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6eda:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6ede:	780b      	ldrb	r3, [r1, #0]
   b6ee0:	f88d 3008 	strb.w	r3, [sp, #8]
   b6ee4:	684b      	ldr	r3, [r1, #4]
   b6ee6:	9303      	str	r3, [sp, #12]
   b6ee8:	68cb      	ldr	r3, [r1, #12]
   b6eea:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6eec:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6eee:	7a0b      	ldrb	r3, [r1, #8]
   b6ef0:	9305      	str	r3, [sp, #20]
   b6ef2:	a901      	add	r1, sp, #4
   b6ef4:	f7ff f8ec 	bl	b60d0 <hal_i2c_request_ex>
}
   b6ef8:	b007      	add	sp, #28
   b6efa:	f85d fb04 	ldr.w	pc, [sp], #4

000b6efe <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b6efe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6f00:	2300      	movs	r3, #0
   b6f02:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b6f06:	684a      	ldr	r2, [r1, #4]
   b6f08:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b6f0a:	2314      	movs	r3, #20
    };
   b6f0c:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b6f0e:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b6f12:	780b      	ldrb	r3, [r1, #0]
    };
   b6f14:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6f16:	7a0a      	ldrb	r2, [r1, #8]
   b6f18:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b6f1a:	7c00      	ldrb	r0, [r0, #16]
    };
   b6f1c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6f20:	aa01      	add	r2, sp, #4
   b6f22:	4619      	mov	r1, r3
   b6f24:	f7ff f87c 	bl	b6020 <hal_i2c_begin_transmission>
}
   b6f28:	b007      	add	sp, #28
   b6f2a:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f2e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6f2e:	7c00      	ldrb	r0, [r0, #16]
   b6f30:	2200      	movs	r2, #0
   b6f32:	f7ff b87d 	b.w	b6030 <hal_i2c_end_transmission>

000b6f36 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b6f36:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b6f38:	2100      	movs	r1, #0
   b6f3a:	7c00      	ldrb	r0, [r0, #16]
   b6f3c:	f7ff f8b8 	bl	b60b0 <hal_i2c_lock>
}
   b6f40:	fab0 f080 	clz	r0, r0
   b6f44:	0940      	lsrs	r0, r0, #5
   b6f46:	bd08      	pop	{r3, pc}

000b6f48 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b6f48:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b6f4a:	2100      	movs	r1, #0
   b6f4c:	7c00      	ldrb	r0, [r0, #16]
   b6f4e:	f7ff f8b7 	bl	b60c0 <hal_i2c_unlock>
}
   b6f52:	fab0 f080 	clz	r0, r0
   b6f56:	0940      	lsrs	r0, r0, #5
   b6f58:	bd08      	pop	{r3, pc}

000b6f5a <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6f5a:	4770      	bx	lr

000b6f5c <_ZN9IPAddressD0Ev>:
   b6f5c:	b510      	push	{r4, lr}
   b6f5e:	2118      	movs	r1, #24
   b6f60:	4604      	mov	r4, r0
   b6f62:	f7fd f89a 	bl	b409a <_ZdlPvj>
   b6f66:	4620      	mov	r0, r4
   b6f68:	bd10      	pop	{r4, pc}

000b6f6a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6f6c:	7d03      	ldrb	r3, [r0, #20]
   b6f6e:	2b06      	cmp	r3, #6
{
   b6f70:	b08d      	sub	sp, #52	; 0x34
   b6f72:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f74:	f100 0704 	add.w	r7, r0, #4
   b6f78:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6f7c:	d012      	beq.n	b6fa4 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6f7e:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6f82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6f86:	220a      	movs	r2, #10
   b6f88:	4630      	mov	r0, r6
   b6f8a:	f001 fa86 	bl	b849a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6f8e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6f90:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6f92:	d019      	beq.n	b6fc8 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6f94:	2c00      	cmp	r4, #0
   b6f96:	d0f4      	beq.n	b6f82 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6f98:	212e      	movs	r1, #46	; 0x2e
   b6f9a:	4630      	mov	r0, r6
   b6f9c:	f001 fa6e 	bl	b847c <_ZN5Print5printEc>
   b6fa0:	4404      	add	r4, r0
   b6fa2:	e7ee      	b.n	b6f82 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6fa4:	232f      	movs	r3, #47	; 0x2f
   b6fa6:	466a      	mov	r2, sp
   b6fa8:	4639      	mov	r1, r7
   b6faa:	200a      	movs	r0, #10
		buf[0] = 0;
   b6fac:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6fb0:	f7ff f896 	bl	b60e0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6fb4:	4668      	mov	r0, sp
   b6fb6:	f002 fca4 	bl	b9902 <strlen>
   b6fba:	6833      	ldr	r3, [r6, #0]
   b6fbc:	4602      	mov	r2, r0
   b6fbe:	68db      	ldr	r3, [r3, #12]
   b6fc0:	4669      	mov	r1, sp
   b6fc2:	4630      	mov	r0, r6
   b6fc4:	4798      	blx	r3
   b6fc6:	4604      	mov	r4, r0
    }
    return n;
}
   b6fc8:	4620      	mov	r0, r4
   b6fca:	b00d      	add	sp, #52	; 0x34
   b6fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6fd0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6fd0:	b510      	push	{r4, lr}
   b6fd2:	4b05      	ldr	r3, [pc, #20]	; (b6fe8 <_ZN9IPAddressC1Ev+0x18>)
   b6fd4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6fd6:	2211      	movs	r2, #17
   b6fd8:	f840 3b04 	str.w	r3, [r0], #4
   b6fdc:	2100      	movs	r1, #0
   b6fde:	f002 fc13 	bl	b9808 <memset>
}
   b6fe2:	4620      	mov	r0, r4
   b6fe4:	bd10      	pop	{r4, pc}
   b6fe6:	bf00      	nop
   b6fe8:	000b9e2c 	.word	0x000b9e2c

000b6fec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6fec:	4603      	mov	r3, r0
   b6fee:	4a07      	ldr	r2, [pc, #28]	; (b700c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6ff0:	b510      	push	{r4, lr}
   b6ff2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6ff6:	f101 0210 	add.w	r2, r1, #16
   b6ffa:	f851 4b04 	ldr.w	r4, [r1], #4
   b6ffe:	f843 4b04 	str.w	r4, [r3], #4
   b7002:	4291      	cmp	r1, r2
   b7004:	d1f9      	bne.n	b6ffa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7006:	780a      	ldrb	r2, [r1, #0]
   b7008:	701a      	strb	r2, [r3, #0]
}
   b700a:	bd10      	pop	{r4, pc}
   b700c:	000b9e2c 	.word	0x000b9e2c

000b7010 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7010:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7012:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7016:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b701a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b701e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7022:	2304      	movs	r3, #4
   b7024:	6041      	str	r1, [r0, #4]
   b7026:	7503      	strb	r3, [r0, #20]
}
   b7028:	bd10      	pop	{r4, pc}
	...

000b702c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b702c:	b507      	push	{r0, r1, r2, lr}
   b702e:	4b06      	ldr	r3, [pc, #24]	; (b7048 <_ZN9IPAddressC1EPKh+0x1c>)
   b7030:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7032:	78cb      	ldrb	r3, [r1, #3]
   b7034:	9300      	str	r3, [sp, #0]
   b7036:	788b      	ldrb	r3, [r1, #2]
   b7038:	784a      	ldrb	r2, [r1, #1]
   b703a:	7809      	ldrb	r1, [r1, #0]
   b703c:	f7ff ffe8 	bl	b7010 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7040:	b003      	add	sp, #12
   b7042:	f85d fb04 	ldr.w	pc, [sp], #4
   b7046:	bf00      	nop
   b7048:	000b9e2c 	.word	0x000b9e2c

000b704c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b704c:	f100 0310 	add.w	r3, r0, #16
   b7050:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b7052:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b7056:	2901      	cmp	r1, #1
   b7058:	4618      	mov	r0, r3
   b705a:	d108      	bne.n	b706e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b705c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b7060:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b7064:	3a01      	subs	r2, #1
   b7066:	f103 0310 	add.w	r3, r3, #16
   b706a:	d1f2      	bne.n	b7052 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b706c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b706e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b7070:	bf04      	itt	eq
   b7072:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b7076:	1852      	addeq	r2, r2, r1
   b7078:	e7f4      	b.n	b7064 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b707a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b707a:	b40e      	push	{r1, r2, r3}
   b707c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b707e:	b088      	sub	sp, #32
   b7080:	af00      	add	r7, sp, #0
   b7082:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7086:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b7088:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b708c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b708e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7090:	462b      	mov	r3, r5
   b7092:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b7094:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7096:	f7ff fa53 	bl	b6540 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b709a:	280f      	cmp	r0, #15
   b709c:	687a      	ldr	r2, [r7, #4]
   b709e:	d91a      	bls.n	b70d6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b70a0:	f100 0308 	add.w	r3, r0, #8
   b70a4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b70a8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b70aa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b70ae:	1c41      	adds	r1, r0, #1
   b70b0:	462b      	mov	r3, r5
   b70b2:	4668      	mov	r0, sp
        va_start(args, fmt);
   b70b4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b70b6:	f7ff fa43 	bl	b6540 <vsnprintf>
        if (n > 0) {
   b70ba:	1e02      	subs	r2, r0, #0
   b70bc:	dd04      	ble.n	b70c8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b70be:	6823      	ldr	r3, [r4, #0]
   b70c0:	4669      	mov	r1, sp
   b70c2:	689b      	ldr	r3, [r3, #8]
   b70c4:	4620      	mov	r0, r4
   b70c6:	4798      	blx	r3
   b70c8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b70ca:	3720      	adds	r7, #32
   b70cc:	46bd      	mov	sp, r7
   b70ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b70d2:	b003      	add	sp, #12
   b70d4:	4770      	bx	lr
    } else if (n > 0) {
   b70d6:	2800      	cmp	r0, #0
   b70d8:	d0f7      	beq.n	b70ca <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b70da:	6823      	ldr	r3, [r4, #0]
   b70dc:	4602      	mov	r2, r0
   b70de:	689b      	ldr	r3, [r3, #8]
   b70e0:	f107 0110 	add.w	r1, r7, #16
   b70e4:	4620      	mov	r0, r4
   b70e6:	4798      	blx	r3
}
   b70e8:	e7ef      	b.n	b70ca <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b70ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b70ea:	b538      	push	{r3, r4, r5, lr}
   b70ec:	680b      	ldr	r3, [r1, #0]
   b70ee:	6003      	str	r3, [r0, #0]
   b70f0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b70f2:	6843      	ldr	r3, [r0, #4]
   b70f4:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b70f6:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b70f8:	d008      	beq.n	b710c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b70fa:	b115      	cbz	r5, b7102 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b70fc:	686b      	ldr	r3, [r5, #4]
   b70fe:	3301      	adds	r3, #1
   b7100:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b7102:	6860      	ldr	r0, [r4, #4]
   b7104:	b108      	cbz	r0, b710a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b7106:	f7ff fa6b 	bl	b65e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b710a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b710c:	bd38      	pop	{r3, r4, r5, pc}

000b710e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b710e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b7110:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b7112:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7116:	689b      	ldr	r3, [r3, #8]
   b7118:	2201      	movs	r2, #1
   b711a:	f10d 0107 	add.w	r1, sp, #7
   b711e:	4798      	blx	r3
}
   b7120:	b003      	add	sp, #12
   b7122:	f85d fb04 	ldr.w	pc, [sp], #4

000b7126 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7126:	460b      	mov	r3, r1
   b7128:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b712a:	2200      	movs	r2, #0
   b712c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b712e:	e9c0 2200 	strd	r2, r2, [r0]
   b7132:	4604      	mov	r4, r0
        t_ = t;
   b7134:	6083      	str	r3, [r0, #8]
    if (t) {
   b7136:	b90b      	cbnz	r3, b713c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b7138:	4620      	mov	r0, r4
   b713a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b713c:	f7ff ffd5 	bl	b70ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b7140:	e7fa      	b.n	b7138 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b7142 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b7142:	6883      	ldr	r3, [r0, #8]
   b7144:	b1eb      	cbz	r3, b7182 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b7146:	781a      	ldrb	r2, [r3, #0]
   b7148:	2a03      	cmp	r2, #3
   b714a:	d81a      	bhi.n	b7182 <_ZNK5spark9JSONValue4typeEv+0x40>
   b714c:	e8df f002 	tbb	[pc, r2]
   b7150:	1b021704 	.word	0x1b021704
   b7154:	2005      	movs	r0, #5
   b7156:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b7158:	6802      	ldr	r2, [r0, #0]
   b715a:	685b      	ldr	r3, [r3, #4]
   b715c:	6852      	ldr	r2, [r2, #4]
   b715e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b7160:	282d      	cmp	r0, #45	; 0x2d
   b7162:	d012      	beq.n	b718a <_ZNK5spark9JSONValue4typeEv+0x48>
   b7164:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7168:	2b09      	cmp	r3, #9
   b716a:	d90e      	bls.n	b718a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b716c:	2874      	cmp	r0, #116	; 0x74
   b716e:	d00e      	beq.n	b718e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b7170:	2866      	cmp	r0, #102	; 0x66
   b7172:	d00c      	beq.n	b718e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b7174:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b7178:	4258      	negs	r0, r3
   b717a:	4158      	adcs	r0, r3
   b717c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b717e:	2006      	movs	r0, #6
   b7180:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b7182:	2000      	movs	r0, #0
   b7184:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b7186:	2004      	movs	r0, #4
   b7188:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b718a:	2003      	movs	r0, #3
   b718c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b718e:	2002      	movs	r0, #2
}
   b7190:	4770      	bx	lr

000b7192 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b7192:	b510      	push	{r4, lr}
   b7194:	4604      	mov	r4, r0
    switch (type()) {
   b7196:	f7ff ffd4 	bl	b7142 <_ZNK5spark9JSONValue4typeEv>
   b719a:	2802      	cmp	r0, #2
   b719c:	d00e      	beq.n	b71bc <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b719e:	1ec3      	subs	r3, r0, #3
   b71a0:	b2db      	uxtb	r3, r3
   b71a2:	2b01      	cmp	r3, #1
   b71a4:	d814      	bhi.n	b71d0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b71a6:	6822      	ldr	r2, [r4, #0]
   b71a8:	68a3      	ldr	r3, [r4, #8]
   b71aa:	6850      	ldr	r0, [r2, #4]
   b71ac:	685b      	ldr	r3, [r3, #4]
}
   b71ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b71b2:	220a      	movs	r2, #10
   b71b4:	2100      	movs	r1, #0
   b71b6:	4418      	add	r0, r3
   b71b8:	f002 bc56 	b.w	b9a68 <strtol>
        const char* const s = d_->json + t_->start;
   b71bc:	6822      	ldr	r2, [r4, #0]
   b71be:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b71c0:	6852      	ldr	r2, [r2, #4]
   b71c2:	685b      	ldr	r3, [r3, #4]
   b71c4:	5cd0      	ldrb	r0, [r2, r3]
   b71c6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b71ca:	4258      	negs	r0, r3
   b71cc:	4158      	adcs	r0, r3
}
   b71ce:	bd10      	pop	{r4, pc}
    switch (type()) {
   b71d0:	2000      	movs	r0, #0
   b71d2:	e7fc      	b.n	b71ce <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b71d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b71d4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b71d6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b71d8:	e9c0 3300 	strd	r3, r3, [r0]
   b71dc:	4604      	mov	r4, r0
        n_(0) {
   b71de:	480e      	ldr	r0, [pc, #56]	; (b7218 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b71e0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b71e4:	b1a9      	cbz	r1, b7212 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b71e6:	780b      	ldrb	r3, [r1, #0]
   b71e8:	2b03      	cmp	r3, #3
   b71ea:	d006      	beq.n	b71fa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b71ec:	b98b      	cbnz	r3, b7212 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b71ee:	6813      	ldr	r3, [r2, #0]
   b71f0:	6858      	ldr	r0, [r3, #4]
   b71f2:	684b      	ldr	r3, [r1, #4]
   b71f4:	5cc3      	ldrb	r3, [r0, r3]
   b71f6:	2b6e      	cmp	r3, #110	; 0x6e
   b71f8:	d007      	beq.n	b720a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b71fa:	6813      	ldr	r3, [r2, #0]
   b71fc:	684d      	ldr	r5, [r1, #4]
   b71fe:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b7200:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b7202:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b7204:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b7206:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b7208:	60e3      	str	r3, [r4, #12]
   b720a:	4611      	mov	r1, r2
   b720c:	4620      	mov	r0, r4
   b720e:	f7ff ff6c 	bl	b70ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7212:	4620      	mov	r0, r4
   b7214:	bd38      	pop	{r3, r4, r5, pc}
   b7216:	bf00      	nop
   b7218:	000b9e98 	.word	0x000b9e98

000b721c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b721c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b721e:	2500      	movs	r5, #0
   b7220:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b7222:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7226:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b722a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b722e:	4604      	mov	r4, r0
   b7230:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7232:	b14b      	cbz	r3, b7248 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7234:	781a      	ldrb	r2, [r3, #0]
   b7236:	2a01      	cmp	r2, #1
   b7238:	d106      	bne.n	b7248 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b723a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b723e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7240:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7242:	6143      	str	r3, [r0, #20]
   b7244:	f7ff ff51 	bl	b70ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7248:	4620      	mov	r0, r4
   b724a:	bd38      	pop	{r3, r4, r5, pc}

000b724c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b724c:	b510      	push	{r4, lr}
    if (!n_) {
   b724e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7250:	4604      	mov	r4, r0
    if (!n_) {
   b7252:	b163      	cbz	r3, b726e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7254:	6880      	ldr	r0, [r0, #8]
   b7256:	60e0      	str	r0, [r4, #12]
    --n_;
   b7258:	3b01      	subs	r3, #1
    ++t_;
   b725a:	3010      	adds	r0, #16
   b725c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b725e:	6120      	str	r0, [r4, #16]
    --n_;
   b7260:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7262:	b113      	cbz	r3, b726a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7264:	f7ff fef2 	bl	b704c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7268:	60a0      	str	r0, [r4, #8]
    return true;
   b726a:	2001      	movs	r0, #1
   b726c:	e000      	b.n	b7270 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b726e:	4618      	mov	r0, r3
}
   b7270:	bd10      	pop	{r4, pc}

000b7272 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7272:	b510      	push	{r4, lr}
    write('}');
   b7274:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7276:	4604      	mov	r4, r0
    write('}');
   b7278:	f7ff ff49 	bl	b710e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b727c:	2301      	movs	r3, #1
   b727e:	7123      	strb	r3, [r4, #4]
}
   b7280:	4620      	mov	r0, r4
   b7282:	bd10      	pop	{r4, pc}

000b7284 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7284:	b508      	push	{r3, lr}
    switch (state_) {
   b7286:	7903      	ldrb	r3, [r0, #4]
   b7288:	2b01      	cmp	r3, #1
   b728a:	d002      	beq.n	b7292 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b728c:	2b02      	cmp	r3, #2
   b728e:	d004      	beq.n	b729a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7290:	bd08      	pop	{r3, pc}
        write(',');
   b7292:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7294:	f7ff ff3b 	bl	b710e <_ZN5spark10JSONWriter5writeEc>
}
   b7298:	e7fa      	b.n	b7290 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b729a:	213a      	movs	r1, #58	; 0x3a
   b729c:	e7fa      	b.n	b7294 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b729e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b729e:	b510      	push	{r4, lr}
   b72a0:	4604      	mov	r4, r0
    writeSeparator();
   b72a2:	f7ff ffef 	bl	b7284 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b72a6:	4620      	mov	r0, r4
   b72a8:	217b      	movs	r1, #123	; 0x7b
   b72aa:	f7ff ff30 	bl	b710e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b72ae:	2300      	movs	r3, #0
   b72b0:	7123      	strb	r3, [r4, #4]
}
   b72b2:	4620      	mov	r0, r4
   b72b4:	bd10      	pop	{r4, pc}
	...

000b72b8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b72b8:	b513      	push	{r0, r1, r4, lr}
   b72ba:	4604      	mov	r4, r0
   b72bc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b72be:	f7ff ffe1 	bl	b7284 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b72c2:	6823      	ldr	r3, [r4, #0]
   b72c4:	9a01      	ldr	r2, [sp, #4]
   b72c6:	68db      	ldr	r3, [r3, #12]
   b72c8:	4903      	ldr	r1, [pc, #12]	; (b72d8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b72ca:	4620      	mov	r0, r4
   b72cc:	4798      	blx	r3
    state_ = NEXT;
   b72ce:	2301      	movs	r3, #1
}
   b72d0:	4620      	mov	r0, r4
    state_ = NEXT;
   b72d2:	7123      	strb	r3, [r4, #4]
}
   b72d4:	b002      	add	sp, #8
   b72d6:	bd10      	pop	{r4, pc}
   b72d8:	000b9c60 	.word	0x000b9c60

000b72dc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b72dc:	b513      	push	{r0, r1, r4, lr}
   b72de:	4604      	mov	r4, r0
   b72e0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b72e2:	f7ff ffcf 	bl	b7284 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b72e6:	6823      	ldr	r3, [r4, #0]
   b72e8:	9a01      	ldr	r2, [sp, #4]
   b72ea:	68db      	ldr	r3, [r3, #12]
   b72ec:	4903      	ldr	r1, [pc, #12]	; (b72fc <_ZN5spark10JSONWriter5valueEj+0x20>)
   b72ee:	4620      	mov	r0, r4
   b72f0:	4798      	blx	r3
    state_ = NEXT;
   b72f2:	2301      	movs	r3, #1
}
   b72f4:	4620      	mov	r0, r4
    state_ = NEXT;
   b72f6:	7123      	strb	r3, [r4, #4]
}
   b72f8:	b002      	add	sp, #8
   b72fa:	bd10      	pop	{r4, pc}
   b72fc:	000b9e38 	.word	0x000b9e38

000b7300 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7304:	460d      	mov	r5, r1
    write('"');
   b7306:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b7308:	4690      	mov	r8, r2
   b730a:	4604      	mov	r4, r0
    write('"');
   b730c:	f7ff feff 	bl	b710e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b7310:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b73b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7314:	44a8      	add	r8, r5
    const char *s = str;
   b7316:	462f      	mov	r7, r5
    while (s != end) {
   b7318:	4547      	cmp	r7, r8
   b731a:	46ba      	mov	sl, r7
   b731c:	d03d      	beq.n	b739a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b731e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b7322:	2e22      	cmp	r6, #34	; 0x22
   b7324:	d006      	beq.n	b7334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7326:	2e5c      	cmp	r6, #92	; 0x5c
   b7328:	d004      	beq.n	b7334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b732a:	4630      	mov	r0, r6
   b732c:	f002 fa2c 	bl	b9788 <isprint>
   b7330:	2800      	cmp	r0, #0
   b7332:	d1f1      	bne.n	b7318 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7334:	6823      	ldr	r3, [r4, #0]
   b7336:	ebaa 0205 	sub.w	r2, sl, r5
   b733a:	689b      	ldr	r3, [r3, #8]
   b733c:	4629      	mov	r1, r5
   b733e:	4620      	mov	r0, r4
   b7340:	4798      	blx	r3
            write('\\');
   b7342:	215c      	movs	r1, #92	; 0x5c
   b7344:	4620      	mov	r0, r4
   b7346:	f7ff fee2 	bl	b710e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b734a:	2e0d      	cmp	r6, #13
   b734c:	d80a      	bhi.n	b7364 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b734e:	2e07      	cmp	r6, #7
   b7350:	d91c      	bls.n	b738c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7352:	f1a6 0308 	sub.w	r3, r6, #8
   b7356:	2b05      	cmp	r3, #5
   b7358:	d818      	bhi.n	b738c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b735a:	e8df f003 	tbb	[pc, r3]
   b735e:	0f0d      	.short	0x0f0d
   b7360:	15131711 	.word	0x15131711
   b7364:	2e22      	cmp	r6, #34	; 0x22
   b7366:	d001      	beq.n	b736c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b7368:	2e5c      	cmp	r6, #92	; 0x5c
   b736a:	d10f      	bne.n	b738c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b736c:	4631      	mov	r1, r6
                write('b');
   b736e:	4620      	mov	r0, r4
   b7370:	f7ff fecd 	bl	b710e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7374:	463d      	mov	r5, r7
    while (s != end) {
   b7376:	e7cf      	b.n	b7318 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b7378:	2162      	movs	r1, #98	; 0x62
   b737a:	e7f8      	b.n	b736e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b737c:	2174      	movs	r1, #116	; 0x74
   b737e:	e7f6      	b.n	b736e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7380:	216e      	movs	r1, #110	; 0x6e
   b7382:	e7f4      	b.n	b736e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7384:	2166      	movs	r1, #102	; 0x66
   b7386:	e7f2      	b.n	b736e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b7388:	2172      	movs	r1, #114	; 0x72
   b738a:	e7f0      	b.n	b736e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b738c:	6823      	ldr	r3, [r4, #0]
   b738e:	4632      	mov	r2, r6
   b7390:	68db      	ldr	r3, [r3, #12]
   b7392:	4649      	mov	r1, r9
   b7394:	4620      	mov	r0, r4
   b7396:	4798      	blx	r3
                break;
   b7398:	e7ec      	b.n	b7374 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b739a:	42bd      	cmp	r5, r7
   b739c:	d005      	beq.n	b73aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b739e:	6823      	ldr	r3, [r4, #0]
   b73a0:	1b7a      	subs	r2, r7, r5
   b73a2:	689b      	ldr	r3, [r3, #8]
   b73a4:	4629      	mov	r1, r5
   b73a6:	4620      	mov	r0, r4
   b73a8:	4798      	blx	r3
    }
    write('"');
   b73aa:	2122      	movs	r1, #34	; 0x22
   b73ac:	4620      	mov	r0, r4
   b73ae:	f7ff feae 	bl	b710e <_ZN5spark10JSONWriter5writeEc>
}
   b73b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b73b6:	bf00      	nop
   b73b8:	000b9e3b 	.word	0x000b9e3b

000b73bc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b73bc:	b513      	push	{r0, r1, r4, lr}
   b73be:	4604      	mov	r4, r0
   b73c0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b73c4:	f7ff ff5e 	bl	b7284 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b73c8:	4620      	mov	r0, r4
   b73ca:	e9dd 2100 	ldrd	r2, r1, [sp]
   b73ce:	f7ff ff97 	bl	b7300 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b73d2:	2302      	movs	r3, #2
}
   b73d4:	4620      	mov	r0, r4
    state_ = VALUE;
   b73d6:	7123      	strb	r3, [r4, #4]
}
   b73d8:	b002      	add	sp, #8
   b73da:	bd10      	pop	{r4, pc}

000b73dc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b73dc:	b513      	push	{r0, r1, r4, lr}
   b73de:	4604      	mov	r4, r0
   b73e0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b73e4:	f7ff ff4e 	bl	b7284 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b73e8:	4620      	mov	r0, r4
   b73ea:	e9dd 2100 	ldrd	r2, r1, [sp]
   b73ee:	f7ff ff87 	bl	b7300 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b73f2:	2301      	movs	r3, #1
}
   b73f4:	4620      	mov	r0, r4
    state_ = NEXT;
   b73f6:	7123      	strb	r3, [r4, #4]
}
   b73f8:	b002      	add	sp, #8
   b73fa:	bd10      	pop	{r4, pc}

000b73fc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b73fc:	6880      	ldr	r0, [r0, #8]
   b73fe:	6803      	ldr	r3, [r0, #0]
   b7400:	68db      	ldr	r3, [r3, #12]
   b7402:	4718      	bx	r3

000b7404 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b7404:	4770      	bx	lr

000b7406 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b7406:	4608      	mov	r0, r1
   b7408:	b111      	cbz	r1, b7410 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b740a:	680b      	ldr	r3, [r1, #0]
   b740c:	685b      	ldr	r3, [r3, #4]
   b740e:	4718      	bx	r3
}
   b7410:	4770      	bx	lr

000b7412 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b7412:	4770      	bx	lr

000b7414 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b7414:	4770      	bx	lr

000b7416 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b7416:	4770      	bx	lr

000b7418 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b7418:	4770      	bx	lr

000b741a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b741a:	b538      	push	{r3, r4, r5, lr}
   b741c:	4604      	mov	r4, r0
   b741e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b7420:	6800      	ldr	r0, [r0, #0]
   b7422:	212e      	movs	r1, #46	; 0x2e
   b7424:	f002 fa33 	bl	b988e <strchrnul>
    size = s - category;
   b7428:	6823      	ldr	r3, [r4, #0]
   b742a:	1ac3      	subs	r3, r0, r3
   b742c:	602b      	str	r3, [r5, #0]
    if (size) {
   b742e:	b123      	cbz	r3, b743a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b7430:	7803      	ldrb	r3, [r0, #0]
   b7432:	b103      	cbz	r3, b7436 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b7434:	3001      	adds	r0, #1
   b7436:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7438:	6020      	str	r0, [r4, #0]
}
   b743a:	4618      	mov	r0, r3
   b743c:	bd38      	pop	{r3, r4, r5, pc}

000b743e <_ZN5spark16JSONStreamWriterD0Ev>:
   b743e:	b510      	push	{r4, lr}
   b7440:	210c      	movs	r1, #12
   b7442:	4604      	mov	r4, r0
   b7444:	f7fc fe29 	bl	b409a <_ZdlPvj>
   b7448:	4620      	mov	r0, r4
   b744a:	bd10      	pop	{r4, pc}

000b744c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b744c:	b510      	push	{r4, lr}
   b744e:	2104      	movs	r1, #4
   b7450:	4604      	mov	r4, r0
   b7452:	f7fc fe22 	bl	b409a <_ZdlPvj>
   b7456:	4620      	mov	r0, r4
   b7458:	bd10      	pop	{r4, pc}

000b745a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b745a:	b510      	push	{r4, lr}
   b745c:	2104      	movs	r1, #4
   b745e:	4604      	mov	r4, r0
   b7460:	f7fc fe1b 	bl	b409a <_ZdlPvj>
   b7464:	4620      	mov	r0, r4
   b7466:	bd10      	pop	{r4, pc}

000b7468 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7468:	f7fe bd72 	b.w	b5f50 <os_mutex_recursive_lock>

000b746c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b746c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b746e:	f002 fa18 	bl	b98a2 <strcmp>
}
   b7472:	fab0 f080 	clz	r0, r0
   b7476:	0940      	lsrs	r0, r0, #5
   b7478:	bd08      	pop	{r3, pc}

000b747a <__tcf_1>:
   b747a:	4770      	bx	lr

000b747c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b747c:	b510      	push	{r4, lr}
   b747e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b7480:	f001 fb56 	bl	b8b30 <_Z16_fetch_usbserialv>
   b7484:	4284      	cmp	r4, r0
   b7486:	d010      	beq.n	b74aa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b7488:	f001 fd2e 	bl	b8ee8 <_Z22__fetch_global_Serial1v>
   b748c:	4284      	cmp	r4, r0
   b748e:	d105      	bne.n	b749c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b7490:	f001 fd2a 	bl	b8ee8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b7494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b7498:	f001 bae5 	b.w	b8a66 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b749c:	b12c      	cbz	r4, b74aa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b749e:	6823      	ldr	r3, [r4, #0]
   b74a0:	4620      	mov	r0, r4
   b74a2:	685b      	ldr	r3, [r3, #4]
}
   b74a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b74a8:	4718      	bx	r3
   b74aa:	bd10      	pop	{r4, pc}

000b74ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b74ac:	680b      	ldr	r3, [r1, #0]
   b74ae:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b74b0:	684b      	ldr	r3, [r1, #4]
   b74b2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b74b4:	b113      	cbz	r3, b74bc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b74b6:	685a      	ldr	r2, [r3, #4]
   b74b8:	3201      	adds	r2, #1
   b74ba:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b74bc:	4770      	bx	lr

000b74be <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b74be:	b513      	push	{r0, r1, r4, lr}
   b74c0:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b74c2:	4608      	mov	r0, r1
   b74c4:	9101      	str	r1, [sp, #4]
   b74c6:	f002 fa1c 	bl	b9902 <strlen>
   b74ca:	9901      	ldr	r1, [sp, #4]
   b74cc:	4602      	mov	r2, r0
   b74ce:	4620      	mov	r0, r4
}
   b74d0:	b002      	add	sp, #8
   b74d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b74d6:	f7ff bf81 	b.w	b73dc <_ZN5spark10JSONWriter5valueEPKcj>

000b74da <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b74da:	b513      	push	{r0, r1, r4, lr}
   b74dc:	4604      	mov	r4, r0
    write(str, strlen(str));
   b74de:	4608      	mov	r0, r1
   b74e0:	9101      	str	r1, [sp, #4]
   b74e2:	f002 fa0e 	bl	b9902 <strlen>
   b74e6:	6823      	ldr	r3, [r4, #0]
   b74e8:	9901      	ldr	r1, [sp, #4]
   b74ea:	68db      	ldr	r3, [r3, #12]
   b74ec:	4602      	mov	r2, r0
   b74ee:	4620      	mov	r0, r4
}
   b74f0:	b002      	add	sp, #8
   b74f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b74f6:	4718      	bx	r3

000b74f8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b74f8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b74fa:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b74fc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b7500:	68db      	ldr	r3, [r3, #12]
   b7502:	2201      	movs	r2, #1
   b7504:	f10d 0107 	add.w	r1, sp, #7
   b7508:	4798      	blx	r3
}
   b750a:	b003      	add	sp, #12
   b750c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7510 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7510:	b40e      	push	{r1, r2, r3}
   b7512:	b503      	push	{r0, r1, lr}
   b7514:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b7516:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b7518:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b751c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b751e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b7520:	f000 ffd9 	bl	b84d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b7524:	b002      	add	sp, #8
   b7526:	f85d eb04 	ldr.w	lr, [sp], #4
   b752a:	b003      	add	sp, #12
   b752c:	4770      	bx	lr

000b752e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b752e:	680a      	ldr	r2, [r1, #0]
   b7530:	6002      	str	r2, [r0, #0]
   b7532:	684a      	ldr	r2, [r1, #4]
   b7534:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b7536:	2200      	movs	r2, #0
   b7538:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b753c:	b510      	push	{r4, lr}
   b753e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7540:	688c      	ldr	r4, [r1, #8]
   b7542:	6084      	str	r4, [r0, #8]
   b7544:	68cc      	ldr	r4, [r1, #12]
   b7546:	60c4      	str	r4, [r0, #12]
   b7548:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b754a:	608a      	str	r2, [r1, #8]
   b754c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b754e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b7550:	610a      	str	r2, [r1, #16]
   b7552:	bd10      	pop	{r4, pc}

000b7554 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b7554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b7558:	e9d0 8400 	ldrd	r8, r4, [r0]
   b755c:	f04f 0a14 	mov.w	sl, #20
   b7560:	9300      	str	r3, [sp, #0]
   b7562:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b7566:	4b18      	ldr	r3, [pc, #96]	; (b75c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b7568:	10a4      	asrs	r4, r4, #2
   b756a:	4617      	mov	r7, r2
   b756c:	435c      	muls	r4, r3
   b756e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b7570:	2c00      	cmp	r4, #0
   b7572:	dd21      	ble.n	b75b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b7574:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b7576:	fb0a f006 	mul.w	r0, sl, r6
   b757a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b757e:	463a      	mov	r2, r7
   b7580:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b7584:	5828      	ldr	r0, [r5, r0]
   b7586:	9101      	str	r1, [sp, #4]
   b7588:	455f      	cmp	r7, fp
   b758a:	bf28      	it	cs
   b758c:	465a      	movcs	r2, fp
   b758e:	f002 f9c0 	bl	b9912 <strncmp>
                if (cmp == 0) {
   b7592:	2800      	cmp	r0, #0
   b7594:	9901      	ldr	r1, [sp, #4]
   b7596:	f04f 0301 	mov.w	r3, #1
   b759a:	d10b      	bne.n	b75b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b759c:	455f      	cmp	r7, fp
   b759e:	d103      	bne.n	b75a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b75a0:	9a00      	ldr	r2, [sp, #0]
   b75a2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b75a4:	4634      	mov	r4, r6
   b75a6:	e7e3      	b.n	b7570 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b75a8:	d9fc      	bls.n	b75a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b75aa:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b75ac:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b75b0:	3e01      	subs	r6, #1
   b75b2:	e7f7      	b.n	b75a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b75b4:	dbf9      	blt.n	b75aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b75b6:	e7f5      	b.n	b75a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b75b8:	eba5 0508 	sub.w	r5, r5, r8
}
   b75bc:	4802      	ldr	r0, [pc, #8]	; (b75c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b75be:	10ad      	asrs	r5, r5, #2
   b75c0:	4368      	muls	r0, r5
   b75c2:	b003      	add	sp, #12
   b75c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b75c8:	cccccccd 	.word	0xcccccccd

000b75cc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b75cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b75ce:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b75d0:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b75d2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b75d4:	b303      	cbz	r3, b7618 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b75d6:	b1f9      	cbz	r1, b7618 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b75d8:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b75da:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b75de:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b75e0:	a903      	add	r1, sp, #12
   b75e2:	a801      	add	r0, sp, #4
   b75e4:	f7ff ff19 	bl	b741a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b75e8:	4601      	mov	r1, r0
   b75ea:	b1a8      	cbz	r0, b7618 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b75ec:	f10d 030b 	add.w	r3, sp, #11
   b75f0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b75f2:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b75f6:	4620      	mov	r0, r4
   b75f8:	f7ff ffac 	bl	b7554 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b75fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b7600:	b153      	cbz	r3, b7618 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b7602:	6823      	ldr	r3, [r4, #0]
   b7604:	2414      	movs	r4, #20
   b7606:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b760a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b760c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b7610:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b7612:	bfa8      	it	ge
   b7614:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b7616:	e7e3      	b.n	b75e0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b7618:	4628      	mov	r0, r5
   b761a:	b004      	add	sp, #16
   b761c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7620 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b7620:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b7622:	4c09      	ldr	r4, [pc, #36]	; (b7648 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b7624:	7823      	ldrb	r3, [r4, #0]
   b7626:	f3bf 8f5b 	dmb	ish
   b762a:	07db      	lsls	r3, r3, #31
   b762c:	d409      	bmi.n	b7642 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b762e:	4620      	mov	r0, r4
   b7630:	f7fc fd42 	bl	b40b8 <__cxa_guard_acquire>
   b7634:	b128      	cbz	r0, b7642 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b7636:	4620      	mov	r0, r4
   b7638:	f7fc fd43 	bl	b40c2 <__cxa_guard_release>
   b763c:	4803      	ldr	r0, [pc, #12]	; (b764c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b763e:	f002 f89d 	bl	b977c <atexit>
}
   b7642:	4803      	ldr	r0, [pc, #12]	; (b7650 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b7644:	bd10      	pop	{r4, pc}
   b7646:	bf00      	nop
   b7648:	2003e690 	.word	0x2003e690
   b764c:	000b7413 	.word	0x000b7413
   b7650:	2003dd38 	.word	0x2003dd38

000b7654 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b7654:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b7656:	4c09      	ldr	r4, [pc, #36]	; (b767c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b7658:	7823      	ldrb	r3, [r4, #0]
   b765a:	f3bf 8f5b 	dmb	ish
   b765e:	07db      	lsls	r3, r3, #31
   b7660:	d409      	bmi.n	b7676 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b7662:	4620      	mov	r0, r4
   b7664:	f7fc fd28 	bl	b40b8 <__cxa_guard_acquire>
   b7668:	b128      	cbz	r0, b7676 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b766a:	4620      	mov	r0, r4
   b766c:	f7fc fd29 	bl	b40c2 <__cxa_guard_release>
   b7670:	4803      	ldr	r0, [pc, #12]	; (b7680 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b7672:	f002 f883 	bl	b977c <atexit>
    return &factory;
}
   b7676:	4803      	ldr	r0, [pc, #12]	; (b7684 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b7678:	bd10      	pop	{r4, pc}
   b767a:	bf00      	nop
   b767c:	2003e694 	.word	0x2003e694
   b7680:	000b747b 	.word	0x000b747b
   b7684:	2003dd3c 	.word	0x2003dd3c

000b7688 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b7688:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b768a:	2500      	movs	r5, #0
   b768c:	4604      	mov	r4, r0
   b768e:	e9c0 5500 	strd	r5, r5, [r0]
   b7692:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7696:	6085      	str	r5, [r0, #8]
   b7698:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b769a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b769e:	f7fe fc47 	bl	b5f30 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b76a2:	f7ff ffbd 	bl	b7620 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b76a6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b76a8:	f7ff ffd4 	bl	b7654 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b76ac:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b76ae:	6220      	str	r0, [r4, #32]
}
   b76b0:	4620      	mov	r0, r4
   b76b2:	bd38      	pop	{r3, r4, r5, pc}

000b76b4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b76b4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b76b6:	4c0a      	ldr	r4, [pc, #40]	; (b76e0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b76b8:	7823      	ldrb	r3, [r4, #0]
   b76ba:	f3bf 8f5b 	dmb	ish
   b76be:	07db      	lsls	r3, r3, #31
   b76c0:	d40c      	bmi.n	b76dc <_ZN5spark10LogManager8instanceEv+0x28>
   b76c2:	4620      	mov	r0, r4
   b76c4:	f7fc fcf8 	bl	b40b8 <__cxa_guard_acquire>
   b76c8:	b140      	cbz	r0, b76dc <_ZN5spark10LogManager8instanceEv+0x28>
   b76ca:	4806      	ldr	r0, [pc, #24]	; (b76e4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b76cc:	f7ff ffdc 	bl	b7688 <_ZN5spark10LogManagerC1Ev>
   b76d0:	4620      	mov	r0, r4
   b76d2:	f7fc fcf6 	bl	b40c2 <__cxa_guard_release>
   b76d6:	4804      	ldr	r0, [pc, #16]	; (b76e8 <_ZN5spark10LogManager8instanceEv+0x34>)
   b76d8:	f002 f850 	bl	b977c <atexit>
    return &mgr;
}
   b76dc:	4801      	ldr	r0, [pc, #4]	; (b76e4 <_ZN5spark10LogManager8instanceEv+0x30>)
   b76de:	bd10      	pop	{r4, pc}
   b76e0:	2003e68c 	.word	0x2003e68c
   b76e4:	2003e69c 	.word	0x2003e69c
   b76e8:	000b7c09 	.word	0x000b7c09

000b76ec <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b76ec:	4a02      	ldr	r2, [pc, #8]	; (b76f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b76ee:	4903      	ldr	r1, [pc, #12]	; (b76fc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b76f0:	4803      	ldr	r0, [pc, #12]	; (b7700 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b76f2:	2300      	movs	r3, #0
   b76f4:	f7fe be0c 	b.w	b6310 <log_set_callbacks>
   b76f8:	000b79ed 	.word	0x000b79ed
   b76fc:	000b7979 	.word	0x000b7979
   b7700:	000b78f9 	.word	0x000b78f9

000b7704 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b7704:	2300      	movs	r3, #0
   b7706:	461a      	mov	r2, r3
   b7708:	4619      	mov	r1, r3
   b770a:	4618      	mov	r0, r3
   b770c:	f7fe be00 	b.w	b6310 <log_set_callbacks>

000b7710 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7710:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b7712:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7714:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7716:	4668      	mov	r0, sp
   b7718:	f7ff fec8 	bl	b74ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b771c:	466a      	mov	r2, sp
   b771e:	4629      	mov	r1, r5
   b7720:	4620      	mov	r0, r4
   b7722:	f7ff fd7b 	bl	b721c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b7726:	a801      	add	r0, sp, #4
   b7728:	f7fe ff80 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b772c:	4620      	mov	r0, r4
   b772e:	b003      	add	sp, #12
   b7730:	bd30      	pop	{r4, r5, pc}

000b7732 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7732:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b7734:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7736:	4604      	mov	r4, r0
   b7738:	4668      	mov	r0, sp
   b773a:	f7ff feb7 	bl	b74ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b773e:	466a      	mov	r2, sp
   b7740:	4629      	mov	r1, r5
   b7742:	4620      	mov	r0, r4
   b7744:	f7ff fd46 	bl	b71d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7748:	a801      	add	r0, sp, #4
   b774a:	f7fe ff6f 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b774e:	4620      	mov	r0, r4
   b7750:	b003      	add	sp, #12
   b7752:	bd30      	pop	{r4, r5, pc}

000b7754 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7754:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b7756:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7758:	4604      	mov	r4, r0
   b775a:	4668      	mov	r0, sp
   b775c:	f7ff fea6 	bl	b74ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7760:	466a      	mov	r2, sp
   b7762:	4629      	mov	r1, r5
   b7764:	4620      	mov	r0, r4
   b7766:	f7ff fcde 	bl	b7126 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b776a:	a801      	add	r0, sp, #4
   b776c:	f7fe ff5e 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7770:	4620      	mov	r0, r4
   b7772:	b003      	add	sp, #12
   b7774:	bd30      	pop	{r4, r5, pc}
	...

000b7778 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b7778:	b570      	push	{r4, r5, r6, lr}
   b777a:	b08a      	sub	sp, #40	; 0x28
   b777c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b777e:	4601      	mov	r1, r0
   b7780:	a804      	add	r0, sp, #16
   b7782:	f7ff ffc5 	bl	b7710 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b7786:	4e14      	ldr	r6, [pc, #80]	; (b77d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b7788:	a804      	add	r0, sp, #16
   b778a:	f7ff fd5f 	bl	b724c <_ZN5spark18JSONObjectIterator4nextEv>
   b778e:	b1e8      	cbz	r0, b77cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b7790:	a904      	add	r1, sp, #16
   b7792:	4668      	mov	r0, sp
   b7794:	f7ff ffcd 	bl	b7732 <_ZNK5spark18JSONObjectIterator4nameEv>
   b7798:	9802      	ldr	r0, [sp, #8]
   b779a:	4631      	mov	r1, r6
   b779c:	f7ff fe66 	bl	b746c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b77a0:	4604      	mov	r4, r0
   b77a2:	b110      	cbz	r0, b77aa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b77a4:	1e2c      	subs	r4, r5, #0
   b77a6:	bf18      	it	ne
   b77a8:	2401      	movne	r4, #1
   b77aa:	a801      	add	r0, sp, #4
   b77ac:	f7fe ff3e 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77b0:	2c00      	cmp	r4, #0
   b77b2:	d0e9      	beq.n	b7788 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b77b4:	a904      	add	r1, sp, #16
   b77b6:	4668      	mov	r0, sp
   b77b8:	f7ff ffcc 	bl	b7754 <_ZNK5spark18JSONObjectIterator5valueEv>
   b77bc:	4668      	mov	r0, sp
   b77be:	f7ff fce8 	bl	b7192 <_ZNK5spark9JSONValue5toIntEv>
   b77c2:	6028      	str	r0, [r5, #0]
   b77c4:	a801      	add	r0, sp, #4
   b77c6:	f7fe ff31 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77ca:	e7dd      	b.n	b7788 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b77cc:	a805      	add	r0, sp, #20
   b77ce:	f7fe ff2d 	bl	b662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b77d2:	b00a      	add	sp, #40	; 0x28
   b77d4:	bd70      	pop	{r4, r5, r6, pc}
   b77d6:	bf00      	nop
   b77d8:	000b9e41 	.word	0x000b9e41

000b77dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b77dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b77de:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b77e0:	4620      	mov	r0, r4
   b77e2:	4913      	ldr	r1, [pc, #76]	; (b7830 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b77e4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b77e6:	f002 f85c 	bl	b98a2 <strcmp>
   b77ea:	b950      	cbnz	r0, b7802 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b77ec:	f001 f9a0 	bl	b8b30 <_Z16_fetch_usbserialv>
   b77f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b77f4:	f001 f98c 	bl	b8b10 <_ZN9USBSerial5beginEl>
}
   b77f8:	b003      	add	sp, #12
   b77fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b77fe:	f001 b997 	b.w	b8b30 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b7802:	490c      	ldr	r1, [pc, #48]	; (b7834 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b7804:	4620      	mov	r0, r4
   b7806:	f002 f84c 	bl	b98a2 <strcmp>
   b780a:	b978      	cbnz	r0, b782c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b780c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b7810:	a901      	add	r1, sp, #4
   b7812:	4628      	mov	r0, r5
        int baud = 9600;
   b7814:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b7816:	f7ff ffaf 	bl	b7778 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b781a:	f001 fb65 	bl	b8ee8 <_Z22__fetch_global_Serial1v>
   b781e:	9901      	ldr	r1, [sp, #4]
   b7820:	f001 f91e 	bl	b8a60 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b7824:	f001 fb60 	bl	b8ee8 <_Z22__fetch_global_Serial1v>
}
   b7828:	b003      	add	sp, #12
   b782a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b782c:	2000      	movs	r0, #0
   b782e:	e7fb      	b.n	b7828 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b7830:	000b9e46 	.word	0x000b9e46
   b7834:	000b9e4d 	.word	0x000b9e4d

000b7838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7838:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b783a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b783e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7840:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7842:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7846:	42ae      	cmp	r6, r5
   b7848:	d005      	beq.n	b7856 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b784a:	f105 0008 	add.w	r0, r5, #8
   b784e:	f7ff fff3 	bl	b7838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7852:	3514      	adds	r5, #20
   b7854:	e7f7      	b.n	b7846 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b7856:	6820      	ldr	r0, [r4, #0]
   b7858:	f7fe fe5a 	bl	b6510 <free>
}
   b785c:	4620      	mov	r0, r4
   b785e:	bd70      	pop	{r4, r5, r6, pc}

000b7860 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b7860:	b510      	push	{r4, lr}
   b7862:	4604      	mov	r4, r0
   b7864:	300c      	adds	r0, #12
   b7866:	f7ff ffe7 	bl	b7838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b786a:	4620      	mov	r0, r4
   b786c:	f7fe fecc 	bl	b6608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7870:	4620      	mov	r0, r4
   b7872:	bd10      	pop	{r4, pc}

000b7874 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b7874:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b7876:	4b04      	ldr	r3, [pc, #16]	; (b7888 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b7878:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b787a:	f840 3b04 	str.w	r3, [r0], #4
   b787e:	f7ff ffef 	bl	b7860 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b7882:	4620      	mov	r0, r4
   b7884:	bd10      	pop	{r4, pc}
   b7886:	bf00      	nop
   b7888:	000b9d0c 	.word	0x000b9d0c

000b788c <_ZN5spark16StreamLogHandlerD0Ev>:
   b788c:	b510      	push	{r4, lr}
   b788e:	4604      	mov	r4, r0
   b7890:	f7ff fff0 	bl	b7874 <_ZN5spark16StreamLogHandlerD1Ev>
   b7894:	4620      	mov	r0, r4
   b7896:	2124      	movs	r1, #36	; 0x24
   b7898:	f7fc fbff 	bl	b409a <_ZdlPvj>
   b789c:	4620      	mov	r0, r4
   b789e:	bd10      	pop	{r4, pc}

000b78a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b78a0:	b510      	push	{r4, lr}
   b78a2:	4b03      	ldr	r3, [pc, #12]	; (b78b0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b78a4:	6003      	str	r3, [r0, #0]
   b78a6:	4604      	mov	r4, r0
   b78a8:	f7ff ffe4 	bl	b7874 <_ZN5spark16StreamLogHandlerD1Ev>
   b78ac:	4620      	mov	r0, r4
   b78ae:	bd10      	pop	{r4, pc}
   b78b0:	000b9ee8 	.word	0x000b9ee8

000b78b4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b78b4:	b510      	push	{r4, lr}
   b78b6:	4604      	mov	r4, r0
   b78b8:	f7ff fff2 	bl	b78a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b78bc:	4620      	mov	r0, r4
   b78be:	2124      	movs	r1, #36	; 0x24
   b78c0:	f7fc fbeb 	bl	b409a <_ZdlPvj>
   b78c4:	4620      	mov	r0, r4
   b78c6:	bd10      	pop	{r4, pc}

000b78c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b78c8:	2200      	movs	r2, #0
   b78ca:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b78ce:	b510      	push	{r4, lr}
        capacity_(0) {
   b78d0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b78d2:	680c      	ldr	r4, [r1, #0]
   b78d4:	6004      	str	r4, [r0, #0]
   b78d6:	684c      	ldr	r4, [r1, #4]
   b78d8:	6044      	str	r4, [r0, #4]
   b78da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b78dc:	600a      	str	r2, [r1, #0]
   b78de:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b78e0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b78e2:	608a      	str	r2, [r1, #8]
}
   b78e4:	bd10      	pop	{r4, pc}

000b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b78e6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b78e8:	6803      	ldr	r3, [r0, #0]
   b78ea:	4604      	mov	r4, r0
   b78ec:	6818      	ldr	r0, [r3, #0]
   b78ee:	f7fe fb37 	bl	b5f60 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b78f2:	4620      	mov	r0, r4
   b78f4:	bd10      	pop	{r4, pc}
	...

000b78f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b78f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b78fc:	b087      	sub	sp, #28
   b78fe:	4680      	mov	r8, r0
   b7900:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b7902:	4b1c      	ldr	r3, [pc, #112]	; (b7974 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b7904:	685b      	ldr	r3, [r3, #4]
   b7906:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b790a:	4689      	mov	r9, r1
   b790c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b790e:	b96b      	cbnz	r3, b792c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b7910:	f7ff fed0 	bl	b76b4 <_ZN5spark10LogManager8instanceEv>
   b7914:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7916:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b791a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b791c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b791e:	f7ff fda3 	bl	b7468 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b7922:	7b23      	ldrb	r3, [r4, #12]
   b7924:	b12b      	cbz	r3, b7932 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b7926:	a805      	add	r0, sp, #20
   b7928:	f7ff ffdd 	bl	b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b792c:	b007      	add	sp, #28
   b792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b7932:	2301      	movs	r3, #1
   b7934:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b7936:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b793a:	fa5f f989 	uxtb.w	r9, r9
   b793e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7942:	45aa      	cmp	sl, r5
   b7944:	d012      	beq.n	b796c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b7946:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b794a:	4631      	mov	r1, r6
   b794c:	1d38      	adds	r0, r7, #4
   b794e:	f7ff fe3d 	bl	b75cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7952:	4581      	cmp	r9, r0
   b7954:	d3f5      	bcc.n	b7942 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b7956:	683b      	ldr	r3, [r7, #0]
   b7958:	9a03      	ldr	r2, [sp, #12]
   b795a:	9200      	str	r2, [sp, #0]
   b795c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b7960:	464a      	mov	r2, r9
   b7962:	4633      	mov	r3, r6
   b7964:	4641      	mov	r1, r8
   b7966:	4638      	mov	r0, r7
   b7968:	47d8      	blx	fp
   b796a:	e7ea      	b.n	b7942 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b796c:	2300      	movs	r3, #0
   b796e:	7323      	strb	r3, [r4, #12]
   b7970:	e7d9      	b.n	b7926 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b7972:	bf00      	nop
   b7974:	e000ed00 	.word	0xe000ed00

000b7978 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b7978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b797c:	469b      	mov	fp, r3
   b797e:	4b1a      	ldr	r3, [pc, #104]	; (b79e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b7980:	685b      	ldr	r3, [r3, #4]
   b7982:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7986:	4680      	mov	r8, r0
   b7988:	4689      	mov	r9, r1
   b798a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b798c:	b96b      	cbnz	r3, b79aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b798e:	f7ff fe91 	bl	b76b4 <_ZN5spark10LogManager8instanceEv>
   b7992:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b7994:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b7998:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b799a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b799c:	f7ff fd64 	bl	b7468 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b79a0:	7b23      	ldrb	r3, [r4, #12]
   b79a2:	b12b      	cbz	r3, b79b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b79a4:	a801      	add	r0, sp, #4
   b79a6:	f7ff ff9e 	bl	b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b79aa:	b003      	add	sp, #12
   b79ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b79b0:	2301      	movs	r3, #1
   b79b2:	7323      	strb	r3, [r4, #12]
   b79b4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b79b8:	b2f6      	uxtb	r6, r6
   b79ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b79be:	4555      	cmp	r5, sl
   b79c0:	d00e      	beq.n	b79e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b79c2:	f855 7b04 	ldr.w	r7, [r5], #4
   b79c6:	4659      	mov	r1, fp
   b79c8:	1d38      	adds	r0, r7, #4
   b79ca:	f7ff fdff 	bl	b75cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   b79ce:	4286      	cmp	r6, r0
   b79d0:	d3f5      	bcc.n	b79be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b79d2:	683b      	ldr	r3, [r7, #0]
   b79d4:	464a      	mov	r2, r9
   b79d6:	68db      	ldr	r3, [r3, #12]
   b79d8:	4641      	mov	r1, r8
   b79da:	4638      	mov	r0, r7
   b79dc:	4798      	blx	r3
   b79de:	e7ee      	b.n	b79be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b79e0:	2300      	movs	r3, #0
   b79e2:	7323      	strb	r3, [r4, #12]
   b79e4:	e7de      	b.n	b79a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b79e6:	bf00      	nop
   b79e8:	e000ed00 	.word	0xe000ed00

000b79ec <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b79ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b79f0:	4b16      	ldr	r3, [pc, #88]	; (b7a4c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b79f2:	685b      	ldr	r3, [r3, #4]
   b79f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b79f8:	4605      	mov	r5, r0
   b79fa:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b79fc:	bb1b      	cbnz	r3, b7a46 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b79fe:	f7ff fe59 	bl	b76b4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b7a02:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b7a06:	4604      	mov	r4, r0
   b7a08:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7a0a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7a0c:	f7ff fd2c 	bl	b7468 <_ZN14RecursiveMutex4lockEv.isra.0>
   b7a10:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b7a14:	2446      	movs	r4, #70	; 0x46
   b7a16:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7a1a:	45b0      	cmp	r8, r6
   b7a1c:	d109      	bne.n	b7a32 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b7a1e:	a801      	add	r0, sp, #4
   b7a20:	f7ff ff61 	bl	b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b7a24:	42a5      	cmp	r5, r4
   b7a26:	bfb4      	ite	lt
   b7a28:	2000      	movlt	r0, #0
   b7a2a:	2001      	movge	r0, #1
}
   b7a2c:	b002      	add	sp, #8
   b7a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b7a32:	f856 0b04 	ldr.w	r0, [r6], #4
   b7a36:	4639      	mov	r1, r7
   b7a38:	3004      	adds	r0, #4
   b7a3a:	f7ff fdc7 	bl	b75cc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b7a3e:	4284      	cmp	r4, r0
   b7a40:	bfa8      	it	ge
   b7a42:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b7a44:	e7e9      	b.n	b7a1a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b7a46:	2000      	movs	r0, #0
   b7a48:	e7f0      	b.n	b7a2c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b7a4a:	bf00      	nop
   b7a4c:	e000ed00 	.word	0xe000ed00

000b7a50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a52:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b7a56:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a58:	4604      	mov	r4, r0
   b7a5a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a5c:	db0d      	blt.n	b7a7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b7a5e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b7a60:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7a62:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7a64:	dd04      	ble.n	b7a70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b7a66:	00b9      	lsls	r1, r7, #2
   b7a68:	f7fe fd5a 	bl	b6520 <realloc>
            if (!d) {
   b7a6c:	b918      	cbnz	r0, b7a76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b7a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b7a70:	f7fe fd4e 	bl	b6510 <free>
        T* d = nullptr;
   b7a74:	2000      	movs	r0, #0
        data_ = d;
   b7a76:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7a78:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7a7a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7a7c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7a7e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b7a82:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7a84:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b7a88:	1d08      	adds	r0, r1, #4
   b7a8a:	f001 fea3 	bl	b97d4 <memmove>
    new(p) T(std::move(value));
   b7a8e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b7a92:	6863      	ldr	r3, [r4, #4]
   b7a94:	3301      	adds	r3, #1
   b7a96:	6063      	str	r3, [r4, #4]
    return true;
   b7a98:	2001      	movs	r0, #1
   b7a9a:	e7e8      	b.n	b7a6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b7a9c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b7a9e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b7aa2:	4604      	mov	r4, r0
   b7aa4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7aa6:	9301      	str	r3, [sp, #4]
   b7aa8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b7aaa:	f7ff fcdd 	bl	b7468 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b7aae:	e9d4 3200 	ldrd	r3, r2, [r4]
   b7ab2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b7ab6:	4293      	cmp	r3, r2
   b7ab8:	4619      	mov	r1, r3
   b7aba:	d00b      	beq.n	b7ad4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b7abc:	6809      	ldr	r1, [r1, #0]
   b7abe:	42a9      	cmp	r1, r5
   b7ac0:	f103 0304 	add.w	r3, r3, #4
   b7ac4:	d1f7      	bne.n	b7ab6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b7ac6:	a801      	add	r0, sp, #4
   b7ac8:	f7ff ff0d 	bl	b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7acc:	2500      	movs	r5, #0
}
   b7ace:	4628      	mov	r0, r5
   b7ad0:	b003      	add	sp, #12
   b7ad2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b7ad4:	4629      	mov	r1, r5
   b7ad6:	4620      	mov	r0, r4
   b7ad8:	f7ff ffba 	bl	b7a50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b7adc:	4605      	mov	r5, r0
   b7ade:	2800      	cmp	r0, #0
   b7ae0:	d0f1      	beq.n	b7ac6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b7ae2:	6863      	ldr	r3, [r4, #4]
   b7ae4:	2b01      	cmp	r3, #1
   b7ae6:	d101      	bne.n	b7aec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b7ae8:	f7ff fe00 	bl	b76ec <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7aec:	a801      	add	r0, sp, #4
   b7aee:	f7ff fefa 	bl	b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7af2:	e7ec      	b.n	b7ace <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b7af4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7af4:	b570      	push	{r4, r5, r6, lr}
   b7af6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b7af8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7afc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b7afe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b7b02:	4282      	cmp	r2, r0
   b7b04:	d00f      	beq.n	b7b26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b7b06:	4601      	mov	r1, r0
            if (*p == value) {
   b7b08:	681d      	ldr	r5, [r3, #0]
   b7b0a:	f851 6b04 	ldr.w	r6, [r1], #4
   b7b0e:	42ae      	cmp	r6, r5
   b7b10:	d107      	bne.n	b7b22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b12:	1a52      	subs	r2, r2, r1
   b7b14:	f001 fe5e 	bl	b97d4 <memmove>
    --size_;
   b7b18:	6863      	ldr	r3, [r4, #4]
   b7b1a:	3b01      	subs	r3, #1
   b7b1c:	6063      	str	r3, [r4, #4]
    return true;
   b7b1e:	2001      	movs	r0, #1
}
   b7b20:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b7b22:	4608      	mov	r0, r1
   b7b24:	e7ed      	b.n	b7b02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b7b26:	2000      	movs	r0, #0
   b7b28:	e7fa      	b.n	b7b20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b7b2a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7b2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b7b2c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7b30:	4604      	mov	r4, r0
   b7b32:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7b34:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7b36:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b7b38:	f7ff fc96 	bl	b7468 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b7b3c:	a901      	add	r1, sp, #4
   b7b3e:	4620      	mov	r0, r4
   b7b40:	f7ff ffd8 	bl	b7af4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b7b44:	b118      	cbz	r0, b7b4e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b7b46:	6863      	ldr	r3, [r4, #4]
   b7b48:	b90b      	cbnz	r3, b7b4e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b7b4a:	f7ff fddb 	bl	b7704 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7b4e:	a803      	add	r0, sp, #12
   b7b50:	f7ff fec9 	bl	b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b7b54:	b004      	add	sp, #16
   b7b56:	bd10      	pop	{r4, pc}

000b7b58 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b7b58:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b7b5a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b7b5e:	2318      	movs	r3, #24
   b7b60:	4604      	mov	r4, r0
   b7b62:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b7b66:	42ae      	cmp	r6, r5
   b7b68:	d015      	beq.n	b7b96 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b7b6a:	f105 0110 	add.w	r1, r5, #16
   b7b6e:	4620      	mov	r0, r4
   b7b70:	f7ff ffc0 	bl	b7af4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b7b74:	6863      	ldr	r3, [r4, #4]
   b7b76:	b90b      	cbnz	r3, b7b7c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b7b78:	f7ff fdc4 	bl	b7704 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b7b7c:	69e0      	ldr	r0, [r4, #28]
   b7b7e:	6929      	ldr	r1, [r5, #16]
   b7b80:	6803      	ldr	r3, [r0, #0]
   b7b82:	68db      	ldr	r3, [r3, #12]
   b7b84:	4798      	blx	r3
        if (h.stream) {
   b7b86:	6969      	ldr	r1, [r5, #20]
   b7b88:	b119      	cbz	r1, b7b92 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b7b8a:	6a20      	ldr	r0, [r4, #32]
   b7b8c:	6803      	ldr	r3, [r0, #0]
   b7b8e:	68db      	ldr	r3, [r3, #12]
   b7b90:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b7b92:	3518      	adds	r5, #24
   b7b94:	e7e7      	b.n	b7b66 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b7b96:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7b9a:	2618      	movs	r6, #24
   b7b9c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7ba0:	42ae      	cmp	r6, r5
   b7ba2:	d004      	beq.n	b7bae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b7ba4:	4628      	mov	r0, r5
   b7ba6:	f000 fd92 	bl	b86ce <_ZN6StringD1Ev>
   b7baa:	3518      	adds	r5, #24
   b7bac:	e7f8      	b.n	b7ba0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b7bae:	2300      	movs	r3, #0
   b7bb0:	6163      	str	r3, [r4, #20]
}
   b7bb2:	bd70      	pop	{r4, r5, r6, pc}

000b7bb4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7bb6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b7bb8:	f7ff fda4 	bl	b7704 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7bbc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b7bc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7bc2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7bc4:	f7ff fc50 	bl	b7468 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b7bc8:	4620      	mov	r0, r4
   b7bca:	f7ff ffc5 	bl	b7b58 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b7bce:	a801      	add	r0, sp, #4
   b7bd0:	f7ff fe89 	bl	b78e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b7bd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7bd6:	b108      	cbz	r0, b7bdc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b7bd8:	f7fe f9b2 	bl	b5f40 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b7bdc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7be0:	2618      	movs	r6, #24
   b7be2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7be6:	42ae      	cmp	r6, r5
   b7be8:	d004      	beq.n	b7bf4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b7bea:	4628      	mov	r0, r5
   b7bec:	f000 fd6f 	bl	b86ce <_ZN6StringD1Ev>
   b7bf0:	3518      	adds	r5, #24
   b7bf2:	e7f8      	b.n	b7be6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b7bf4:	6920      	ldr	r0, [r4, #16]
   b7bf6:	f7fe fc8b 	bl	b6510 <free>
   b7bfa:	6820      	ldr	r0, [r4, #0]
   b7bfc:	f7fe fc88 	bl	b6510 <free>
}
   b7c00:	4620      	mov	r0, r4
   b7c02:	b002      	add	sp, #8
   b7c04:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7c08 <__tcf_2>:
    static LogManager mgr;
   b7c08:	4801      	ldr	r0, [pc, #4]	; (b7c10 <__tcf_2+0x8>)
   b7c0a:	f7ff bfd3 	b.w	b7bb4 <_ZN5spark10LogManagerD1Ev>
   b7c0e:	bf00      	nop
   b7c10:	2003e69c 	.word	0x2003e69c

000b7c14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b7c14:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c18:	4604      	mov	r4, r0
   b7c1a:	460d      	mov	r5, r1
   b7c1c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7c1e:	d915      	bls.n	b7c4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b7c20:	4290      	cmp	r0, r2
   b7c22:	d214      	bcs.n	b7c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b7c24:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7c28:	1a75      	subs	r5, r6, r1
   b7c2a:	f1a1 0714 	sub.w	r7, r1, #20
   b7c2e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7c30:	42b7      	cmp	r7, r6
   b7c32:	d01a      	beq.n	b7c6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b7c34:	b11c      	cbz	r4, b7c3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b7c36:	4631      	mov	r1, r6
   b7c38:	4620      	mov	r0, r4
   b7c3a:	f7ff fc78 	bl	b752e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b7c3e:	f106 0008 	add.w	r0, r6, #8
   b7c42:	f7ff fdf9 	bl	b7838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b7c46:	3e14      	subs	r6, #20
   b7c48:	3c14      	subs	r4, #20
   b7c4a:	e7f1      	b.n	b7c30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b7c4c:	d00d      	beq.n	b7c6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b7c4e:	42b5      	cmp	r5, r6
   b7c50:	d00b      	beq.n	b7c6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b7c52:	b11c      	cbz	r4, b7c5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b7c54:	4629      	mov	r1, r5
   b7c56:	4620      	mov	r0, r4
   b7c58:	f7ff fc69 	bl	b752e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b7c5c:	f105 0008 	add.w	r0, r5, #8
   b7c60:	f7ff fdea 	bl	b7838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b7c64:	3514      	adds	r5, #20
   b7c66:	3414      	adds	r4, #20
   b7c68:	e7f1      	b.n	b7c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b7c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b7c6c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7c70:	4604      	mov	r4, r0
   b7c72:	460d      	mov	r5, r1
   b7c74:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7c76:	d914      	bls.n	b7ca2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b7c78:	4290      	cmp	r0, r2
   b7c7a:	d213      	bcs.n	b7ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b7c7c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b7c80:	1a75      	subs	r5, r6, r1
   b7c82:	f1a1 0710 	sub.w	r7, r1, #16
   b7c86:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7c88:	42b7      	cmp	r7, r6
   b7c8a:	d018      	beq.n	b7cbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b7c8c:	b11c      	cbz	r4, b7c96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b7c8e:	4631      	mov	r1, r6
   b7c90:	4620      	mov	r0, r4
   b7c92:	f000 fd85 	bl	b87a0 <_ZN6StringC1EOS_>
                end->~T();
   b7c96:	4630      	mov	r0, r6
   b7c98:	f000 fd19 	bl	b86ce <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7c9c:	3e10      	subs	r6, #16
   b7c9e:	3c10      	subs	r4, #16
   b7ca0:	e7f2      	b.n	b7c88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7ca2:	d00c      	beq.n	b7cbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7ca4:	42b5      	cmp	r5, r6
   b7ca6:	d00a      	beq.n	b7cbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b7ca8:	b11c      	cbz	r4, b7cb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b7caa:	4629      	mov	r1, r5
   b7cac:	4620      	mov	r0, r4
   b7cae:	f000 fd77 	bl	b87a0 <_ZN6StringC1EOS_>
                p->~T();
   b7cb2:	4628      	mov	r0, r5
   b7cb4:	f000 fd0b 	bl	b86ce <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7cb8:	3510      	adds	r5, #16
   b7cba:	3410      	adds	r4, #16
   b7cbc:	e7f2      	b.n	b7ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b7cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7cc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b7cc0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7cc2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7cc4:	4605      	mov	r5, r0
        if (n > 0) {
   b7cc6:	dd11      	ble.n	b7cec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7cc8:	0130      	lsls	r0, r6, #4
   b7cca:	f7fe fc19 	bl	b6500 <malloc>
            if (!d) {
   b7cce:	4604      	mov	r4, r0
   b7cd0:	b158      	cbz	r0, b7cea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7cd2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7cd6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b7cda:	f7ff ffc7 	bl	b7c6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7cde:	6828      	ldr	r0, [r5, #0]
   b7ce0:	f7fe fc16 	bl	b6510 <free>
        data_ = d;
   b7ce4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7ce6:	60ae      	str	r6, [r5, #8]
        return true;
   b7ce8:	2001      	movs	r0, #1
    }
   b7cea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7cec:	2400      	movs	r4, #0
   b7cee:	e7f6      	b.n	b7cde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b7cf0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cf4:	4690      	mov	r8, r2
   b7cf6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b7cf8:	2300      	movs	r3, #0
   b7cfa:	9103      	str	r1, [sp, #12]
    return size_;
   b7cfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b7d00:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7d02:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b7d04:	4299      	cmp	r1, r3
        capacity_(0) {
   b7d06:	e9c0 3300 	strd	r3, r3, [r0]
   b7d0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7d12:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7d16:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7d18:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b7d1a:	dc23      	bgt.n	b7d64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b7d1c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b7d20:	2314      	movs	r3, #20
   b7d22:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b7d26:	42af      	cmp	r7, r5
   b7d28:	d03b      	beq.n	b7da2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b7d2a:	4629      	mov	r1, r5
   b7d2c:	a80b      	add	r0, sp, #44	; 0x2c
   b7d2e:	f000 fd37 	bl	b87a0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b7d32:	a90b      	add	r1, sp, #44	; 0x2c
   b7d34:	a80f      	add	r0, sp, #60	; 0x3c
   b7d36:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b7d38:	f000 fd32 	bl	b87a0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d3c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7d40:	4299      	cmp	r1, r3
   b7d42:	da1b      	bge.n	b7d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7d44:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b7d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b7d48:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b7d4c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b7d50:	4631      	mov	r1, r6
   b7d52:	f106 0010 	add.w	r0, r6, #16
   b7d56:	f7ff ff89 	bl	b7c6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b7d5a:	b9ee      	cbnz	r6, b7d98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b7d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7d5e:	3301      	adds	r3, #1
   b7d60:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b7d62:	e011      	b.n	b7d88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b7d64:	a808      	add	r0, sp, #32
   b7d66:	f7ff ffab 	bl	b7cc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7d6a:	2800      	cmp	r0, #0
   b7d6c:	d1d6      	bne.n	b7d1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b7d6e:	a808      	add	r0, sp, #32
   b7d70:	f7fe fc4a 	bl	b6608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7d74:	4620      	mov	r0, r4
   b7d76:	b015      	add	sp, #84	; 0x54
   b7d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7d7c:	3101      	adds	r1, #1
   b7d7e:	a808      	add	r0, sp, #32
   b7d80:	f7ff ff9e 	bl	b7cc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7d84:	2800      	cmp	r0, #0
   b7d86:	d1dd      	bne.n	b7d44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b7d88:	a80f      	add	r0, sp, #60	; 0x3c
   b7d8a:	f000 fca0 	bl	b86ce <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b7d8e:	a80b      	add	r0, sp, #44	; 0x2c
   b7d90:	f000 fc9d 	bl	b86ce <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b7d94:	3514      	adds	r5, #20
   b7d96:	e7c6      	b.n	b7d26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b7d98:	a90f      	add	r1, sp, #60	; 0x3c
   b7d9a:	4630      	mov	r0, r6
   b7d9c:	f000 fd00 	bl	b87a0 <_ZN6StringC1EOS_>
   b7da0:	e7dc      	b.n	b7d5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b7da2:	2600      	movs	r6, #0
   b7da4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b7da8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b7daa:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b7dae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7db2:	429e      	cmp	r6, r3
   b7db4:	da7c      	bge.n	b7eb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b7db6:	0133      	lsls	r3, r6, #4
   b7db8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b7dba:	9306      	str	r3, [sp, #24]
        if (!category) {
   b7dbc:	b90b      	cbnz	r3, b7dc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b7dbe:	3601      	adds	r6, #1
   b7dc0:	e7f5      	b.n	b7dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b7dc2:	2300      	movs	r3, #0
   b7dc4:	9307      	str	r3, [sp, #28]
   b7dc6:	fb09 f306 	mul.w	r3, r9, r6
   b7dca:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b7dcc:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b7dce:	a907      	add	r1, sp, #28
   b7dd0:	a806      	add	r0, sp, #24
   b7dd2:	f7ff fb22 	bl	b741a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b7dd6:	4682      	mov	sl, r0
   b7dd8:	2800      	cmp	r0, #0
   b7dda:	d0f0      	beq.n	b7dbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b7ddc:	f04f 0300 	mov.w	r3, #0
   b7de0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7de4:	4601      	mov	r1, r0
   b7de6:	9a07      	ldr	r2, [sp, #28]
   b7de8:	f10d 0317 	add.w	r3, sp, #23
   b7dec:	4628      	mov	r0, r5
   b7dee:	f7ff fbb1 	bl	b7554 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7df2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7df6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7df8:	2f00      	cmp	r7, #0
   b7dfa:	d14a      	bne.n	b7e92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b7dfc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b7e00:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b7e04:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b7e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7e0c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b7e10:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b7e14:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e16:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b7e1a:	4293      	cmp	r3, r2
   b7e1c:	db17      	blt.n	b7e4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b7e1e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b7e22:	f1ba 0f00 	cmp.w	sl, #0
   b7e26:	dd30      	ble.n	b7e8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b7e28:	fb09 f00a 	mul.w	r0, r9, sl
   b7e2c:	f7fe fb68 	bl	b6500 <malloc>
            if (!d) {
   b7e30:	4683      	mov	fp, r0
   b7e32:	b360      	cbz	r0, b7e8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b7e34:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7e38:	fb09 1202 	mla	r2, r9, r2, r1
   b7e3c:	f7ff feea 	bl	b7c14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b7e40:	6828      	ldr	r0, [r5, #0]
   b7e42:	f7fe fb65 	bl	b6510 <free>
        data_ = d;
   b7e46:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b7e4a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b7e4e:	682b      	ldr	r3, [r5, #0]
   b7e50:	9a01      	ldr	r2, [sp, #4]
   b7e52:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b7e56:	686a      	ldr	r2, [r5, #4]
   b7e58:	4651      	mov	r1, sl
   b7e5a:	fb09 3202 	mla	r2, r9, r2, r3
   b7e5e:	f10a 0014 	add.w	r0, sl, #20
   b7e62:	f7ff fed7 	bl	b7c14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b7e66:	f1ba 0f00 	cmp.w	sl, #0
   b7e6a:	d003      	beq.n	b7e74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b7e6c:	a90f      	add	r1, sp, #60	; 0x3c
   b7e6e:	4650      	mov	r0, sl
   b7e70:	f7ff fb5d 	bl	b752e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b7e74:	686b      	ldr	r3, [r5, #4]
   b7e76:	3301      	adds	r3, #1
   b7e78:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b7e7a:	a811      	add	r0, sp, #68	; 0x44
   b7e7c:	f7ff fcdc 	bl	b7838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7e80:	b13f      	cbz	r7, b7e92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b7e82:	a80b      	add	r0, sp, #44	; 0x2c
   b7e84:	f7ff fcd8 	bl	b7838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7e88:	e771      	b.n	b7d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b7e8a:	46bb      	mov	fp, r7
   b7e8c:	e7d8      	b.n	b7e40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7e8e:	2701      	movs	r7, #1
   b7e90:	e7f3      	b.n	b7e7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b7e92:	9b01      	ldr	r3, [sp, #4]
   b7e94:	682d      	ldr	r5, [r5, #0]
   b7e96:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b7e9a:	9b06      	ldr	r3, [sp, #24]
   b7e9c:	781b      	ldrb	r3, [r3, #0]
   b7e9e:	b92b      	cbnz	r3, b7eac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b7ea0:	f8d8 3000 	ldr.w	r3, [r8]
   b7ea4:	9a02      	ldr	r2, [sp, #8]
   b7ea6:	4413      	add	r3, r2
   b7ea8:	7c1b      	ldrb	r3, [r3, #16]
   b7eaa:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b7eac:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b7eae:	e78e      	b.n	b7dce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7eb0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7eb2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7eb4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7eb6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7eb8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7eba:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b7ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b7ebe:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ec0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7ec2:	60a2      	str	r2, [r4, #8]
   b7ec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b7ec6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ec8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7eca:	60e2      	str	r2, [r4, #12]
   b7ecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b7ece:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ed0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7ed2:	6122      	str	r2, [r4, #16]
   b7ed4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b7ed6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b7ed8:	9b03      	ldr	r3, [sp, #12]
   b7eda:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b7edc:	6162      	str	r2, [r4, #20]
   b7ede:	7623      	strb	r3, [r4, #24]
   b7ee0:	e7cf      	b.n	b7e82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b7ee4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7ee6:	4604      	mov	r4, r0
   b7ee8:	b087      	sub	sp, #28
   b7eea:	460d      	mov	r5, r1
        filter_(level, filters) {
   b7eec:	4626      	mov	r6, r4
        stream_(&stream) {
   b7eee:	4619      	mov	r1, r3
   b7ef0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7ef2:	4617      	mov	r7, r2
        stream_(&stream) {
   b7ef4:	f7fc fc54 	bl	b47a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b7ef8:	4b0b      	ldr	r3, [pc, #44]	; (b7f28 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b7efa:	f846 3b04 	str.w	r3, [r6], #4
   b7efe:	4669      	mov	r1, sp
   b7f00:	a803      	add	r0, sp, #12
   b7f02:	f7fc fc4d 	bl	b47a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7f06:	aa03      	add	r2, sp, #12
   b7f08:	4639      	mov	r1, r7
   b7f0a:	4630      	mov	r0, r6
   b7f0c:	f7ff fef0 	bl	b7cf0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7f10:	a803      	add	r0, sp, #12
   b7f12:	f7fc fa03 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b7f16:	4668      	mov	r0, sp
   b7f18:	f7fc fa00 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7f1c:	4b03      	ldr	r3, [pc, #12]	; (b7f2c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b7f1e:	6023      	str	r3, [r4, #0]
}
   b7f20:	4620      	mov	r0, r4
        stream_(&stream) {
   b7f22:	6225      	str	r5, [r4, #32]
}
   b7f24:	b007      	add	sp, #28
   b7f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7f28:	000b9d0c 	.word	0x000b9d0c
   b7f2c:	000b9ed0 	.word	0x000b9ed0

000b7f30 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b7f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f32:	460f      	mov	r7, r1
   b7f34:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7f36:	491d      	ldr	r1, [pc, #116]	; (b7fac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b7f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7f3a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b7f3c:	4616      	mov	r6, r2
   b7f3e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7f40:	f001 fcaf 	bl	b98a2 <strcmp>
   b7f44:	b9c0      	cbnz	r0, b7f78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b7f46:	b1a4      	cbz	r4, b7f72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b7f48:	4629      	mov	r1, r5
   b7f4a:	a801      	add	r0, sp, #4
   b7f4c:	f7ff fcbc 	bl	b78c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7f50:	4917      	ldr	r1, [pc, #92]	; (b7fb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7f52:	2024      	movs	r0, #36	; 0x24
   b7f54:	f000 ffec 	bl	b8f30 <_ZnwjRKSt9nothrow_t>
   b7f58:	4605      	mov	r5, r0
   b7f5a:	b130      	cbz	r0, b7f6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b7f5c:	ab01      	add	r3, sp, #4
   b7f5e:	4632      	mov	r2, r6
   b7f60:	4621      	mov	r1, r4
   b7f62:	f7ff ffbf 	bl	b7ee4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7f66:	4b13      	ldr	r3, [pc, #76]	; (b7fb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b7f68:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b7f6a:	a801      	add	r0, sp, #4
   b7f6c:	f7fc f9d6 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7f70:	462c      	mov	r4, r5
}
   b7f72:	4620      	mov	r0, r4
   b7f74:	b005      	add	sp, #20
   b7f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b7f78:	490f      	ldr	r1, [pc, #60]	; (b7fb8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b7f7a:	4638      	mov	r0, r7
   b7f7c:	f001 fc91 	bl	b98a2 <strcmp>
   b7f80:	b990      	cbnz	r0, b7fa8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b7f82:	2c00      	cmp	r4, #0
   b7f84:	d0f5      	beq.n	b7f72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b7f86:	4629      	mov	r1, r5
   b7f88:	a801      	add	r0, sp, #4
   b7f8a:	f7ff fc9d 	bl	b78c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7f8e:	4908      	ldr	r1, [pc, #32]	; (b7fb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7f90:	2024      	movs	r0, #36	; 0x24
   b7f92:	f000 ffcd 	bl	b8f30 <_ZnwjRKSt9nothrow_t>
   b7f96:	4605      	mov	r5, r0
   b7f98:	2800      	cmp	r0, #0
   b7f9a:	d0e6      	beq.n	b7f6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b7f9c:	ab01      	add	r3, sp, #4
   b7f9e:	4632      	mov	r2, r6
   b7fa0:	4621      	mov	r1, r4
   b7fa2:	f7ff ff9f 	bl	b7ee4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7fa6:	e7e0      	b.n	b7f6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b7fa8:	2400      	movs	r4, #0
   b7faa:	e7e2      	b.n	b7f72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b7fac:	000b9e55 	.word	0x000b9e55
   b7fb0:	000ba018 	.word	0x000ba018
   b7fb4:	000b9ee8 	.word	0x000b9ee8
   b7fb8:	000b9e59 	.word	0x000b9e59

000b7fbc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b7fbc:	4b01      	ldr	r3, [pc, #4]	; (b7fc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7fbe:	4a02      	ldr	r2, [pc, #8]	; (b7fc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7fc0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7fc2:	4770      	bx	lr
   b7fc4:	2003e698 	.word	0x2003e698
   b7fc8:	000b9e6a 	.word	0x000b9e6a

000b7fcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7fd0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b7fd2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7fd6:	4604      	mov	r4, r0
   b7fd8:	460e      	mov	r6, r1
   b7fda:	4617      	mov	r7, r2
   b7fdc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b7fde:	f000 fda7 	bl	b8b30 <_Z16_fetch_usbserialv>
   b7fe2:	4581      	cmp	r9, r0
   b7fe4:	d04c      	beq.n	b8080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b7fe6:	792b      	ldrb	r3, [r5, #4]
   b7fe8:	0719      	lsls	r1, r3, #28
   b7fea:	d504      	bpl.n	b7ff6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b7fec:	696a      	ldr	r2, [r5, #20]
   b7fee:	4954      	ldr	r1, [pc, #336]	; (b8140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b7ff0:	4620      	mov	r0, r4
   b7ff2:	f7ff fa8d 	bl	b7510 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b7ff6:	f1b8 0f00 	cmp.w	r8, #0
   b7ffa:	d00d      	beq.n	b8018 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b7ffc:	215b      	movs	r1, #91	; 0x5b
   b7ffe:	4620      	mov	r0, r4
   b8000:	f7ff fa7a 	bl	b74f8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b8004:	4641      	mov	r1, r8
   b8006:	4620      	mov	r0, r4
   b8008:	f7ff fa67 	bl	b74da <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b800c:	6823      	ldr	r3, [r4, #0]
   b800e:	494d      	ldr	r1, [pc, #308]	; (b8144 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b8010:	68db      	ldr	r3, [r3, #12]
   b8012:	2202      	movs	r2, #2
   b8014:	4620      	mov	r0, r4
   b8016:	4798      	blx	r3
    if (attr.has_file) {
   b8018:	792b      	ldrb	r3, [r5, #4]
   b801a:	07da      	lsls	r2, r3, #31
   b801c:	d523      	bpl.n	b8066 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b801e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b8022:	212f      	movs	r1, #47	; 0x2f
   b8024:	4640      	mov	r0, r8
   b8026:	f001 fc88 	bl	b993a <strrchr>
    if (s1) {
   b802a:	b108      	cbz	r0, b8030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b802c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b8030:	4641      	mov	r1, r8
   b8032:	4620      	mov	r0, r4
   b8034:	f7ff fa51 	bl	b74da <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b8038:	792b      	ldrb	r3, [r5, #4]
   b803a:	079b      	lsls	r3, r3, #30
   b803c:	d508      	bpl.n	b8050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b803e:	213a      	movs	r1, #58	; 0x3a
   b8040:	4620      	mov	r0, r4
   b8042:	f7ff fa59 	bl	b74f8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b8046:	68ea      	ldr	r2, [r5, #12]
   b8048:	493f      	ldr	r1, [pc, #252]	; (b8148 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b804a:	4620      	mov	r0, r4
   b804c:	f7ff fa60 	bl	b7510 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b8050:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b8052:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b8054:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b8058:	68db      	ldr	r3, [r3, #12]
   b805a:	bf14      	ite	ne
   b805c:	493b      	ldrne	r1, [pc, #236]	; (b814c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b805e:	493c      	ldreq	r1, [pc, #240]	; (b8150 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b8060:	2202      	movs	r2, #2
            write(": ", 2);
   b8062:	4620      	mov	r0, r4
   b8064:	4798      	blx	r3
    if (attr.has_function) {
   b8066:	792b      	ldrb	r3, [r5, #4]
   b8068:	0758      	lsls	r0, r3, #29
   b806a:	d51d      	bpl.n	b80a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b806c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b806e:	460b      	mov	r3, r1
   b8070:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b8072:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8076:	b160      	cbz	r0, b8092 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b8078:	2820      	cmp	r0, #32
   b807a:	d108      	bne.n	b808e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b807c:	4619      	mov	r1, r3
   b807e:	e7f7      	b.n	b8070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b8080:	4834      	ldr	r0, [pc, #208]	; (b8154 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b8082:	f000 f966 	bl	b8352 <_ZN5spark12NetworkClass9listeningEv>
   b8086:	2800      	cmp	r0, #0
   b8088:	d0ad      	beq.n	b7fe6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b808e:	2828      	cmp	r0, #40	; 0x28
   b8090:	d1ee      	bne.n	b8070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b8092:	6823      	ldr	r3, [r4, #0]
   b8094:	1a52      	subs	r2, r2, r1
   b8096:	68db      	ldr	r3, [r3, #12]
   b8098:	4620      	mov	r0, r4
   b809a:	4798      	blx	r3
        write("(): ", 4);
   b809c:	6823      	ldr	r3, [r4, #0]
   b809e:	492e      	ldr	r1, [pc, #184]	; (b8158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b80a0:	68db      	ldr	r3, [r3, #12]
   b80a2:	2204      	movs	r2, #4
   b80a4:	4620      	mov	r0, r4
   b80a6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b80a8:	2100      	movs	r1, #0
   b80aa:	4638      	mov	r0, r7
   b80ac:	f7fe f928 	bl	b6300 <log_level_name>
   b80b0:	4601      	mov	r1, r0
    write(s);
   b80b2:	4620      	mov	r0, r4
   b80b4:	f7ff fa11 	bl	b74da <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b80b8:	6823      	ldr	r3, [r4, #0]
   b80ba:	4925      	ldr	r1, [pc, #148]	; (b8150 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b80bc:	68db      	ldr	r3, [r3, #12]
   b80be:	2202      	movs	r2, #2
   b80c0:	4620      	mov	r0, r4
   b80c2:	4798      	blx	r3
    if (msg) {
   b80c4:	b11e      	cbz	r6, b80ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b80c6:	4631      	mov	r1, r6
   b80c8:	4620      	mov	r0, r4
   b80ca:	f7ff fa06 	bl	b74da <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b80ce:	792b      	ldrb	r3, [r5, #4]
   b80d0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b80d4:	d02c      	beq.n	b8130 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b80d6:	6823      	ldr	r3, [r4, #0]
   b80d8:	4920      	ldr	r1, [pc, #128]	; (b815c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b80da:	68db      	ldr	r3, [r3, #12]
   b80dc:	2202      	movs	r2, #2
   b80de:	4620      	mov	r0, r4
   b80e0:	4798      	blx	r3
        if (attr.has_code) {
   b80e2:	792b      	ldrb	r3, [r5, #4]
   b80e4:	06d9      	lsls	r1, r3, #27
   b80e6:	d50a      	bpl.n	b80fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b80e8:	6823      	ldr	r3, [r4, #0]
   b80ea:	491d      	ldr	r1, [pc, #116]	; (b8160 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b80ec:	68db      	ldr	r3, [r3, #12]
   b80ee:	2207      	movs	r2, #7
   b80f0:	4620      	mov	r0, r4
   b80f2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b80f4:	69aa      	ldr	r2, [r5, #24]
   b80f6:	491b      	ldr	r1, [pc, #108]	; (b8164 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b80f8:	4620      	mov	r0, r4
   b80fa:	f7ff fa09 	bl	b7510 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b80fe:	792b      	ldrb	r3, [r5, #4]
   b8100:	069a      	lsls	r2, r3, #26
   b8102:	d511      	bpl.n	b8128 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b8104:	06db      	lsls	r3, r3, #27
   b8106:	d505      	bpl.n	b8114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b8108:	6823      	ldr	r3, [r4, #0]
   b810a:	4910      	ldr	r1, [pc, #64]	; (b814c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b810c:	68db      	ldr	r3, [r3, #12]
   b810e:	2202      	movs	r2, #2
   b8110:	4620      	mov	r0, r4
   b8112:	4798      	blx	r3
            write("details = ", 10);
   b8114:	6823      	ldr	r3, [r4, #0]
   b8116:	4914      	ldr	r1, [pc, #80]	; (b8168 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b8118:	68db      	ldr	r3, [r3, #12]
   b811a:	4620      	mov	r0, r4
   b811c:	220a      	movs	r2, #10
   b811e:	4798      	blx	r3
            write(attr.details);
   b8120:	69e9      	ldr	r1, [r5, #28]
   b8122:	4620      	mov	r0, r4
   b8124:	f7ff f9d9 	bl	b74da <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b8128:	215d      	movs	r1, #93	; 0x5d
   b812a:	4620      	mov	r0, r4
   b812c:	f7ff f9e4 	bl	b74f8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b8130:	6823      	ldr	r3, [r4, #0]
   b8132:	490e      	ldr	r1, [pc, #56]	; (b816c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b8134:	68db      	ldr	r3, [r3, #12]
   b8136:	4620      	mov	r0, r4
   b8138:	2202      	movs	r2, #2
}
   b813a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b813e:	4718      	bx	r3
   b8140:	000b9e6e 	.word	0x000b9e6e
   b8144:	000b9e75 	.word	0x000b9e75
   b8148:	000b9c60 	.word	0x000b9c60
   b814c:	000b9e78 	.word	0x000b9e78
   b8150:	000b9e7d 	.word	0x000b9e7d
   b8154:	2003e6c4 	.word	0x2003e6c4
   b8158:	000b9e7b 	.word	0x000b9e7b
   b815c:	000b9e80 	.word	0x000b9e80
   b8160:	000b9e83 	.word	0x000b9e83
   b8164:	000b9bd0 	.word	0x000b9bd0
   b8168:	000b9e8b 	.word	0x000b9e8b
   b816c:	000b9e96 	.word	0x000b9e96

000b8170 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b8170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8174:	b085      	sub	sp, #20
    return stream_;
   b8176:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b817a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b817c:	4605      	mov	r5, r0
   b817e:	460f      	mov	r7, r1
   b8180:	4690      	mov	r8, r2
   b8182:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b8184:	f000 fcd4 	bl	b8b30 <_Z16_fetch_usbserialv>
   b8188:	4581      	cmp	r9, r0
   b818a:	d105      	bne.n	b8198 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b818c:	4849      	ldr	r0, [pc, #292]	; (b82b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b818e:	f000 f8e0 	bl	b8352 <_ZN5spark12NetworkClass9listeningEv>
   b8192:	2800      	cmp	r0, #0
   b8194:	f040 808a 	bne.w	b82ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b8198:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b819a:	4a47      	ldr	r2, [pc, #284]	; (b82b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b819c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b819e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b81a2:	a801      	add	r0, sp, #4
        strm_(stream) {
   b81a4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b81a6:	f88d 9008 	strb.w	r9, [sp, #8]
   b81aa:	f7ff f878 	bl	b729e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b81ae:	4649      	mov	r1, r9
   b81b0:	4640      	mov	r0, r8
   b81b2:	f7fe f8a5 	bl	b6300 <log_level_name>
    json.name("l", 1).value(s);
   b81b6:	4941      	ldr	r1, [pc, #260]	; (b82bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b81b8:	4680      	mov	r8, r0
   b81ba:	2201      	movs	r2, #1
   b81bc:	a801      	add	r0, sp, #4
   b81be:	f7ff f8fd 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b81c2:	4641      	mov	r1, r8
   b81c4:	f7ff f97b 	bl	b74be <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b81c8:	b13f      	cbz	r7, b81da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b81ca:	493d      	ldr	r1, [pc, #244]	; (b82c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b81cc:	2201      	movs	r2, #1
   b81ce:	a801      	add	r0, sp, #4
   b81d0:	f7ff f8f4 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b81d4:	4639      	mov	r1, r7
   b81d6:	f7ff f972 	bl	b74be <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b81da:	b13e      	cbz	r6, b81ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b81dc:	4939      	ldr	r1, [pc, #228]	; (b82c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b81de:	2201      	movs	r2, #1
   b81e0:	a801      	add	r0, sp, #4
   b81e2:	f7ff f8eb 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b81e6:	4631      	mov	r1, r6
   b81e8:	f7ff f969 	bl	b74be <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b81ec:	7923      	ldrb	r3, [r4, #4]
   b81ee:	07df      	lsls	r7, r3, #31
   b81f0:	d50e      	bpl.n	b8210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b81f2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b81f4:	212f      	movs	r1, #47	; 0x2f
   b81f6:	4630      	mov	r0, r6
   b81f8:	f001 fb9f 	bl	b993a <strrchr>
    if (s1) {
   b81fc:	b100      	cbz	r0, b8200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b81fe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8200:	4931      	ldr	r1, [pc, #196]	; (b82c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8202:	2201      	movs	r2, #1
   b8204:	a801      	add	r0, sp, #4
   b8206:	f7ff f8d9 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b820a:	4631      	mov	r1, r6
   b820c:	f7ff f957 	bl	b74be <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8210:	7923      	ldrb	r3, [r4, #4]
   b8212:	079e      	lsls	r6, r3, #30
   b8214:	d507      	bpl.n	b8226 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8216:	492d      	ldr	r1, [pc, #180]	; (b82cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8218:	2202      	movs	r2, #2
   b821a:	a801      	add	r0, sp, #4
   b821c:	f7ff f8ce 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b8220:	68e1      	ldr	r1, [r4, #12]
   b8222:	f7ff f849 	bl	b72b8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8226:	7923      	ldrb	r3, [r4, #4]
   b8228:	0758      	lsls	r0, r3, #29
   b822a:	d514      	bpl.n	b8256 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b822c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b822e:	4633      	mov	r3, r6
   b8230:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8232:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8236:	b12a      	cbz	r2, b8244 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8238:	2a20      	cmp	r2, #32
   b823a:	d101      	bne.n	b8240 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b823c:	461e      	mov	r6, r3
   b823e:	e7f7      	b.n	b8230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b8240:	2a28      	cmp	r2, #40	; 0x28
   b8242:	d1f5      	bne.n	b8230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b8244:	4922      	ldr	r1, [pc, #136]	; (b82d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b8246:	2202      	movs	r2, #2
   b8248:	a801      	add	r0, sp, #4
   b824a:	f7ff f8b7 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b824e:	1bba      	subs	r2, r7, r6
   b8250:	4631      	mov	r1, r6
   b8252:	f7ff f8c3 	bl	b73dc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b8256:	7923      	ldrb	r3, [r4, #4]
   b8258:	0719      	lsls	r1, r3, #28
   b825a:	d507      	bpl.n	b826c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b825c:	491d      	ldr	r1, [pc, #116]	; (b82d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b825e:	2201      	movs	r2, #1
   b8260:	a801      	add	r0, sp, #4
   b8262:	f7ff f8ab 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b8266:	6961      	ldr	r1, [r4, #20]
   b8268:	f7ff f838 	bl	b72dc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b826c:	7923      	ldrb	r3, [r4, #4]
   b826e:	06da      	lsls	r2, r3, #27
   b8270:	d508      	bpl.n	b8284 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b8272:	2204      	movs	r2, #4
   b8274:	4918      	ldr	r1, [pc, #96]	; (b82d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b8276:	eb0d 0002 	add.w	r0, sp, r2
   b827a:	f7ff f89f 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b827e:	69a1      	ldr	r1, [r4, #24]
   b8280:	f7ff f81a 	bl	b72b8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b8284:	7923      	ldrb	r3, [r4, #4]
   b8286:	069b      	lsls	r3, r3, #26
   b8288:	d507      	bpl.n	b829a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b828a:	4914      	ldr	r1, [pc, #80]	; (b82dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b828c:	2206      	movs	r2, #6
   b828e:	a801      	add	r0, sp, #4
   b8290:	f7ff f894 	bl	b73bc <_ZN5spark10JSONWriter4nameEPKcj>
   b8294:	69e1      	ldr	r1, [r4, #28]
   b8296:	f7ff f912 	bl	b74be <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b829a:	a801      	add	r0, sp, #4
   b829c:	f7fe ffe9 	bl	b7272 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b82a0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b82a2:	490f      	ldr	r1, [pc, #60]	; (b82e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b82a4:	6803      	ldr	r3, [r0, #0]
   b82a6:	2202      	movs	r2, #2
   b82a8:	68db      	ldr	r3, [r3, #12]
   b82aa:	4798      	blx	r3
}
   b82ac:	b005      	add	sp, #20
   b82ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b82b2:	bf00      	nop
   b82b4:	2003e6c4 	.word	0x2003e6c4
   b82b8:	000b9eb8 	.word	0x000b9eb8
   b82bc:	000b9e4b 	.word	0x000b9e4b
   b82c0:	000b9e99 	.word	0x000b9e99
   b82c4:	000ba087 	.word	0x000ba087
   b82c8:	000b9be6 	.word	0x000b9be6
   b82cc:	000b9e9b 	.word	0x000b9e9b
   b82d0:	000b9e9e 	.word	0x000b9e9e
   b82d4:	000b9c3f 	.word	0x000b9c3f
   b82d8:	000b9ea1 	.word	0x000b9ea1
   b82dc:	000b9ea6 	.word	0x000b9ea6
   b82e0:	000b9e96 	.word	0x000b9e96

000b82e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b82e4:	2300      	movs	r3, #0
   b82e6:	6840      	ldr	r0, [r0, #4]
   b82e8:	461a      	mov	r2, r3
   b82ea:	f7fe b8a9 	b.w	b6440 <network_connect>

000b82ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b82ee:	6840      	ldr	r0, [r0, #4]
   b82f0:	2200      	movs	r2, #0
   b82f2:	2102      	movs	r1, #2
   b82f4:	f7fe b8b4 	b.w	b6460 <network_disconnect>

000b82f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b82f8:	2200      	movs	r2, #0
   b82fa:	6840      	ldr	r0, [r0, #4]
   b82fc:	4611      	mov	r1, r2
   b82fe:	f7fe b8a7 	b.w	b6450 <network_connecting>

000b8302 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8302:	2200      	movs	r2, #0
   b8304:	6840      	ldr	r0, [r0, #4]
   b8306:	4611      	mov	r1, r2
   b8308:	f7fe b8b2 	b.w	b6470 <network_ready>

000b830c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b830c:	2300      	movs	r3, #0
   b830e:	6840      	ldr	r0, [r0, #4]
   b8310:	461a      	mov	r2, r3
   b8312:	4619      	mov	r1, r3
   b8314:	f7fe b8b4 	b.w	b6480 <network_on>

000b8318 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8318:	2300      	movs	r3, #0
   b831a:	6840      	ldr	r0, [r0, #4]
   b831c:	461a      	mov	r2, r3
   b831e:	4619      	mov	r1, r3
   b8320:	f7fe b8b6 	b.w	b6490 <network_off>

000b8324 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8324:	6840      	ldr	r0, [r0, #4]
   b8326:	2100      	movs	r1, #0
   b8328:	f7fe b8da 	b.w	b64e0 <network_is_on>

000b832c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b832c:	6840      	ldr	r0, [r0, #4]
   b832e:	2100      	movs	r1, #0
   b8330:	f7fe b8de 	b.w	b64f0 <network_is_off>

000b8334 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8334:	6840      	ldr	r0, [r0, #4]
   b8336:	2200      	movs	r2, #0
   b8338:	f081 0101 	eor.w	r1, r1, #1
   b833c:	f7fe b8b0 	b.w	b64a0 <network_listen>

000b8340 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8340:	6840      	ldr	r0, [r0, #4]
   b8342:	2200      	movs	r2, #0
   b8344:	f7fe b8bc 	b.w	b64c0 <network_set_listen_timeout>

000b8348 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8348:	2200      	movs	r2, #0
   b834a:	6840      	ldr	r0, [r0, #4]
   b834c:	4611      	mov	r1, r2
   b834e:	f7fe b8bf 	b.w	b64d0 <network_get_listen_timeout>

000b8352 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8352:	2200      	movs	r2, #0
   b8354:	6840      	ldr	r0, [r0, #4]
   b8356:	4611      	mov	r1, r2
   b8358:	f7fe b8aa 	b.w	b64b0 <network_listening>

000b835c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b835c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8360:	b095      	sub	sp, #84	; 0x54
   b8362:	4614      	mov	r4, r2
   b8364:	460d      	mov	r5, r1
   b8366:	4607      	mov	r7, r0
    IPAddress addr;
   b8368:	f7fe fe32 	bl	b6fd0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b836c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b836e:	221c      	movs	r2, #28
   b8370:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8372:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8374:	f001 fa48 	bl	b9808 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8378:	2340      	movs	r3, #64	; 0x40
   b837a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b837c:	4620      	mov	r0, r4
   b837e:	466b      	mov	r3, sp
   b8380:	aa0c      	add	r2, sp, #48	; 0x30
   b8382:	2100      	movs	r1, #0
   b8384:	f7fd febc 	bl	b6100 <netdb_getaddrinfo>
    if (!r) {
   b8388:	4604      	mov	r4, r0
   b838a:	2800      	cmp	r0, #0
   b838c:	d14b      	bne.n	b8426 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b838e:	4602      	mov	r2, r0
   b8390:	2101      	movs	r1, #1
   b8392:	6868      	ldr	r0, [r5, #4]
   b8394:	f7fe f86c 	bl	b6470 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8398:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b839a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b839c:	4622      	mov	r2, r4
   b839e:	6868      	ldr	r0, [r5, #4]
   b83a0:	f7fe f866 	bl	b6470 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b83a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b83a6:	4681      	mov	r9, r0
        bool ok = false;
   b83a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b83aa:	2e00      	cmp	r6, #0
   b83ac:	d03b      	beq.n	b8426 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b83ae:	2900      	cmp	r1, #0
   b83b0:	d139      	bne.n	b8426 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b83b2:	6873      	ldr	r3, [r6, #4]
   b83b4:	2b02      	cmp	r3, #2
   b83b6:	d003      	beq.n	b83c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b83b8:	2b0a      	cmp	r3, #10
   b83ba:	d011      	beq.n	b83e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b83bc:	69f6      	ldr	r6, [r6, #28]
   b83be:	e7f4      	b.n	b83aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b83c0:	f1b8 0f00 	cmp.w	r8, #0
   b83c4:	d0fa      	beq.n	b83bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b83c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b83c8:	a806      	add	r0, sp, #24
   b83ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b83cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b83ce:	f7fe fe2d 	bl	b702c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b83d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b83d4:	1d3c      	adds	r4, r7, #4
   b83d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b83d8:	682b      	ldr	r3, [r5, #0]
   b83da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b83dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b83de:	e7ed      	b.n	b83bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b83e0:	f1b9 0f00 	cmp.w	r9, #0
   b83e4:	d0ea      	beq.n	b83bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b83e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b83e8:	2210      	movs	r2, #16
   b83ea:	a801      	add	r0, sp, #4
   b83ec:	f001 fa0c 	bl	b9808 <memset>
                    a.v = 6;
   b83f0:	2306      	movs	r3, #6
   b83f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b83f6:	ad01      	add	r5, sp, #4
   b83f8:	f104 0308 	add.w	r3, r4, #8
   b83fc:	3418      	adds	r4, #24
   b83fe:	6818      	ldr	r0, [r3, #0]
   b8400:	6859      	ldr	r1, [r3, #4]
   b8402:	462a      	mov	r2, r5
   b8404:	c203      	stmia	r2!, {r0, r1}
   b8406:	3308      	adds	r3, #8
   b8408:	42a3      	cmp	r3, r4
   b840a:	4615      	mov	r5, r2
   b840c:	d1f7      	bne.n	b83fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b840e:	a901      	add	r1, sp, #4
   b8410:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8412:	ad07      	add	r5, sp, #28
   b8414:	f7fe fdea 	bl	b6fec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b841a:	1d3c      	adds	r4, r7, #4
   b841c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b841e:	682b      	ldr	r3, [r5, #0]
   b8420:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8422:	4649      	mov	r1, r9
   b8424:	e7ca      	b.n	b83bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8426:	9800      	ldr	r0, [sp, #0]
   b8428:	f7fd fe62 	bl	b60f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b842c:	4638      	mov	r0, r7
   b842e:	b015      	add	sp, #84	; 0x54
   b8430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8434 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8434:	4b02      	ldr	r3, [pc, #8]	; (b8440 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8436:	4a03      	ldr	r2, [pc, #12]	; (b8444 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8438:	601a      	str	r2, [r3, #0]
   b843a:	2200      	movs	r2, #0
   b843c:	605a      	str	r2, [r3, #4]

} // spark
   b843e:	4770      	bx	lr
   b8440:	2003e6c4 	.word	0x2003e6c4
   b8444:	000b9f30 	.word	0x000b9f30

000b8448 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b844a:	4606      	mov	r6, r0
   b844c:	460d      	mov	r5, r1
  size_t n = 0;
   b844e:	188f      	adds	r7, r1, r2
   b8450:	2400      	movs	r4, #0
  while (size--) {
   b8452:	42bd      	cmp	r5, r7
   b8454:	d00c      	beq.n	b8470 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8456:	6833      	ldr	r3, [r6, #0]
   b8458:	f815 1b01 	ldrb.w	r1, [r5], #1
   b845c:	689b      	ldr	r3, [r3, #8]
   b845e:	4630      	mov	r0, r6
   b8460:	4798      	blx	r3
     if (chunk>=0)
   b8462:	1e03      	subs	r3, r0, #0
   b8464:	db01      	blt.n	b846a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8466:	441c      	add	r4, r3
  while (size--) {
   b8468:	e7f3      	b.n	b8452 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b846a:	2c00      	cmp	r4, #0
   b846c:	bf08      	it	eq
   b846e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8470:	4620      	mov	r0, r4
   b8472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8474 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8474:	b508      	push	{r3, lr}
  return write(str);
   b8476:	f7fd f8d3 	bl	b5620 <_ZN5Print5writeEPKc>
}
   b847a:	bd08      	pop	{r3, pc}

000b847c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b847c:	6803      	ldr	r3, [r0, #0]
   b847e:	689b      	ldr	r3, [r3, #8]
   b8480:	4718      	bx	r3

000b8482 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8482:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8484:	210d      	movs	r1, #13
{
   b8486:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8488:	f7ff fff8 	bl	b847c <_ZN5Print5printEc>
  n += print('\n');
   b848c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b848e:	4604      	mov	r4, r0
  n += print('\n');
   b8490:	4628      	mov	r0, r5
   b8492:	f7ff fff3 	bl	b847c <_ZN5Print5printEc>
  return n;
}
   b8496:	4420      	add	r0, r4
   b8498:	bd38      	pop	{r3, r4, r5, pc}

000b849a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b849a:	b530      	push	{r4, r5, lr}
   b849c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b849e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b84a0:	2a01      	cmp	r2, #1
  *str = '\0';
   b84a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b84a6:	bf98      	it	ls
   b84a8:	220a      	movls	r2, #10
   b84aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b84ac:	460d      	mov	r5, r1
   b84ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b84b2:	fb01 5312 	mls	r3, r1, r2, r5
   b84b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b84ba:	2b09      	cmp	r3, #9
   b84bc:	bf94      	ite	ls
   b84be:	3330      	addls	r3, #48	; 0x30
   b84c0:	3337      	addhi	r3, #55	; 0x37
   b84c2:	b2db      	uxtb	r3, r3
  } while(n);
   b84c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b84c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b84ca:	d9ef      	bls.n	b84ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b84cc:	4621      	mov	r1, r4
   b84ce:	f7fd f8a7 	bl	b5620 <_ZN5Print5writeEPKc>
}
   b84d2:	b00b      	add	sp, #44	; 0x2c
   b84d4:	bd30      	pop	{r4, r5, pc}

000b84d6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b84d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b84da:	b086      	sub	sp, #24
   b84dc:	af00      	add	r7, sp, #0
   b84de:	4605      	mov	r5, r0
   b84e0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b84e2:	1d38      	adds	r0, r7, #4
   b84e4:	2114      	movs	r1, #20
{
   b84e6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b84e8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b84ea:	f7fe f829 	bl	b6540 <vsnprintf>

    if (n<bufsize)
   b84ee:	2813      	cmp	r0, #19
   b84f0:	d80e      	bhi.n	b8510 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b84f2:	1d39      	adds	r1, r7, #4
   b84f4:	4628      	mov	r0, r5
   b84f6:	f7fd f893 	bl	b5620 <_ZN5Print5writeEPKc>
   b84fa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b84fc:	b11e      	cbz	r6, b8506 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b84fe:	4628      	mov	r0, r5
   b8500:	f7ff ffbf 	bl	b8482 <_ZN5Print7printlnEv>
   b8504:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8506:	4620      	mov	r0, r4
   b8508:	3718      	adds	r7, #24
   b850a:	46bd      	mov	sp, r7
   b850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8510:	f100 0308 	add.w	r3, r0, #8
   b8514:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8518:	46e8      	mov	r8, sp
        char bigger[n+1];
   b851a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b851e:	4622      	mov	r2, r4
   b8520:	1c41      	adds	r1, r0, #1
   b8522:	683b      	ldr	r3, [r7, #0]
   b8524:	4668      	mov	r0, sp
   b8526:	f7fe f80b 	bl	b6540 <vsnprintf>
  return write(str);
   b852a:	4669      	mov	r1, sp
   b852c:	4628      	mov	r0, r5
   b852e:	f7fd f877 	bl	b5620 <_ZN5Print5writeEPKc>
   b8532:	4604      	mov	r4, r0
   b8534:	46c5      	mov	sp, r8
   b8536:	e7e1      	b.n	b84fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8538 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8538:	4b01      	ldr	r3, [pc, #4]	; (b8540 <_GLOBAL__sub_I_RGB+0x8>)
   b853a:	2200      	movs	r2, #0
   b853c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b853e:	4770      	bx	lr
   b8540:	2003e6cc 	.word	0x2003e6cc

000b8544 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8544:	2100      	movs	r1, #0
   b8546:	f7fd be2b 	b.w	b61a0 <hal_spi_release>

000b854a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b854a:	2100      	movs	r1, #0
   b854c:	f7fd be20 	b.w	b6190 <hal_spi_acquire>

000b8550 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8550:	b510      	push	{r4, lr}
   b8552:	4604      	mov	r4, r0
   b8554:	4608      	mov	r0, r1
{
    _spi = spi;
   b8556:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8558:	f7fd fdea 	bl	b6130 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b855c:	2300      	movs	r3, #0
   b855e:	6063      	str	r3, [r4, #4]
}
   b8560:	4620      	mov	r0, r4
   b8562:	bd10      	pop	{r4, pc}

000b8564 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8564:	b513      	push	{r0, r1, r4, lr}
   b8566:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8568:	7800      	ldrb	r0, [r0, #0]
   b856a:	f7ff ffee 	bl	b854a <_ZN8SPIClass4lockEv.isra.0>
   b856e:	b958      	cbnz	r0, b8588 <_ZN8SPIClass5beginEv+0x24>
   b8570:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8572:	9001      	str	r0, [sp, #4]
   b8574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8578:	f7fd fdca 	bl	b6110 <hal_spi_begin>
        unlock();
   b857c:	9801      	ldr	r0, [sp, #4]
    }
}
   b857e:	b002      	add	sp, #8
   b8580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8584:	f7ff bfde 	b.w	b8544 <_ZN8SPIClass6unlockEv.isra.0>
   b8588:	b002      	add	sp, #8
   b858a:	bd10      	pop	{r4, pc}

000b858c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b858c:	7800      	ldrb	r0, [r0, #0]
   b858e:	f7ff bfd9 	b.w	b8544 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b8594 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8594:	0840      	lsrs	r0, r0, #1
{
   b8596:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8598:	6018      	str	r0, [r3, #0]
   b859a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b859c:	6818      	ldr	r0, [r3, #0]
   b859e:	4288      	cmp	r0, r1
   b85a0:	b2e5      	uxtb	r5, r4
   b85a2:	d906      	bls.n	b85b2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b85a4:	3401      	adds	r4, #1
   b85a6:	2c08      	cmp	r4, #8
   b85a8:	d002      	beq.n	b85b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b85aa:	0840      	lsrs	r0, r0, #1
   b85ac:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b85ae:	e7f5      	b.n	b859c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b85b0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b85b2:	4b02      	ldr	r3, [pc, #8]	; (b85bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b85b4:	5d5b      	ldrb	r3, [r3, r5]
   b85b6:	7013      	strb	r3, [r2, #0]
}
   b85b8:	bd30      	pop	{r4, r5, pc}
   b85ba:	bf00      	nop
   b85bc:	000b9f64 	.word	0x000b9f64

000b85c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b85c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b85c4:	4606      	mov	r6, r0
   b85c6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b85c8:	7800      	ldrb	r0, [r0, #0]
{
   b85ca:	460c      	mov	r4, r1
    CHECK(lock());
   b85cc:	f7ff ffbd 	bl	b854a <_ZN8SPIClass4lockEv.isra.0>
   b85d0:	2800      	cmp	r0, #0
   b85d2:	db1b      	blt.n	b860c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b85d4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b85d6:	2214      	movs	r2, #20
   b85d8:	2100      	movs	r1, #0
   b85da:	a809      	add	r0, sp, #36	; 0x24
   b85dc:	f001 f914 	bl	b9808 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b85e0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b85e2:	2200      	movs	r2, #0
   b85e4:	a909      	add	r1, sp, #36	; 0x24
   b85e6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b85e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b85ec:	f7fd fdb0 	bl	b6150 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b85f0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b85f4:	b113      	cbz	r3, b85fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b85f6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b85fa:	b155      	cbz	r5, b8612 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b85fc:	2700      	movs	r7, #0
   b85fe:	46b9      	mov	r9, r7
   b8600:	46b8      	mov	r8, r7
   b8602:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8604:	7923      	ldrb	r3, [r4, #4]
   b8606:	b15d      	cbz	r5, b8620 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8608:	b1c3      	cbz	r3, b863c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b860a:	2000      	movs	r0, #0
}
   b860c:	b00f      	add	sp, #60	; 0x3c
   b860e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8612:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8616:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b861a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b861e:	e7f1      	b.n	b8604 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8620:	2b00      	cmp	r3, #0
   b8622:	d135      	bne.n	b8690 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8624:	68a3      	ldr	r3, [r4, #8]
   b8626:	4543      	cmp	r3, r8
   b8628:	d108      	bne.n	b863c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b862a:	f88d 9020 	strb.w	r9, [sp, #32]
   b862e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8632:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8636:	89a3      	ldrh	r3, [r4, #12]
   b8638:	429a      	cmp	r2, r3
   b863a:	d0e6      	beq.n	b860a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b863c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b863e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8640:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8644:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8646:	ab04      	add	r3, sp, #16
   b8648:	f10d 020f 	add.w	r2, sp, #15
   b864c:	f7ff ffa2 	bl	b8594 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8650:	7921      	ldrb	r1, [r4, #4]
   b8652:	b985      	cbnz	r5, b8676 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8654:	b989      	cbnz	r1, b867a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8656:	68a3      	ldr	r3, [r4, #8]
   b8658:	4543      	cmp	r3, r8
   b865a:	d30e      	bcc.n	b867a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b865c:	f88d 9020 	strb.w	r9, [sp, #32]
   b8660:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8664:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8668:	89a3      	ldrh	r3, [r4, #12]
   b866a:	429a      	cmp	r2, r3
   b866c:	d105      	bne.n	b867a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b866e:	9b04      	ldr	r3, [sp, #16]
   b8670:	4543      	cmp	r3, r8
   b8672:	d102      	bne.n	b867a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8674:	e7c9      	b.n	b860a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8676:	2900      	cmp	r1, #0
   b8678:	d1f9      	bne.n	b866e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b867a:	2300      	movs	r3, #0
   b867c:	9301      	str	r3, [sp, #4]
   b867e:	7b63      	ldrb	r3, [r4, #13]
   b8680:	9300      	str	r3, [sp, #0]
   b8682:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8686:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8688:	7830      	ldrb	r0, [r6, #0]
   b868a:	f7fd fd79 	bl	b6180 <hal_spi_set_settings>
   b868e:	e7bc      	b.n	b860a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8690:	e9cd 5500 	strd	r5, r5, [sp]
   b8694:	462b      	mov	r3, r5
   b8696:	462a      	mov	r2, r5
   b8698:	2101      	movs	r1, #1
   b869a:	e7f5      	b.n	b8688 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b869c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b869c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b869e:	7800      	ldrb	r0, [r0, #0]
   b86a0:	f7fd fd3e 	bl	b6120 <hal_spi_transfer>
}
   b86a4:	b2c0      	uxtb	r0, r0
   b86a6:	bd08      	pop	{r3, pc}

000b86a8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b86a8:	b530      	push	{r4, r5, lr}
   b86aa:	b087      	sub	sp, #28
   b86ac:	4604      	mov	r4, r0
   b86ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b86b0:	9500      	str	r5, [sp, #0]
   b86b2:	7800      	ldrb	r0, [r0, #0]
   b86b4:	f7fd fd54 	bl	b6160 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b86b8:	b93d      	cbnz	r5, b86ca <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b86ba:	7820      	ldrb	r0, [r4, #0]
   b86bc:	a902      	add	r1, sp, #8
   b86be:	f7fd fd57 	bl	b6170 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b86c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b86c6:	07db      	lsls	r3, r3, #31
   b86c8:	d4f7      	bmi.n	b86ba <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b86ca:	b007      	add	sp, #28
   b86cc:	bd30      	pop	{r4, r5, pc}

000b86ce <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b86ce:	b510      	push	{r4, lr}
   b86d0:	4604      	mov	r4, r0
{
    free(buffer);
   b86d2:	6800      	ldr	r0, [r0, #0]
   b86d4:	f7fd ff1c 	bl	b6510 <free>
}
   b86d8:	4620      	mov	r0, r4
   b86da:	bd10      	pop	{r4, pc}

000b86dc <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b86dc:	b510      	push	{r4, lr}
   b86de:	4604      	mov	r4, r0
    if (buffer) {
   b86e0:	6800      	ldr	r0, [r0, #0]
   b86e2:	b108      	cbz	r0, b86e8 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b86e4:	f7fd ff14 	bl	b6510 <free>
    }
    buffer = nullptr;
   b86e8:	2300      	movs	r3, #0
    capacity = len = 0;
   b86ea:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b86ee:	6023      	str	r3, [r4, #0]
}
   b86f0:	bd10      	pop	{r4, pc}

000b86f2 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b86f2:	b538      	push	{r3, r4, r5, lr}
   b86f4:	4604      	mov	r4, r0
   b86f6:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b86f8:	6800      	ldr	r0, [r0, #0]
   b86fa:	3101      	adds	r1, #1
   b86fc:	f7fd ff10 	bl	b6520 <realloc>
    if (newbuffer) {
   b8700:	b110      	cbz	r0, b8708 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity = maxStrLen;
   b8702:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b8706:	2001      	movs	r0, #1
    }
    return 0;
}
   b8708:	bd38      	pop	{r3, r4, r5, pc}

000b870a <_ZN6String7reserveEj>:
{
   b870a:	b510      	push	{r4, lr}
    if (buffer && capacity >= size) {
   b870c:	6803      	ldr	r3, [r0, #0]
{
   b870e:	4604      	mov	r4, r0
    if (buffer && capacity >= size) {
   b8710:	b123      	cbz	r3, b871c <_ZN6String7reserveEj+0x12>
   b8712:	6843      	ldr	r3, [r0, #4]
   b8714:	428b      	cmp	r3, r1
   b8716:	d301      	bcc.n	b871c <_ZN6String7reserveEj+0x12>
   b8718:	2001      	movs	r0, #1
}
   b871a:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b871c:	4620      	mov	r0, r4
   b871e:	f7ff ffe8 	bl	b86f2 <_ZN6String12changeBufferEj>
   b8722:	2800      	cmp	r0, #0
   b8724:	d0f9      	beq.n	b871a <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b8726:	68a3      	ldr	r3, [r4, #8]
   b8728:	2b00      	cmp	r3, #0
   b872a:	d1f5      	bne.n	b8718 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b872c:	6822      	ldr	r2, [r4, #0]
   b872e:	7013      	strb	r3, [r2, #0]
   b8730:	e7f2      	b.n	b8718 <_ZN6String7reserveEj+0xe>

000b8732 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8732:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8734:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b8736:	4611      	mov	r1, r2
   b8738:	9201      	str	r2, [sp, #4]
{
   b873a:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b873c:	f7ff ffe5 	bl	b870a <_ZN6String7reserveEj>
   b8740:	9a01      	ldr	r2, [sp, #4]
   b8742:	b928      	cbnz	r0, b8750 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b8744:	4620      	mov	r0, r4
   b8746:	f7ff ffc9 	bl	b86dc <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b874a:	4620      	mov	r0, r4
   b874c:	b003      	add	sp, #12
   b874e:	bd30      	pop	{r4, r5, pc}
    len = length;
   b8750:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b8752:	4629      	mov	r1, r5
   b8754:	6820      	ldr	r0, [r4, #0]
   b8756:	f001 f82f 	bl	b97b8 <memcpy>
    buffer[len] = 0;
   b875a:	6822      	ldr	r2, [r4, #0]
   b875c:	68a3      	ldr	r3, [r4, #8]
   b875e:	2100      	movs	r1, #0
   b8760:	54d1      	strb	r1, [r2, r3]
    return *this;
   b8762:	e7f2      	b.n	b874a <_ZN6String4copyEPKcj+0x18>

000b8764 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8764:	b538      	push	{r3, r4, r5, lr}
   b8766:	4605      	mov	r5, r0
    if (buffer) {
   b8768:	6800      	ldr	r0, [r0, #0]
{
   b876a:	460c      	mov	r4, r1
    if (buffer) {
   b876c:	b170      	cbz	r0, b878c <_ZN6String4moveERS_+0x28>
        if (capacity >= rhs.len && rhs.buffer) {
   b876e:	686a      	ldr	r2, [r5, #4]
   b8770:	688b      	ldr	r3, [r1, #8]
   b8772:	429a      	cmp	r2, r3
   b8774:	d308      	bcc.n	b8788 <_ZN6String4moveERS_+0x24>
   b8776:	6809      	ldr	r1, [r1, #0]
   b8778:	b131      	cbz	r1, b8788 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b877a:	f001 f89c 	bl	b98b6 <strcpy>
            len = rhs.len;
   b877e:	68a3      	ldr	r3, [r4, #8]
   b8780:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b8782:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity = rhs.capacity;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity = 0;
    rhs.len = 0;
   b8784:	60a3      	str	r3, [r4, #8]
}
   b8786:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b8788:	f7fd fec2 	bl	b6510 <free>
    buffer = rhs.buffer;
   b878c:	6823      	ldr	r3, [r4, #0]
   b878e:	602b      	str	r3, [r5, #0]
    capacity = rhs.capacity;
   b8790:	6863      	ldr	r3, [r4, #4]
   b8792:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b8794:	68a3      	ldr	r3, [r4, #8]
   b8796:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b8798:	2300      	movs	r3, #0
    rhs.capacity = 0;
   b879a:	e9c4 3300 	strd	r3, r3, [r4]
   b879e:	e7f1      	b.n	b8784 <_ZN6String4moveERS_+0x20>

000b87a0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b87a0:	b510      	push	{r4, lr}
    buffer = nullptr;
   b87a2:	2300      	movs	r3, #0
    capacity = 0;
   b87a4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b87a8:	4604      	mov	r4, r0
    len = 0;
   b87aa:	6083      	str	r3, [r0, #8]
    flags = 0;
   b87ac:	7303      	strb	r3, [r0, #12]
    move(rval);
   b87ae:	f7ff ffd9 	bl	b8764 <_ZN6String4moveERS_>
}
   b87b2:	4620      	mov	r0, r4
   b87b4:	bd10      	pop	{r4, pc}

000b87b6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b87b6:	4288      	cmp	r0, r1
{
   b87b8:	b510      	push	{r4, lr}
   b87ba:	4604      	mov	r4, r0
    if (this == &rhs) {
   b87bc:	d005      	beq.n	b87ca <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b87be:	680b      	ldr	r3, [r1, #0]
   b87c0:	b12b      	cbz	r3, b87ce <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b87c2:	688a      	ldr	r2, [r1, #8]
   b87c4:	4619      	mov	r1, r3
   b87c6:	f7ff ffb4 	bl	b8732 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b87ca:	4620      	mov	r0, r4
   b87cc:	bd10      	pop	{r4, pc}
        invalidate();
   b87ce:	f7ff ff85 	bl	b86dc <_ZN6String10invalidateEv>
   b87d2:	e7fa      	b.n	b87ca <_ZN6StringaSERKS_+0x14>

000b87d4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b87d4:	b510      	push	{r4, lr}
    buffer = nullptr;
   b87d6:	2300      	movs	r3, #0
String::String(const String &value)
   b87d8:	4604      	mov	r4, r0
    capacity = 0;
   b87da:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b87de:	6083      	str	r3, [r0, #8]
    flags = 0;
   b87e0:	7303      	strb	r3, [r0, #12]
    *this = value;
   b87e2:	f7ff ffe8 	bl	b87b6 <_ZN6StringaSERKS_>
}
   b87e6:	4620      	mov	r0, r4
   b87e8:	bd10      	pop	{r4, pc}

000b87ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b87ea:	b510      	push	{r4, lr}
   b87ec:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b87ee:	6800      	ldr	r0, [r0, #0]
   b87f0:	b118      	cbz	r0, b87fa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b87f2:	f7fd fe8d 	bl	b6510 <free>
            wakeupSource_ = nullptr;
   b87f6:	2300      	movs	r3, #0
   b87f8:	6023      	str	r3, [r4, #0]
        }
    }
   b87fa:	bd10      	pop	{r4, pc}

000b87fc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b87fc:	b538      	push	{r3, r4, r5, lr}
   b87fe:	460c      	mov	r4, r1
   b8800:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8802:	f7ff fff2 	bl	b87ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b8806:	b154      	cbz	r4, b881e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b8808:	8820      	ldrh	r0, [r4, #0]
   b880a:	f7fd fe79 	bl	b6500 <malloc>
   b880e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b8810:	b128      	cbz	r0, b881e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b8812:	8822      	ldrh	r2, [r4, #0]
   b8814:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b8816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b881a:	f000 bfcd 	b.w	b97b8 <memcpy>
    }
   b881e:	bd38      	pop	{r3, r4, r5, pc}

000b8820 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8820:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b8822:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b8826:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b8828:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b882c:	f8c0 3006 	str.w	r3, [r0, #6]
   b8830:	894b      	ldrh	r3, [r1, #10]
   b8832:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b8834:	460c      	mov	r4, r1
   b8836:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b8838:	f7ff ffd7 	bl	b87ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b883c:	6823      	ldr	r3, [r4, #0]
   b883e:	b113      	cbz	r3, b8846 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b8840:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b8842:	2300      	movs	r3, #0
   b8844:	6023      	str	r3, [r4, #0]
    }
   b8846:	bd38      	pop	{r3, r4, r5, pc}

000b8848 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b8848:	b5f0      	push	{r4, r5, r6, r7, lr}
   b884a:	4d2b      	ldr	r5, [pc, #172]	; (b88f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b884c:	7d0b      	ldrb	r3, [r1, #20]
   b884e:	4604      	mov	r4, r0
   b8850:	b08b      	sub	sp, #44	; 0x2c
   b8852:	4608      	mov	r0, r1
   b8854:	1daf      	adds	r7, r5, #6
   b8856:	2b00      	cmp	r3, #0
   b8858:	d036      	beq.n	b88c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b885a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b885c:	791b      	ldrb	r3, [r3, #4]
   b885e:	2b00      	cmp	r3, #0
   b8860:	d032      	beq.n	b88c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b8862:	4b26      	ldr	r3, [pc, #152]	; (b88fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b8864:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b8866:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b8868:	a902      	add	r1, sp, #8
   b886a:	3004      	adds	r0, #4
   b886c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b8870:	f7fd fda2 	bl	b63b8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b8874:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b8878:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b887c:	b200      	sxth	r0, r0
   b887e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b8882:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b8886:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b8888:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b888a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b888c:	4628      	mov	r0, r5
   b888e:	f7ff ffb5 	bl	b87fc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b8892:	a802      	add	r0, sp, #8
   b8894:	f7ff ffa9 	bl	b87ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b8898:	2300      	movs	r3, #0
   b889a:	6023      	str	r3, [r4, #0]
   b889c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b889e:	71a3      	strb	r3, [r4, #6]
   b88a0:	8123      	strh	r3, [r4, #8]
   b88a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b88a6:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b88a8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b88ac:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b88ae:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b88b2:	f8c4 3006 	str.w	r3, [r4, #6]
   b88b6:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b88b8:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b88ba:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b88bc:	4620      	mov	r0, r4
   b88be:	f7ff ff9d 	bl	b87fc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b88c2:	4620      	mov	r0, r4
   b88c4:	b00b      	add	sp, #44	; 0x2c
   b88c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b88c8:	2600      	movs	r6, #0
   b88ca:	2320      	movs	r3, #32
   b88cc:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b88d0:	4b0b      	ldr	r3, [pc, #44]	; (b8900 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b88d2:	9300      	str	r3, [sp, #0]
   b88d4:	aa02      	add	r2, sp, #8
   b88d6:	4633      	mov	r3, r6
   b88d8:	490a      	ldr	r1, [pc, #40]	; (b8904 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b88da:	2032      	movs	r0, #50	; 0x32
   b88dc:	f7fd fd00 	bl	b62e0 <log_message>
            : wakeupSource_(nullptr),
   b88e0:	4b06      	ldr	r3, [pc, #24]	; (b88fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b88e2:	4805      	ldr	r0, [pc, #20]	; (b88f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b88e4:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b88e6:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b88ea:	a902      	add	r1, sp, #8
   b88ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b88f0:	f7ff ff96 	bl	b8820 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b88f4:	e7cd      	b.n	b8892 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b88f6:	bf00      	nop
   b88f8:	2003e6dc 	.word	0x2003e6dc
   b88fc:	ffff0000 	.word	0xffff0000
   b8900:	000b9f73 	.word	0x000b9f73
   b8904:	000b9f6c 	.word	0x000b9f6c

000b8908 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8908:	4b05      	ldr	r3, [pc, #20]	; (b8920 <_GLOBAL__sub_I_System+0x18>)
   b890a:	2202      	movs	r2, #2
   b890c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b890e:	4b05      	ldr	r3, [pc, #20]	; (b8924 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8910:	4a05      	ldr	r2, [pc, #20]	; (b8928 <_GLOBAL__sub_I_System+0x20>)
   b8912:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8914:	2000      	movs	r0, #0
   b8916:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b891a:	f7fd bd09 	b.w	b6330 <set_system_mode>
   b891e:	bf00      	nop
   b8920:	2003e6e8 	.word	0x2003e6e8
   b8924:	2003e6dc 	.word	0x2003e6dc
   b8928:	ffff0000 	.word	0xffff0000

000b892c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b892c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b892e:	2000      	movs	r0, #0
   b8930:	f7fd fd76 	bl	b6420 <spark_sync_time_pending>
   b8934:	b128      	cbz	r0, b8942 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8936:	f7fd fd63 	bl	b6400 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b893a:	f080 0001 	eor.w	r0, r0, #1
   b893e:	b2c0      	uxtb	r0, r0
    }
   b8940:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8942:	2001      	movs	r0, #1
   b8944:	e7fc      	b.n	b8940 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b8946 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8946:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8948:	2000      	movs	r0, #0
   b894a:	f7fd fb31 	bl	b5fb0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b894e:	4604      	mov	r4, r0
   b8950:	b9a0      	cbnz	r0, b897c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8952:	f7fd fce5 	bl	b6320 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8956:	2801      	cmp	r0, #1
   b8958:	d110      	bne.n	b897c <_ZN9TimeClass7isValidEv+0x36>
   b895a:	4620      	mov	r0, r4
   b895c:	f7fd fd10 	bl	b6380 <system_thread_get_state>
   b8960:	b960      	cbnz	r0, b897c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8962:	f7ff ffe3 	bl	b892c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8966:	b910      	cbnz	r0, b896e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8968:	f7fd fd3a 	bl	b63e0 <spark_process>
        while (_while() && !_condition()) {
   b896c:	e7f9      	b.n	b8962 <_ZN9TimeClass7isValidEv+0x1c>
   b896e:	f7ff ffdd 	bl	b892c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8976:	2000      	movs	r0, #0
   b8978:	f7fd bb1a 	b.w	b5fb0 <hal_rtc_time_is_valid>
}
   b897c:	4620      	mov	r0, r4
   b897e:	bd10      	pop	{r4, pc}

000b8980 <_ZN9TimeClass3nowEv>:
{
   b8980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8982:	f7ff ffe0 	bl	b8946 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8986:	2210      	movs	r2, #16
   b8988:	2100      	movs	r1, #0
   b898a:	4668      	mov	r0, sp
   b898c:	f000 ff3c 	bl	b9808 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8990:	2100      	movs	r1, #0
   b8992:	4668      	mov	r0, sp
   b8994:	f7fd fb14 	bl	b5fc0 <hal_rtc_get_time>
}
   b8998:	9800      	ldr	r0, [sp, #0]
   b899a:	b005      	add	sp, #20
   b899c:	f85d fb04 	ldr.w	pc, [sp], #4

000b89a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b89a0:	4b02      	ldr	r3, [pc, #8]	; (b89ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b89a2:	681a      	ldr	r2, [r3, #0]
   b89a4:	4b02      	ldr	r3, [pc, #8]	; (b89b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b89a6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b89a8:	4770      	bx	lr
   b89aa:	bf00      	nop
   b89ac:	2003dd40 	.word	0x2003dd40
   b89b0:	2003e6ec 	.word	0x2003e6ec

000b89b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b89b4:	4770      	bx	lr

000b89b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b89b6:	7441      	strb	r1, [r0, #17]
}
   b89b8:	4770      	bx	lr

000b89ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b89ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b89bc:	7c00      	ldrb	r0, [r0, #16]
   b89be:	f7fd fc2f 	bl	b6220 <hal_usart_available_data_for_write>
}
   b89c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b89c6:	bd08      	pop	{r3, pc}

000b89c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b89c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b89ca:	7c00      	ldrb	r0, [r0, #16]
   b89cc:	f7fd fc00 	bl	b61d0 <hal_usart_available>
}
   b89d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b89d4:	bd08      	pop	{r3, pc}

000b89d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b89d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b89d8:	7c00      	ldrb	r0, [r0, #16]
   b89da:	f7fd fc09 	bl	b61f0 <hal_usart_peek>
}
   b89de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b89e2:	bd08      	pop	{r3, pc}

000b89e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b89e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b89e6:	7c00      	ldrb	r0, [r0, #16]
   b89e8:	f7fd fbfa 	bl	b61e0 <hal_usart_read>
}
   b89ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b89f0:	bd08      	pop	{r3, pc}

000b89f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b89f2:	7c00      	ldrb	r0, [r0, #16]
   b89f4:	f7fd bc04 	b.w	b6200 <hal_usart_flush>

000b89f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b89f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b89fa:	7c45      	ldrb	r5, [r0, #17]
{
   b89fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b89fe:	b12d      	cbz	r5, b8a0c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8a00:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8a02:	b003      	add	sp, #12
   b8a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8a08:	f7fd bbda 	b.w	b61c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8a0c:	7c00      	ldrb	r0, [r0, #16]
   b8a0e:	9101      	str	r1, [sp, #4]
   b8a10:	f7fd fc06 	bl	b6220 <hal_usart_available_data_for_write>
   b8a14:	2800      	cmp	r0, #0
   b8a16:	9901      	ldr	r1, [sp, #4]
   b8a18:	dcf2      	bgt.n	b8a00 <_ZN11USARTSerial5writeEh+0x8>
}
   b8a1a:	4628      	mov	r0, r5
   b8a1c:	b003      	add	sp, #12
   b8a1e:	bd30      	pop	{r4, r5, pc}

000b8a20 <_ZN11USARTSerialD0Ev>:
   b8a20:	b510      	push	{r4, lr}
   b8a22:	2114      	movs	r1, #20
   b8a24:	4604      	mov	r4, r0
   b8a26:	f7fb fb38 	bl	b409a <_ZdlPvj>
   b8a2a:	4620      	mov	r0, r4
   b8a2c:	bd10      	pop	{r4, pc}
	...

000b8a30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8a30:	b510      	push	{r4, lr}
   b8a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8a36:	4604      	mov	r4, r0
   b8a38:	4608      	mov	r0, r1
   b8a3a:	4611      	mov	r1, r2
   b8a3c:	2200      	movs	r2, #0
   b8a3e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8a42:	4b04      	ldr	r3, [pc, #16]	; (b8a54 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8a44:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8a46:	2301      	movs	r3, #1
  _serial = serial;
   b8a48:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8a4a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8a4c:	f7fd fbf8 	bl	b6240 <hal_usart_init_ex>
}
   b8a50:	4620      	mov	r0, r4
   b8a52:	bd10      	pop	{r4, pc}
   b8a54:	000b9fc0 	.word	0x000b9fc0

000b8a58 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8a58:	7c00      	ldrb	r0, [r0, #16]
   b8a5a:	2300      	movs	r3, #0
   b8a5c:	f7fd bbe8 	b.w	b6230 <hal_usart_begin_config>

000b8a60 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b8a60:	2200      	movs	r2, #0
   b8a62:	f7ff bff9 	b.w	b8a58 <_ZN11USARTSerial5beginEmm>

000b8a66 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8a66:	7c00      	ldrb	r0, [r0, #16]
   b8a68:	f7fd bba2 	b.w	b61b0 <hal_usart_end>

000b8a6c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8a6c:	7441      	strb	r1, [r0, #17]
}
   b8a6e:	4770      	bx	lr

000b8a70 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a70:	4770      	bx	lr

000b8a72 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8a72:	4770      	bx	lr

000b8a74 <_ZN9USBSerial4readEv>:
{
   b8a74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8a76:	2100      	movs	r1, #0
   b8a78:	7c00      	ldrb	r0, [r0, #16]
   b8a7a:	f7fd fc11 	bl	b62a0 <HAL_USB_USART_Receive_Data>
}
   b8a7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a82:	bd08      	pop	{r3, pc}

000b8a84 <_ZN9USBSerial4peekEv>:
{
   b8a84:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8a86:	2101      	movs	r1, #1
   b8a88:	7c00      	ldrb	r0, [r0, #16]
   b8a8a:	f7fd fc09 	bl	b62a0 <HAL_USB_USART_Receive_Data>
}
   b8a8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a92:	bd08      	pop	{r3, pc}

000b8a94 <_ZN9USBSerial17availableForWriteEv>:
{
   b8a94:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8a96:	7c00      	ldrb	r0, [r0, #16]
   b8a98:	f7fd fbfa 	bl	b6290 <HAL_USB_USART_Available_Data_For_Write>
}
   b8a9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8aa0:	bd08      	pop	{r3, pc}

000b8aa2 <_ZN9USBSerial9availableEv>:
{
   b8aa2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8aa4:	7c00      	ldrb	r0, [r0, #16]
   b8aa6:	f7fd fbeb 	bl	b6280 <HAL_USB_USART_Available_Data>
}
   b8aaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8aae:	bd08      	pop	{r3, pc}

000b8ab0 <_ZN9USBSerial5writeEh>:
{
   b8ab0:	b513      	push	{r0, r1, r4, lr}
   b8ab2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8ab4:	7c00      	ldrb	r0, [r0, #16]
{
   b8ab6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8ab8:	f7fd fbea 	bl	b6290 <HAL_USB_USART_Available_Data_For_Write>
   b8abc:	2800      	cmp	r0, #0
   b8abe:	9901      	ldr	r1, [sp, #4]
   b8ac0:	dc01      	bgt.n	b8ac6 <_ZN9USBSerial5writeEh+0x16>
   b8ac2:	7c60      	ldrb	r0, [r4, #17]
   b8ac4:	b120      	cbz	r0, b8ad0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8ac6:	7c20      	ldrb	r0, [r4, #16]
   b8ac8:	f7fd fbf2 	bl	b62b0 <HAL_USB_USART_Send_Data>
   b8acc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8ad0:	b002      	add	sp, #8
   b8ad2:	bd10      	pop	{r4, pc}

000b8ad4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8ad4:	7c00      	ldrb	r0, [r0, #16]
   b8ad6:	f7fd bbf3 	b.w	b62c0 <HAL_USB_USART_Flush_Data>

000b8ada <_ZN9USBSerialD0Ev>:
   b8ada:	b510      	push	{r4, lr}
   b8adc:	2114      	movs	r1, #20
   b8ade:	4604      	mov	r4, r0
   b8ae0:	f7fb fadb 	bl	b409a <_ZdlPvj>
   b8ae4:	4620      	mov	r0, r4
   b8ae6:	bd10      	pop	{r4, pc}

000b8ae8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8ae8:	b510      	push	{r4, lr}
   b8aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8aee:	4604      	mov	r4, r0
   b8af0:	4608      	mov	r0, r1
   b8af2:	2100      	movs	r1, #0
   b8af4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8af8:	4b04      	ldr	r3, [pc, #16]	; (b8b0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8afa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8afc:	2301      	movs	r3, #1
  _serial = serial;
   b8afe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8b00:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8b02:	4611      	mov	r1, r2
   b8b04:	f7fd fba4 	bl	b6250 <HAL_USB_USART_Init>
}
   b8b08:	4620      	mov	r0, r4
   b8b0a:	bd10      	pop	{r4, pc}
   b8b0c:	000b9ff0 	.word	0x000b9ff0

000b8b10 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8b10:	7c00      	ldrb	r0, [r0, #16]
   b8b12:	2200      	movs	r2, #0
   b8b14:	f7fd bba4 	b.w	b6260 <HAL_USB_USART_Begin>

000b8b18 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b8b18:	7c00      	ldrb	r0, [r0, #16]
   b8b1a:	f7fd bba9 	b.w	b6270 <HAL_USB_USART_End>

000b8b1e <_Z19acquireSerialBufferv>:
{
   b8b1e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8b20:	2214      	movs	r2, #20
{
   b8b22:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8b24:	2100      	movs	r1, #0
   b8b26:	f000 fe6f 	bl	b9808 <memset>
}
   b8b2a:	4620      	mov	r0, r4
   b8b2c:	bd10      	pop	{r4, pc}
	...

000b8b30 <_Z16_fetch_usbserialv>:
{
   b8b30:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8b32:	4c0f      	ldr	r4, [pc, #60]	; (b8b70 <_Z16_fetch_usbserialv+0x40>)
{
   b8b34:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8b36:	a803      	add	r0, sp, #12
   b8b38:	f7ff fff1 	bl	b8b1e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8b3c:	7821      	ldrb	r1, [r4, #0]
   b8b3e:	f3bf 8f5b 	dmb	ish
   b8b42:	f011 0101 	ands.w	r1, r1, #1
   b8b46:	d10f      	bne.n	b8b68 <_Z16_fetch_usbserialv+0x38>
   b8b48:	4620      	mov	r0, r4
   b8b4a:	9101      	str	r1, [sp, #4]
   b8b4c:	f7fb fab4 	bl	b40b8 <__cxa_guard_acquire>
   b8b50:	9901      	ldr	r1, [sp, #4]
   b8b52:	b148      	cbz	r0, b8b68 <_Z16_fetch_usbserialv+0x38>
   b8b54:	aa03      	add	r2, sp, #12
   b8b56:	4807      	ldr	r0, [pc, #28]	; (b8b74 <_Z16_fetch_usbserialv+0x44>)
   b8b58:	f7ff ffc6 	bl	b8ae8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8b5c:	4620      	mov	r0, r4
   b8b5e:	f7fb fab0 	bl	b40c2 <__cxa_guard_release>
   b8b62:	4805      	ldr	r0, [pc, #20]	; (b8b78 <_Z16_fetch_usbserialv+0x48>)
   b8b64:	f000 fe0a 	bl	b977c <atexit>
	return _usbserial;
}
   b8b68:	4802      	ldr	r0, [pc, #8]	; (b8b74 <_Z16_fetch_usbserialv+0x44>)
   b8b6a:	b008      	add	sp, #32
   b8b6c:	bd10      	pop	{r4, pc}
   b8b6e:	bf00      	nop
   b8b70:	2003e6f0 	.word	0x2003e6f0
   b8b74:	2003e6f4 	.word	0x2003e6f4
   b8b78:	000b8a71 	.word	0x000b8a71

000b8b7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8b7c:	4b01      	ldr	r3, [pc, #4]	; (b8b84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8b7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8b80:	4770      	bx	lr
   b8b82:	bf00      	nop
   b8b84:	2003dd44 	.word	0x2003dd44

000b8b88 <serialEventRun>:
{
   b8b88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8b8a:	4b0b      	ldr	r3, [pc, #44]	; (b8bb8 <serialEventRun+0x30>)
   b8b8c:	b143      	cbz	r3, b8ba0 <serialEventRun+0x18>
   b8b8e:	f7ff ffcf 	bl	b8b30 <_Z16_fetch_usbserialv>
   b8b92:	6803      	ldr	r3, [r0, #0]
   b8b94:	691b      	ldr	r3, [r3, #16]
   b8b96:	4798      	blx	r3
   b8b98:	2800      	cmp	r0, #0
   b8b9a:	dd01      	ble.n	b8ba0 <serialEventRun+0x18>
        serialEvent();
   b8b9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8ba0:	4b06      	ldr	r3, [pc, #24]	; (b8bbc <serialEventRun+0x34>)
   b8ba2:	b143      	cbz	r3, b8bb6 <serialEventRun+0x2e>
   b8ba4:	f000 f9a0 	bl	b8ee8 <_Z22__fetch_global_Serial1v>
   b8ba8:	6803      	ldr	r3, [r0, #0]
   b8baa:	691b      	ldr	r3, [r3, #16]
   b8bac:	4798      	blx	r3
   b8bae:	2800      	cmp	r0, #0
   b8bb0:	dd01      	ble.n	b8bb6 <serialEventRun+0x2e>
        serialEvent1();
   b8bb2:	f3af 8000 	nop.w
}
   b8bb6:	bd08      	pop	{r3, pc}
	...

000b8bc0 <_post_loop>:
{
   b8bc0:	b508      	push	{r3, lr}
	serialEventRun();
   b8bc2:	f7ff ffe1 	bl	b8b88 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8bc6:	f7fd f9eb 	bl	b5fa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8bca:	4b01      	ldr	r3, [pc, #4]	; (b8bd0 <_post_loop+0x10>)
   b8bcc:	6018      	str	r0, [r3, #0]
}
   b8bce:	bd08      	pop	{r3, pc}
   b8bd0:	2003e710 	.word	0x2003e710

000b8bd4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8bd4:	4805      	ldr	r0, [pc, #20]	; (b8bec <_Z33system_initialize_user_backup_ramv+0x18>)
   b8bd6:	4a06      	ldr	r2, [pc, #24]	; (b8bf0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8bd8:	4906      	ldr	r1, [pc, #24]	; (b8bf4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8bda:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8bdc:	1a12      	subs	r2, r2, r0
   b8bde:	f000 fdeb 	bl	b97b8 <memcpy>
    __backup_sram_signature = signature;
   b8be2:	4b05      	ldr	r3, [pc, #20]	; (b8bf8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8be4:	4a05      	ldr	r2, [pc, #20]	; (b8bfc <_Z33system_initialize_user_backup_ramv+0x28>)
   b8be6:	601a      	str	r2, [r3, #0]
}
   b8be8:	bd08      	pop	{r3, pc}
   b8bea:	bf00      	nop
   b8bec:	2003f400 	.word	0x2003f400
   b8bf0:	2003f404 	.word	0x2003f404
   b8bf4:	000ba1d4 	.word	0x000ba1d4
   b8bf8:	2003f400 	.word	0x2003f400
   b8bfc:	9a271c1e 	.word	0x9a271c1e

000b8c00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8c00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c02:	2300      	movs	r3, #0
   b8c04:	9300      	str	r3, [sp, #0]
   b8c06:	461a      	mov	r2, r3
   b8c08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c0c:	f7fd fbca 	bl	b63a4 <system_ctrl_set_result>
}
   b8c10:	b003      	add	sp, #12
   b8c12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8c18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8c18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8c1a:	8843      	ldrh	r3, [r0, #2]
   b8c1c:	2b0a      	cmp	r3, #10
   b8c1e:	d008      	beq.n	b8c32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8c20:	2b50      	cmp	r3, #80	; 0x50
   b8c22:	d10b      	bne.n	b8c3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8c24:	4b09      	ldr	r3, [pc, #36]	; (b8c4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8c26:	681b      	ldr	r3, [r3, #0]
   b8c28:	b14b      	cbz	r3, b8c3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8c2a:	b003      	add	sp, #12
   b8c2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8c30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8c32:	f7ff ffe5 	bl	b8c00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8c36:	b003      	add	sp, #12
   b8c38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c3c:	2300      	movs	r3, #0
   b8c3e:	9300      	str	r3, [sp, #0]
   b8c40:	461a      	mov	r2, r3
   b8c42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c46:	f7fd fbad 	bl	b63a4 <system_ctrl_set_result>
}
   b8c4a:	e7f4      	b.n	b8c36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8c4c:	2003e70c 	.word	0x2003e70c

000b8c50 <module_user_init_hook>:
{
   b8c50:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8c52:	4812      	ldr	r0, [pc, #72]	; (b8c9c <module_user_init_hook+0x4c>)
   b8c54:	2100      	movs	r1, #0
   b8c56:	f7fd fc9b 	bl	b6590 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8c5a:	4b11      	ldr	r3, [pc, #68]	; (b8ca0 <module_user_init_hook+0x50>)
   b8c5c:	681a      	ldr	r2, [r3, #0]
   b8c5e:	4b11      	ldr	r3, [pc, #68]	; (b8ca4 <module_user_init_hook+0x54>)
   b8c60:	429a      	cmp	r2, r3
   b8c62:	4b11      	ldr	r3, [pc, #68]	; (b8ca8 <module_user_init_hook+0x58>)
   b8c64:	bf0c      	ite	eq
   b8c66:	2201      	moveq	r2, #1
   b8c68:	2200      	movne	r2, #0
   b8c6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8c6c:	d001      	beq.n	b8c72 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8c6e:	f7ff ffb1 	bl	b8bd4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8c72:	f7fd f97d 	bl	b5f70 <HAL_RNG_GetRandomNumber>
   b8c76:	4604      	mov	r4, r0
    srand(seed);
   b8c78:	f000 fdce 	bl	b9818 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8c7c:	4b0b      	ldr	r3, [pc, #44]	; (b8cac <module_user_init_hook+0x5c>)
   b8c7e:	b113      	cbz	r3, b8c86 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8c80:	4620      	mov	r0, r4
   b8c82:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8c86:	2100      	movs	r1, #0
   b8c88:	4808      	ldr	r0, [pc, #32]	; (b8cac <module_user_init_hook+0x5c>)
   b8c8a:	f7fd fbd1 	bl	b6430 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8c92:	4807      	ldr	r0, [pc, #28]	; (b8cb0 <module_user_init_hook+0x60>)
   b8c94:	2100      	movs	r1, #0
   b8c96:	f7fd bb7b 	b.w	b6390 <system_ctrl_set_app_request_handler>
   b8c9a:	bf00      	nop
   b8c9c:	000b8b7d 	.word	0x000b8b7d
   b8ca0:	2003f400 	.word	0x2003f400
   b8ca4:	9a271c1e 	.word	0x9a271c1e
   b8ca8:	2003e708 	.word	0x2003e708
   b8cac:	00000000 	.word	0x00000000
   b8cb0:	000b8c19 	.word	0x000b8c19

000b8cb4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8cb4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8cb6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8cb8:	d902      	bls.n	b8cc0 <pinAvailable+0xc>
    return false;
   b8cba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8cbc:	b002      	add	sp, #8
   b8cbe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8cc0:	f1a0 030b 	sub.w	r3, r0, #11
   b8cc4:	2b02      	cmp	r3, #2
   b8cc6:	d81a      	bhi.n	b8cfe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8cc8:	4c17      	ldr	r4, [pc, #92]	; (b8d28 <pinAvailable+0x74>)
   b8cca:	7821      	ldrb	r1, [r4, #0]
   b8ccc:	f3bf 8f5b 	dmb	ish
   b8cd0:	f011 0101 	ands.w	r1, r1, #1
   b8cd4:	d10b      	bne.n	b8cee <pinAvailable+0x3a>
   b8cd6:	4620      	mov	r0, r4
   b8cd8:	9101      	str	r1, [sp, #4]
   b8cda:	f7fb f9ed 	bl	b40b8 <__cxa_guard_acquire>
   b8cde:	9901      	ldr	r1, [sp, #4]
   b8ce0:	b128      	cbz	r0, b8cee <pinAvailable+0x3a>
   b8ce2:	4812      	ldr	r0, [pc, #72]	; (b8d2c <pinAvailable+0x78>)
   b8ce4:	f7ff fc34 	bl	b8550 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8ce8:	4620      	mov	r0, r4
   b8cea:	f7fb f9ea 	bl	b40c2 <__cxa_guard_release>
   b8cee:	4b0f      	ldr	r3, [pc, #60]	; (b8d2c <pinAvailable+0x78>)
   b8cf0:	7818      	ldrb	r0, [r3, #0]
   b8cf2:	f7fd fa25 	bl	b6140 <hal_spi_is_enabled>
   b8cf6:	2800      	cmp	r0, #0
   b8cf8:	d1df      	bne.n	b8cba <pinAvailable+0x6>
  return true; // 'pin' is available
   b8cfa:	2001      	movs	r0, #1
   b8cfc:	e7de      	b.n	b8cbc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8cfe:	2801      	cmp	r0, #1
   b8d00:	d809      	bhi.n	b8d16 <pinAvailable+0x62>
   b8d02:	f000 f88d 	bl	b8e20 <_Z19__fetch_global_Wirev>
   b8d06:	2100      	movs	r1, #0
   b8d08:	7c00      	ldrb	r0, [r0, #16]
   b8d0a:	f7fd f9c1 	bl	b6090 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8d0e:	f080 0001 	eor.w	r0, r0, #1
   b8d12:	b2c0      	uxtb	r0, r0
   b8d14:	e7d2      	b.n	b8cbc <pinAvailable+0x8>
   b8d16:	3809      	subs	r0, #9
   b8d18:	2801      	cmp	r0, #1
   b8d1a:	d8ee      	bhi.n	b8cfa <pinAvailable+0x46>
   b8d1c:	f000 f8e4 	bl	b8ee8 <_Z22__fetch_global_Serial1v>
   b8d20:	7c00      	ldrb	r0, [r0, #16]
   b8d22:	f7fd fa75 	bl	b6210 <hal_usart_is_enabled>
   b8d26:	e7f2      	b.n	b8d0e <pinAvailable+0x5a>
   b8d28:	2003ddac 	.word	0x2003ddac
   b8d2c:	2003ddb0 	.word	0x2003ddb0

000b8d30 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d30:	2823      	cmp	r0, #35	; 0x23
{
   b8d32:	b538      	push	{r3, r4, r5, lr}
   b8d34:	4604      	mov	r4, r0
   b8d36:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d38:	d80a      	bhi.n	b8d50 <pinMode+0x20>
   b8d3a:	29ff      	cmp	r1, #255	; 0xff
   b8d3c:	d008      	beq.n	b8d50 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8d3e:	f7ff ffb9 	bl	b8cb4 <pinAvailable>
   b8d42:	b128      	cbz	r0, b8d50 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8d44:	4629      	mov	r1, r5
   b8d46:	4620      	mov	r0, r4
}
   b8d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8d4c:	f7fd b948 	b.w	b5fe0 <HAL_Pin_Mode>
}
   b8d50:	bd38      	pop	{r3, r4, r5, pc}

000b8d52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8d52:	b538      	push	{r3, r4, r5, lr}
   b8d54:	4604      	mov	r4, r0
   b8d56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8d58:	f7fd f94a 	bl	b5ff0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8d5c:	28ff      	cmp	r0, #255	; 0xff
   b8d5e:	d010      	beq.n	b8d82 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8d60:	2806      	cmp	r0, #6
   b8d62:	d804      	bhi.n	b8d6e <digitalWrite+0x1c>
   b8d64:	234d      	movs	r3, #77	; 0x4d
   b8d66:	fa23 f000 	lsr.w	r0, r3, r0
   b8d6a:	07c3      	lsls	r3, r0, #31
   b8d6c:	d409      	bmi.n	b8d82 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8d6e:	4620      	mov	r0, r4
   b8d70:	f7ff ffa0 	bl	b8cb4 <pinAvailable>
   b8d74:	b128      	cbz	r0, b8d82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b8d76:	4629      	mov	r1, r5
   b8d78:	4620      	mov	r0, r4
}
   b8d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8d7e:	f7fd b93f 	b.w	b6000 <HAL_GPIO_Write>
}
   b8d82:	bd38      	pop	{r3, r4, r5, pc}

000b8d84 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8d84:	280d      	cmp	r0, #13
{
   b8d86:	b510      	push	{r4, lr}
   b8d88:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8d8a:	bf9c      	itt	ls
   b8d8c:	340e      	addls	r4, #14
   b8d8e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8d90:	4620      	mov	r0, r4
   b8d92:	f7ff ff8f 	bl	b8cb4 <pinAvailable>
   b8d96:	b150      	cbz	r0, b8dae <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8d98:	2103      	movs	r1, #3
   b8d9a:	4620      	mov	r0, r4
   b8d9c:	f7fd f918 	bl	b5fd0 <HAL_Validate_Pin_Function>
   b8da0:	2803      	cmp	r0, #3
   b8da2:	d104      	bne.n	b8dae <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8da4:	4620      	mov	r0, r4
}
   b8da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8daa:	f7fd b931 	b.w	b6010 <hal_adc_read>
}
   b8dae:	2000      	movs	r0, #0
   b8db0:	bd10      	pop	{r4, pc}

000b8db2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8db2:	4770      	bx	lr

000b8db4 <__tcf_1>:
   b8db4:	4770      	bx	lr
	...

000b8db8 <_Z17acquireWireBufferv>:
{
   b8db8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8dba:	4b0a      	ldr	r3, [pc, #40]	; (b8de4 <_Z17acquireWireBufferv+0x2c>)
   b8dbc:	6003      	str	r3, [r0, #0]
   b8dbe:	2301      	movs	r3, #1
{
   b8dc0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8dc2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8dc4:	4908      	ldr	r1, [pc, #32]	; (b8de8 <_Z17acquireWireBufferv+0x30>)
   b8dc6:	2020      	movs	r0, #32
   b8dc8:	f000 f8b4 	bl	b8f34 <_ZnajRKSt9nothrow_t>
	};
   b8dcc:	2520      	movs	r5, #32
   b8dce:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8dd0:	4905      	ldr	r1, [pc, #20]	; (b8de8 <_Z17acquireWireBufferv+0x30>)
	};
   b8dd2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8dd4:	4628      	mov	r0, r5
   b8dd6:	f000 f8ad 	bl	b8f34 <_ZnajRKSt9nothrow_t>
	};
   b8dda:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8dde:	4620      	mov	r0, r4
   b8de0:	bd38      	pop	{r3, r4, r5, pc}
   b8de2:	bf00      	nop
   b8de4:	00010018 	.word	0x00010018
   b8de8:	000ba018 	.word	0x000ba018

000b8dec <_Z18acquireWire1Bufferv>:
{
   b8dec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8dee:	4b0a      	ldr	r3, [pc, #40]	; (b8e18 <_Z18acquireWire1Bufferv+0x2c>)
   b8df0:	6003      	str	r3, [r0, #0]
   b8df2:	2301      	movs	r3, #1
{
   b8df4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8df6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8df8:	4908      	ldr	r1, [pc, #32]	; (b8e1c <_Z18acquireWire1Bufferv+0x30>)
   b8dfa:	2020      	movs	r0, #32
   b8dfc:	f000 f89a 	bl	b8f34 <_ZnajRKSt9nothrow_t>
	};
   b8e00:	2520      	movs	r5, #32
   b8e02:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e04:	4905      	ldr	r1, [pc, #20]	; (b8e1c <_Z18acquireWire1Bufferv+0x30>)
	};
   b8e06:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8e08:	4628      	mov	r0, r5
   b8e0a:	f000 f893 	bl	b8f34 <_ZnajRKSt9nothrow_t>
	};
   b8e0e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8e12:	4620      	mov	r0, r4
   b8e14:	bd38      	pop	{r3, r4, r5, pc}
   b8e16:	bf00      	nop
   b8e18:	00010018 	.word	0x00010018
   b8e1c:	000ba018 	.word	0x000ba018

000b8e20 <_Z19__fetch_global_Wirev>:
{
   b8e20:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8e22:	4d0e      	ldr	r5, [pc, #56]	; (b8e5c <_Z19__fetch_global_Wirev+0x3c>)
   b8e24:	7829      	ldrb	r1, [r5, #0]
   b8e26:	f3bf 8f5b 	dmb	ish
   b8e2a:	f011 0401 	ands.w	r4, r1, #1
{
   b8e2e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8e30:	d111      	bne.n	b8e56 <_Z19__fetch_global_Wirev+0x36>
   b8e32:	4628      	mov	r0, r5
   b8e34:	f7fb f940 	bl	b40b8 <__cxa_guard_acquire>
   b8e38:	b168      	cbz	r0, b8e56 <_Z19__fetch_global_Wirev+0x36>
   b8e3a:	4668      	mov	r0, sp
   b8e3c:	f7ff ffbc 	bl	b8db8 <_Z17acquireWireBufferv>
   b8e40:	466a      	mov	r2, sp
   b8e42:	4621      	mov	r1, r4
   b8e44:	4806      	ldr	r0, [pc, #24]	; (b8e60 <_Z19__fetch_global_Wirev+0x40>)
   b8e46:	f7fe f825 	bl	b6e94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8e4a:	4628      	mov	r0, r5
   b8e4c:	f7fb f939 	bl	b40c2 <__cxa_guard_release>
   b8e50:	4804      	ldr	r0, [pc, #16]	; (b8e64 <_Z19__fetch_global_Wirev+0x44>)
   b8e52:	f000 fc93 	bl	b977c <atexit>
	return wire;
}
   b8e56:	4802      	ldr	r0, [pc, #8]	; (b8e60 <_Z19__fetch_global_Wirev+0x40>)
   b8e58:	b007      	add	sp, #28
   b8e5a:	bd30      	pop	{r4, r5, pc}
   b8e5c:	2003e714 	.word	0x2003e714
   b8e60:	2003e71c 	.word	0x2003e71c
   b8e64:	000b8db3 	.word	0x000b8db3

000b8e68 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   b8e68:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b8e6a:	4c0e      	ldr	r4, [pc, #56]	; (b8ea4 <_Z20__fetch_global_Wire1v+0x3c>)
   b8e6c:	7823      	ldrb	r3, [r4, #0]
   b8e6e:	f3bf 8f5b 	dmb	ish
   b8e72:	07db      	lsls	r3, r3, #31
{
   b8e74:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   b8e76:	d411      	bmi.n	b8e9c <_Z20__fetch_global_Wire1v+0x34>
   b8e78:	4620      	mov	r0, r4
   b8e7a:	f7fb f91d 	bl	b40b8 <__cxa_guard_acquire>
   b8e7e:	b168      	cbz	r0, b8e9c <_Z20__fetch_global_Wire1v+0x34>
   b8e80:	4668      	mov	r0, sp
   b8e82:	f7ff ffb3 	bl	b8dec <_Z18acquireWire1Bufferv>
   b8e86:	466a      	mov	r2, sp
   b8e88:	2101      	movs	r1, #1
   b8e8a:	4807      	ldr	r0, [pc, #28]	; (b8ea8 <_Z20__fetch_global_Wire1v+0x40>)
   b8e8c:	f7fe f802 	bl	b6e94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8e90:	4620      	mov	r0, r4
   b8e92:	f7fb f916 	bl	b40c2 <__cxa_guard_release>
   b8e96:	4805      	ldr	r0, [pc, #20]	; (b8eac <_Z20__fetch_global_Wire1v+0x44>)
   b8e98:	f000 fc70 	bl	b977c <atexit>
	return wire;
}
   b8e9c:	4802      	ldr	r0, [pc, #8]	; (b8ea8 <_Z20__fetch_global_Wire1v+0x40>)
   b8e9e:	b006      	add	sp, #24
   b8ea0:	bd10      	pop	{r4, pc}
   b8ea2:	bf00      	nop
   b8ea4:	2003e718 	.word	0x2003e718
   b8ea8:	2003e730 	.word	0x2003e730
   b8eac:	000b8db5 	.word	0x000b8db5

000b8eb0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8eb0:	4770      	bx	lr
	...

000b8eb4 <_Z20acquireSerial1Bufferv>:
{
   b8eb4:	b538      	push	{r3, r4, r5, lr}
   b8eb6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8eb8:	2514      	movs	r5, #20
   b8eba:	462a      	mov	r2, r5
   b8ebc:	2100      	movs	r1, #0
   b8ebe:	f000 fca3 	bl	b9808 <memset>
   b8ec2:	8025      	strh	r5, [r4, #0]
   b8ec4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8ec6:	4907      	ldr	r1, [pc, #28]	; (b8ee4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8ec8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8eca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8ecc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8ece:	f000 f831 	bl	b8f34 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8ed2:	4904      	ldr	r1, [pc, #16]	; (b8ee4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8ed4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8ed6:	4628      	mov	r0, r5
   b8ed8:	f000 f82c 	bl	b8f34 <_ZnajRKSt9nothrow_t>
    };
   b8edc:	60e0      	str	r0, [r4, #12]
}
   b8ede:	4620      	mov	r0, r4
   b8ee0:	bd38      	pop	{r3, r4, r5, pc}
   b8ee2:	bf00      	nop
   b8ee4:	000ba018 	.word	0x000ba018

000b8ee8 <_Z22__fetch_global_Serial1v>:
{
   b8ee8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8eea:	4d0e      	ldr	r5, [pc, #56]	; (b8f24 <_Z22__fetch_global_Serial1v+0x3c>)
   b8eec:	7829      	ldrb	r1, [r5, #0]
   b8eee:	f3bf 8f5b 	dmb	ish
   b8ef2:	f011 0401 	ands.w	r4, r1, #1
{
   b8ef6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8ef8:	d111      	bne.n	b8f1e <_Z22__fetch_global_Serial1v+0x36>
   b8efa:	4628      	mov	r0, r5
   b8efc:	f7fb f8dc 	bl	b40b8 <__cxa_guard_acquire>
   b8f00:	b168      	cbz	r0, b8f1e <_Z22__fetch_global_Serial1v+0x36>
   b8f02:	a801      	add	r0, sp, #4
   b8f04:	f7ff ffd6 	bl	b8eb4 <_Z20acquireSerial1Bufferv>
   b8f08:	aa01      	add	r2, sp, #4
   b8f0a:	4621      	mov	r1, r4
   b8f0c:	4806      	ldr	r0, [pc, #24]	; (b8f28 <_Z22__fetch_global_Serial1v+0x40>)
   b8f0e:	f7ff fd8f 	bl	b8a30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8f12:	4628      	mov	r0, r5
   b8f14:	f7fb f8d5 	bl	b40c2 <__cxa_guard_release>
   b8f18:	4804      	ldr	r0, [pc, #16]	; (b8f2c <_Z22__fetch_global_Serial1v+0x44>)
   b8f1a:	f000 fc2f 	bl	b977c <atexit>
    return serial1;
}
   b8f1e:	4802      	ldr	r0, [pc, #8]	; (b8f28 <_Z22__fetch_global_Serial1v+0x40>)
   b8f20:	b007      	add	sp, #28
   b8f22:	bd30      	pop	{r4, r5, pc}
   b8f24:	2003e744 	.word	0x2003e744
   b8f28:	2003e748 	.word	0x2003e748
   b8f2c:	000b8eb1 	.word	0x000b8eb1

000b8f30 <_ZnwjRKSt9nothrow_t>:
   b8f30:	f7fb b8af 	b.w	b4092 <_Znwj>

000b8f34 <_ZnajRKSt9nothrow_t>:
   b8f34:	f7fb b8af 	b.w	b4096 <_Znaj>

000b8f38 <_ZSt25__throw_bad_function_callv>:
   b8f38:	b508      	push	{r3, lr}
   b8f3a:	f7fd fb09 	bl	b6550 <abort>
	...

000b8f40 <__aeabi_drsub>:
   b8f40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8f44:	e002      	b.n	b8f4c <__adddf3>
   b8f46:	bf00      	nop

000b8f48 <__aeabi_dsub>:
   b8f48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8f4c <__adddf3>:
   b8f4c:	b530      	push	{r4, r5, lr}
   b8f4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8f52:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8f56:	ea94 0f05 	teq	r4, r5
   b8f5a:	bf08      	it	eq
   b8f5c:	ea90 0f02 	teqeq	r0, r2
   b8f60:	bf1f      	itttt	ne
   b8f62:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8f66:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8f6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8f6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8f72:	f000 80e2 	beq.w	b913a <__adddf3+0x1ee>
   b8f76:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8f7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8f7e:	bfb8      	it	lt
   b8f80:	426d      	neglt	r5, r5
   b8f82:	dd0c      	ble.n	b8f9e <__adddf3+0x52>
   b8f84:	442c      	add	r4, r5
   b8f86:	ea80 0202 	eor.w	r2, r0, r2
   b8f8a:	ea81 0303 	eor.w	r3, r1, r3
   b8f8e:	ea82 0000 	eor.w	r0, r2, r0
   b8f92:	ea83 0101 	eor.w	r1, r3, r1
   b8f96:	ea80 0202 	eor.w	r2, r0, r2
   b8f9a:	ea81 0303 	eor.w	r3, r1, r3
   b8f9e:	2d36      	cmp	r5, #54	; 0x36
   b8fa0:	bf88      	it	hi
   b8fa2:	bd30      	pophi	{r4, r5, pc}
   b8fa4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8fa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8fac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8fb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8fb4:	d002      	beq.n	b8fbc <__adddf3+0x70>
   b8fb6:	4240      	negs	r0, r0
   b8fb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8fbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8fc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8fc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8fc8:	d002      	beq.n	b8fd0 <__adddf3+0x84>
   b8fca:	4252      	negs	r2, r2
   b8fcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8fd0:	ea94 0f05 	teq	r4, r5
   b8fd4:	f000 80a7 	beq.w	b9126 <__adddf3+0x1da>
   b8fd8:	f1a4 0401 	sub.w	r4, r4, #1
   b8fdc:	f1d5 0e20 	rsbs	lr, r5, #32
   b8fe0:	db0d      	blt.n	b8ffe <__adddf3+0xb2>
   b8fe2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8fe6:	fa22 f205 	lsr.w	r2, r2, r5
   b8fea:	1880      	adds	r0, r0, r2
   b8fec:	f141 0100 	adc.w	r1, r1, #0
   b8ff0:	fa03 f20e 	lsl.w	r2, r3, lr
   b8ff4:	1880      	adds	r0, r0, r2
   b8ff6:	fa43 f305 	asr.w	r3, r3, r5
   b8ffa:	4159      	adcs	r1, r3
   b8ffc:	e00e      	b.n	b901c <__adddf3+0xd0>
   b8ffe:	f1a5 0520 	sub.w	r5, r5, #32
   b9002:	f10e 0e20 	add.w	lr, lr, #32
   b9006:	2a01      	cmp	r2, #1
   b9008:	fa03 fc0e 	lsl.w	ip, r3, lr
   b900c:	bf28      	it	cs
   b900e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9012:	fa43 f305 	asr.w	r3, r3, r5
   b9016:	18c0      	adds	r0, r0, r3
   b9018:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b901c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9020:	d507      	bpl.n	b9032 <__adddf3+0xe6>
   b9022:	f04f 0e00 	mov.w	lr, #0
   b9026:	f1dc 0c00 	rsbs	ip, ip, #0
   b902a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b902e:	eb6e 0101 	sbc.w	r1, lr, r1
   b9032:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b9036:	d31b      	bcc.n	b9070 <__adddf3+0x124>
   b9038:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b903c:	d30c      	bcc.n	b9058 <__adddf3+0x10c>
   b903e:	0849      	lsrs	r1, r1, #1
   b9040:	ea5f 0030 	movs.w	r0, r0, rrx
   b9044:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9048:	f104 0401 	add.w	r4, r4, #1
   b904c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9050:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9054:	f080 809a 	bcs.w	b918c <__adddf3+0x240>
   b9058:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b905c:	bf08      	it	eq
   b905e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9062:	f150 0000 	adcs.w	r0, r0, #0
   b9066:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b906a:	ea41 0105 	orr.w	r1, r1, r5
   b906e:	bd30      	pop	{r4, r5, pc}
   b9070:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9074:	4140      	adcs	r0, r0
   b9076:	eb41 0101 	adc.w	r1, r1, r1
   b907a:	3c01      	subs	r4, #1
   b907c:	bf28      	it	cs
   b907e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9082:	d2e9      	bcs.n	b9058 <__adddf3+0x10c>
   b9084:	f091 0f00 	teq	r1, #0
   b9088:	bf04      	itt	eq
   b908a:	4601      	moveq	r1, r0
   b908c:	2000      	moveq	r0, #0
   b908e:	fab1 f381 	clz	r3, r1
   b9092:	bf08      	it	eq
   b9094:	3320      	addeq	r3, #32
   b9096:	f1a3 030b 	sub.w	r3, r3, #11
   b909a:	f1b3 0220 	subs.w	r2, r3, #32
   b909e:	da0c      	bge.n	b90ba <__adddf3+0x16e>
   b90a0:	320c      	adds	r2, #12
   b90a2:	dd08      	ble.n	b90b6 <__adddf3+0x16a>
   b90a4:	f102 0c14 	add.w	ip, r2, #20
   b90a8:	f1c2 020c 	rsb	r2, r2, #12
   b90ac:	fa01 f00c 	lsl.w	r0, r1, ip
   b90b0:	fa21 f102 	lsr.w	r1, r1, r2
   b90b4:	e00c      	b.n	b90d0 <__adddf3+0x184>
   b90b6:	f102 0214 	add.w	r2, r2, #20
   b90ba:	bfd8      	it	le
   b90bc:	f1c2 0c20 	rsble	ip, r2, #32
   b90c0:	fa01 f102 	lsl.w	r1, r1, r2
   b90c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b90c8:	bfdc      	itt	le
   b90ca:	ea41 010c 	orrle.w	r1, r1, ip
   b90ce:	4090      	lslle	r0, r2
   b90d0:	1ae4      	subs	r4, r4, r3
   b90d2:	bfa2      	ittt	ge
   b90d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b90d8:	4329      	orrge	r1, r5
   b90da:	bd30      	popge	{r4, r5, pc}
   b90dc:	ea6f 0404 	mvn.w	r4, r4
   b90e0:	3c1f      	subs	r4, #31
   b90e2:	da1c      	bge.n	b911e <__adddf3+0x1d2>
   b90e4:	340c      	adds	r4, #12
   b90e6:	dc0e      	bgt.n	b9106 <__adddf3+0x1ba>
   b90e8:	f104 0414 	add.w	r4, r4, #20
   b90ec:	f1c4 0220 	rsb	r2, r4, #32
   b90f0:	fa20 f004 	lsr.w	r0, r0, r4
   b90f4:	fa01 f302 	lsl.w	r3, r1, r2
   b90f8:	ea40 0003 	orr.w	r0, r0, r3
   b90fc:	fa21 f304 	lsr.w	r3, r1, r4
   b9100:	ea45 0103 	orr.w	r1, r5, r3
   b9104:	bd30      	pop	{r4, r5, pc}
   b9106:	f1c4 040c 	rsb	r4, r4, #12
   b910a:	f1c4 0220 	rsb	r2, r4, #32
   b910e:	fa20 f002 	lsr.w	r0, r0, r2
   b9112:	fa01 f304 	lsl.w	r3, r1, r4
   b9116:	ea40 0003 	orr.w	r0, r0, r3
   b911a:	4629      	mov	r1, r5
   b911c:	bd30      	pop	{r4, r5, pc}
   b911e:	fa21 f004 	lsr.w	r0, r1, r4
   b9122:	4629      	mov	r1, r5
   b9124:	bd30      	pop	{r4, r5, pc}
   b9126:	f094 0f00 	teq	r4, #0
   b912a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b912e:	bf06      	itte	eq
   b9130:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9134:	3401      	addeq	r4, #1
   b9136:	3d01      	subne	r5, #1
   b9138:	e74e      	b.n	b8fd8 <__adddf3+0x8c>
   b913a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b913e:	bf18      	it	ne
   b9140:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9144:	d029      	beq.n	b919a <__adddf3+0x24e>
   b9146:	ea94 0f05 	teq	r4, r5
   b914a:	bf08      	it	eq
   b914c:	ea90 0f02 	teqeq	r0, r2
   b9150:	d005      	beq.n	b915e <__adddf3+0x212>
   b9152:	ea54 0c00 	orrs.w	ip, r4, r0
   b9156:	bf04      	itt	eq
   b9158:	4619      	moveq	r1, r3
   b915a:	4610      	moveq	r0, r2
   b915c:	bd30      	pop	{r4, r5, pc}
   b915e:	ea91 0f03 	teq	r1, r3
   b9162:	bf1e      	ittt	ne
   b9164:	2100      	movne	r1, #0
   b9166:	2000      	movne	r0, #0
   b9168:	bd30      	popne	{r4, r5, pc}
   b916a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b916e:	d105      	bne.n	b917c <__adddf3+0x230>
   b9170:	0040      	lsls	r0, r0, #1
   b9172:	4149      	adcs	r1, r1
   b9174:	bf28      	it	cs
   b9176:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b917a:	bd30      	pop	{r4, r5, pc}
   b917c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9180:	bf3c      	itt	cc
   b9182:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9186:	bd30      	popcc	{r4, r5, pc}
   b9188:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b918c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9190:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9194:	f04f 0000 	mov.w	r0, #0
   b9198:	bd30      	pop	{r4, r5, pc}
   b919a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b919e:	bf1a      	itte	ne
   b91a0:	4619      	movne	r1, r3
   b91a2:	4610      	movne	r0, r2
   b91a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b91a8:	bf1c      	itt	ne
   b91aa:	460b      	movne	r3, r1
   b91ac:	4602      	movne	r2, r0
   b91ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b91b2:	bf06      	itte	eq
   b91b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b91b8:	ea91 0f03 	teqeq	r1, r3
   b91bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b91c0:	bd30      	pop	{r4, r5, pc}
   b91c2:	bf00      	nop

000b91c4 <__aeabi_ui2d>:
   b91c4:	f090 0f00 	teq	r0, #0
   b91c8:	bf04      	itt	eq
   b91ca:	2100      	moveq	r1, #0
   b91cc:	4770      	bxeq	lr
   b91ce:	b530      	push	{r4, r5, lr}
   b91d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b91d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b91d8:	f04f 0500 	mov.w	r5, #0
   b91dc:	f04f 0100 	mov.w	r1, #0
   b91e0:	e750      	b.n	b9084 <__adddf3+0x138>
   b91e2:	bf00      	nop

000b91e4 <__aeabi_i2d>:
   b91e4:	f090 0f00 	teq	r0, #0
   b91e8:	bf04      	itt	eq
   b91ea:	2100      	moveq	r1, #0
   b91ec:	4770      	bxeq	lr
   b91ee:	b530      	push	{r4, r5, lr}
   b91f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b91f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b91f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b91fc:	bf48      	it	mi
   b91fe:	4240      	negmi	r0, r0
   b9200:	f04f 0100 	mov.w	r1, #0
   b9204:	e73e      	b.n	b9084 <__adddf3+0x138>
   b9206:	bf00      	nop

000b9208 <__aeabi_f2d>:
   b9208:	0042      	lsls	r2, r0, #1
   b920a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b920e:	ea4f 0131 	mov.w	r1, r1, rrx
   b9212:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9216:	bf1f      	itttt	ne
   b9218:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b921c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9220:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9224:	4770      	bxne	lr
   b9226:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b922a:	bf08      	it	eq
   b922c:	4770      	bxeq	lr
   b922e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9232:	bf04      	itt	eq
   b9234:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9238:	4770      	bxeq	lr
   b923a:	b530      	push	{r4, r5, lr}
   b923c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9248:	e71c      	b.n	b9084 <__adddf3+0x138>
   b924a:	bf00      	nop

000b924c <__aeabi_ul2d>:
   b924c:	ea50 0201 	orrs.w	r2, r0, r1
   b9250:	bf08      	it	eq
   b9252:	4770      	bxeq	lr
   b9254:	b530      	push	{r4, r5, lr}
   b9256:	f04f 0500 	mov.w	r5, #0
   b925a:	e00a      	b.n	b9272 <__aeabi_l2d+0x16>

000b925c <__aeabi_l2d>:
   b925c:	ea50 0201 	orrs.w	r2, r0, r1
   b9260:	bf08      	it	eq
   b9262:	4770      	bxeq	lr
   b9264:	b530      	push	{r4, r5, lr}
   b9266:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b926a:	d502      	bpl.n	b9272 <__aeabi_l2d+0x16>
   b926c:	4240      	negs	r0, r0
   b926e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9272:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9276:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b927a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b927e:	f43f aed8 	beq.w	b9032 <__adddf3+0xe6>
   b9282:	f04f 0203 	mov.w	r2, #3
   b9286:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b928a:	bf18      	it	ne
   b928c:	3203      	addne	r2, #3
   b928e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9292:	bf18      	it	ne
   b9294:	3203      	addne	r2, #3
   b9296:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b929a:	f1c2 0320 	rsb	r3, r2, #32
   b929e:	fa00 fc03 	lsl.w	ip, r0, r3
   b92a2:	fa20 f002 	lsr.w	r0, r0, r2
   b92a6:	fa01 fe03 	lsl.w	lr, r1, r3
   b92aa:	ea40 000e 	orr.w	r0, r0, lr
   b92ae:	fa21 f102 	lsr.w	r1, r1, r2
   b92b2:	4414      	add	r4, r2
   b92b4:	e6bd      	b.n	b9032 <__adddf3+0xe6>
   b92b6:	bf00      	nop

000b92b8 <__aeabi_dmul>:
   b92b8:	b570      	push	{r4, r5, r6, lr}
   b92ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b92be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b92c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b92c6:	bf1d      	ittte	ne
   b92c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b92cc:	ea94 0f0c 	teqne	r4, ip
   b92d0:	ea95 0f0c 	teqne	r5, ip
   b92d4:	f000 f8de 	bleq	b9494 <__aeabi_dmul+0x1dc>
   b92d8:	442c      	add	r4, r5
   b92da:	ea81 0603 	eor.w	r6, r1, r3
   b92de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b92e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b92e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b92ea:	bf18      	it	ne
   b92ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b92f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b92f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b92f8:	d038      	beq.n	b936c <__aeabi_dmul+0xb4>
   b92fa:	fba0 ce02 	umull	ip, lr, r0, r2
   b92fe:	f04f 0500 	mov.w	r5, #0
   b9302:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9306:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b930a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b930e:	f04f 0600 	mov.w	r6, #0
   b9312:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9316:	f09c 0f00 	teq	ip, #0
   b931a:	bf18      	it	ne
   b931c:	f04e 0e01 	orrne.w	lr, lr, #1
   b9320:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9324:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9328:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b932c:	d204      	bcs.n	b9338 <__aeabi_dmul+0x80>
   b932e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9332:	416d      	adcs	r5, r5
   b9334:	eb46 0606 	adc.w	r6, r6, r6
   b9338:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b933c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9340:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9344:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9348:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b934c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9350:	bf88      	it	hi
   b9352:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9356:	d81e      	bhi.n	b9396 <__aeabi_dmul+0xde>
   b9358:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b935c:	bf08      	it	eq
   b935e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9362:	f150 0000 	adcs.w	r0, r0, #0
   b9366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b936a:	bd70      	pop	{r4, r5, r6, pc}
   b936c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9370:	ea46 0101 	orr.w	r1, r6, r1
   b9374:	ea40 0002 	orr.w	r0, r0, r2
   b9378:	ea81 0103 	eor.w	r1, r1, r3
   b937c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9380:	bfc2      	ittt	gt
   b9382:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9386:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b938a:	bd70      	popgt	{r4, r5, r6, pc}
   b938c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9390:	f04f 0e00 	mov.w	lr, #0
   b9394:	3c01      	subs	r4, #1
   b9396:	f300 80ab 	bgt.w	b94f0 <__aeabi_dmul+0x238>
   b939a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b939e:	bfde      	ittt	le
   b93a0:	2000      	movle	r0, #0
   b93a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b93a6:	bd70      	pople	{r4, r5, r6, pc}
   b93a8:	f1c4 0400 	rsb	r4, r4, #0
   b93ac:	3c20      	subs	r4, #32
   b93ae:	da35      	bge.n	b941c <__aeabi_dmul+0x164>
   b93b0:	340c      	adds	r4, #12
   b93b2:	dc1b      	bgt.n	b93ec <__aeabi_dmul+0x134>
   b93b4:	f104 0414 	add.w	r4, r4, #20
   b93b8:	f1c4 0520 	rsb	r5, r4, #32
   b93bc:	fa00 f305 	lsl.w	r3, r0, r5
   b93c0:	fa20 f004 	lsr.w	r0, r0, r4
   b93c4:	fa01 f205 	lsl.w	r2, r1, r5
   b93c8:	ea40 0002 	orr.w	r0, r0, r2
   b93cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b93d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b93d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b93d8:	fa21 f604 	lsr.w	r6, r1, r4
   b93dc:	eb42 0106 	adc.w	r1, r2, r6
   b93e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b93e4:	bf08      	it	eq
   b93e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b93ea:	bd70      	pop	{r4, r5, r6, pc}
   b93ec:	f1c4 040c 	rsb	r4, r4, #12
   b93f0:	f1c4 0520 	rsb	r5, r4, #32
   b93f4:	fa00 f304 	lsl.w	r3, r0, r4
   b93f8:	fa20 f005 	lsr.w	r0, r0, r5
   b93fc:	fa01 f204 	lsl.w	r2, r1, r4
   b9400:	ea40 0002 	orr.w	r0, r0, r2
   b9404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9408:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b940c:	f141 0100 	adc.w	r1, r1, #0
   b9410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9414:	bf08      	it	eq
   b9416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b941a:	bd70      	pop	{r4, r5, r6, pc}
   b941c:	f1c4 0520 	rsb	r5, r4, #32
   b9420:	fa00 f205 	lsl.w	r2, r0, r5
   b9424:	ea4e 0e02 	orr.w	lr, lr, r2
   b9428:	fa20 f304 	lsr.w	r3, r0, r4
   b942c:	fa01 f205 	lsl.w	r2, r1, r5
   b9430:	ea43 0302 	orr.w	r3, r3, r2
   b9434:	fa21 f004 	lsr.w	r0, r1, r4
   b9438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b943c:	fa21 f204 	lsr.w	r2, r1, r4
   b9440:	ea20 0002 	bic.w	r0, r0, r2
   b9444:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9448:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b944c:	bf08      	it	eq
   b944e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9452:	bd70      	pop	{r4, r5, r6, pc}
   b9454:	f094 0f00 	teq	r4, #0
   b9458:	d10f      	bne.n	b947a <__aeabi_dmul+0x1c2>
   b945a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b945e:	0040      	lsls	r0, r0, #1
   b9460:	eb41 0101 	adc.w	r1, r1, r1
   b9464:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9468:	bf08      	it	eq
   b946a:	3c01      	subeq	r4, #1
   b946c:	d0f7      	beq.n	b945e <__aeabi_dmul+0x1a6>
   b946e:	ea41 0106 	orr.w	r1, r1, r6
   b9472:	f095 0f00 	teq	r5, #0
   b9476:	bf18      	it	ne
   b9478:	4770      	bxne	lr
   b947a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b947e:	0052      	lsls	r2, r2, #1
   b9480:	eb43 0303 	adc.w	r3, r3, r3
   b9484:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9488:	bf08      	it	eq
   b948a:	3d01      	subeq	r5, #1
   b948c:	d0f7      	beq.n	b947e <__aeabi_dmul+0x1c6>
   b948e:	ea43 0306 	orr.w	r3, r3, r6
   b9492:	4770      	bx	lr
   b9494:	ea94 0f0c 	teq	r4, ip
   b9498:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b949c:	bf18      	it	ne
   b949e:	ea95 0f0c 	teqne	r5, ip
   b94a2:	d00c      	beq.n	b94be <__aeabi_dmul+0x206>
   b94a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b94a8:	bf18      	it	ne
   b94aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b94ae:	d1d1      	bne.n	b9454 <__aeabi_dmul+0x19c>
   b94b0:	ea81 0103 	eor.w	r1, r1, r3
   b94b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b94b8:	f04f 0000 	mov.w	r0, #0
   b94bc:	bd70      	pop	{r4, r5, r6, pc}
   b94be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b94c2:	bf06      	itte	eq
   b94c4:	4610      	moveq	r0, r2
   b94c6:	4619      	moveq	r1, r3
   b94c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b94cc:	d019      	beq.n	b9502 <__aeabi_dmul+0x24a>
   b94ce:	ea94 0f0c 	teq	r4, ip
   b94d2:	d102      	bne.n	b94da <__aeabi_dmul+0x222>
   b94d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b94d8:	d113      	bne.n	b9502 <__aeabi_dmul+0x24a>
   b94da:	ea95 0f0c 	teq	r5, ip
   b94de:	d105      	bne.n	b94ec <__aeabi_dmul+0x234>
   b94e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b94e4:	bf1c      	itt	ne
   b94e6:	4610      	movne	r0, r2
   b94e8:	4619      	movne	r1, r3
   b94ea:	d10a      	bne.n	b9502 <__aeabi_dmul+0x24a>
   b94ec:	ea81 0103 	eor.w	r1, r1, r3
   b94f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b94f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b94f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b94fc:	f04f 0000 	mov.w	r0, #0
   b9500:	bd70      	pop	{r4, r5, r6, pc}
   b9502:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9506:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b950a:	bd70      	pop	{r4, r5, r6, pc}

000b950c <__aeabi_ddiv>:
   b950c:	b570      	push	{r4, r5, r6, lr}
   b950e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b951a:	bf1d      	ittte	ne
   b951c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9520:	ea94 0f0c 	teqne	r4, ip
   b9524:	ea95 0f0c 	teqne	r5, ip
   b9528:	f000 f8a7 	bleq	b967a <__aeabi_ddiv+0x16e>
   b952c:	eba4 0405 	sub.w	r4, r4, r5
   b9530:	ea81 0e03 	eor.w	lr, r1, r3
   b9534:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9538:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b953c:	f000 8088 	beq.w	b9650 <__aeabi_ddiv+0x144>
   b9540:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9544:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9548:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b954c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9550:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9554:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9558:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b955c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9560:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9564:	429d      	cmp	r5, r3
   b9566:	bf08      	it	eq
   b9568:	4296      	cmpeq	r6, r2
   b956a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b956e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9572:	d202      	bcs.n	b957a <__aeabi_ddiv+0x6e>
   b9574:	085b      	lsrs	r3, r3, #1
   b9576:	ea4f 0232 	mov.w	r2, r2, rrx
   b957a:	1ab6      	subs	r6, r6, r2
   b957c:	eb65 0503 	sbc.w	r5, r5, r3
   b9580:	085b      	lsrs	r3, r3, #1
   b9582:	ea4f 0232 	mov.w	r2, r2, rrx
   b9586:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b958a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b958e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9592:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9596:	bf22      	ittt	cs
   b9598:	1ab6      	subcs	r6, r6, r2
   b959a:	4675      	movcs	r5, lr
   b959c:	ea40 000c 	orrcs.w	r0, r0, ip
   b95a0:	085b      	lsrs	r3, r3, #1
   b95a2:	ea4f 0232 	mov.w	r2, r2, rrx
   b95a6:	ebb6 0e02 	subs.w	lr, r6, r2
   b95aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b95ae:	bf22      	ittt	cs
   b95b0:	1ab6      	subcs	r6, r6, r2
   b95b2:	4675      	movcs	r5, lr
   b95b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b95b8:	085b      	lsrs	r3, r3, #1
   b95ba:	ea4f 0232 	mov.w	r2, r2, rrx
   b95be:	ebb6 0e02 	subs.w	lr, r6, r2
   b95c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b95c6:	bf22      	ittt	cs
   b95c8:	1ab6      	subcs	r6, r6, r2
   b95ca:	4675      	movcs	r5, lr
   b95cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b95d0:	085b      	lsrs	r3, r3, #1
   b95d2:	ea4f 0232 	mov.w	r2, r2, rrx
   b95d6:	ebb6 0e02 	subs.w	lr, r6, r2
   b95da:	eb75 0e03 	sbcs.w	lr, r5, r3
   b95de:	bf22      	ittt	cs
   b95e0:	1ab6      	subcs	r6, r6, r2
   b95e2:	4675      	movcs	r5, lr
   b95e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b95e8:	ea55 0e06 	orrs.w	lr, r5, r6
   b95ec:	d018      	beq.n	b9620 <__aeabi_ddiv+0x114>
   b95ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b95f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b95f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b95fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b95fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9602:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9606:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b960a:	d1c0      	bne.n	b958e <__aeabi_ddiv+0x82>
   b960c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9610:	d10b      	bne.n	b962a <__aeabi_ddiv+0x11e>
   b9612:	ea41 0100 	orr.w	r1, r1, r0
   b9616:	f04f 0000 	mov.w	r0, #0
   b961a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b961e:	e7b6      	b.n	b958e <__aeabi_ddiv+0x82>
   b9620:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9624:	bf04      	itt	eq
   b9626:	4301      	orreq	r1, r0
   b9628:	2000      	moveq	r0, #0
   b962a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b962e:	bf88      	it	hi
   b9630:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9634:	f63f aeaf 	bhi.w	b9396 <__aeabi_dmul+0xde>
   b9638:	ebb5 0c03 	subs.w	ip, r5, r3
   b963c:	bf04      	itt	eq
   b963e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9646:	f150 0000 	adcs.w	r0, r0, #0
   b964a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b964e:	bd70      	pop	{r4, r5, r6, pc}
   b9650:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9654:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9658:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b965c:	bfc2      	ittt	gt
   b965e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9666:	bd70      	popgt	{r4, r5, r6, pc}
   b9668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b966c:	f04f 0e00 	mov.w	lr, #0
   b9670:	3c01      	subs	r4, #1
   b9672:	e690      	b.n	b9396 <__aeabi_dmul+0xde>
   b9674:	ea45 0e06 	orr.w	lr, r5, r6
   b9678:	e68d      	b.n	b9396 <__aeabi_dmul+0xde>
   b967a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b967e:	ea94 0f0c 	teq	r4, ip
   b9682:	bf08      	it	eq
   b9684:	ea95 0f0c 	teqeq	r5, ip
   b9688:	f43f af3b 	beq.w	b9502 <__aeabi_dmul+0x24a>
   b968c:	ea94 0f0c 	teq	r4, ip
   b9690:	d10a      	bne.n	b96a8 <__aeabi_ddiv+0x19c>
   b9692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9696:	f47f af34 	bne.w	b9502 <__aeabi_dmul+0x24a>
   b969a:	ea95 0f0c 	teq	r5, ip
   b969e:	f47f af25 	bne.w	b94ec <__aeabi_dmul+0x234>
   b96a2:	4610      	mov	r0, r2
   b96a4:	4619      	mov	r1, r3
   b96a6:	e72c      	b.n	b9502 <__aeabi_dmul+0x24a>
   b96a8:	ea95 0f0c 	teq	r5, ip
   b96ac:	d106      	bne.n	b96bc <__aeabi_ddiv+0x1b0>
   b96ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b96b2:	f43f aefd 	beq.w	b94b0 <__aeabi_dmul+0x1f8>
   b96b6:	4610      	mov	r0, r2
   b96b8:	4619      	mov	r1, r3
   b96ba:	e722      	b.n	b9502 <__aeabi_dmul+0x24a>
   b96bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b96c0:	bf18      	it	ne
   b96c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b96c6:	f47f aec5 	bne.w	b9454 <__aeabi_dmul+0x19c>
   b96ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b96ce:	f47f af0d 	bne.w	b94ec <__aeabi_dmul+0x234>
   b96d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b96d6:	f47f aeeb 	bne.w	b94b0 <__aeabi_dmul+0x1f8>
   b96da:	e712      	b.n	b9502 <__aeabi_dmul+0x24a>

000b96dc <__aeabi_d2f>:
   b96dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b96e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b96e4:	bf24      	itt	cs
   b96e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b96ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b96ee:	d90d      	bls.n	b970c <__aeabi_d2f+0x30>
   b96f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b96f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b96f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b96fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9700:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b9704:	bf08      	it	eq
   b9706:	f020 0001 	biceq.w	r0, r0, #1
   b970a:	4770      	bx	lr
   b970c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9710:	d121      	bne.n	b9756 <__aeabi_d2f+0x7a>
   b9712:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9716:	bfbc      	itt	lt
   b9718:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b971c:	4770      	bxlt	lr
   b971e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9722:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9726:	f1c2 0218 	rsb	r2, r2, #24
   b972a:	f1c2 0c20 	rsb	ip, r2, #32
   b972e:	fa10 f30c 	lsls.w	r3, r0, ip
   b9732:	fa20 f002 	lsr.w	r0, r0, r2
   b9736:	bf18      	it	ne
   b9738:	f040 0001 	orrne.w	r0, r0, #1
   b973c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9740:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b9744:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9748:	ea40 000c 	orr.w	r0, r0, ip
   b974c:	fa23 f302 	lsr.w	r3, r3, r2
   b9750:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b9754:	e7cc      	b.n	b96f0 <__aeabi_d2f+0x14>
   b9756:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b975a:	d107      	bne.n	b976c <__aeabi_d2f+0x90>
   b975c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b9760:	bf1e      	ittt	ne
   b9762:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b9766:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b976a:	4770      	bxne	lr
   b976c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9770:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9774:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9778:	4770      	bx	lr
   b977a:	bf00      	nop

000b977c <atexit>:
   b977c:	2300      	movs	r3, #0
   b977e:	4601      	mov	r1, r0
   b9780:	461a      	mov	r2, r3
   b9782:	4618      	mov	r0, r3
   b9784:	f000 b97a 	b.w	b9a7c <__register_exitproc>

000b9788 <isprint>:
   b9788:	4b02      	ldr	r3, [pc, #8]	; (b9794 <isprint+0xc>)
   b978a:	4418      	add	r0, r3
   b978c:	7840      	ldrb	r0, [r0, #1]
   b978e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b9792:	4770      	bx	lr
   b9794:	000ba089 	.word	0x000ba089

000b9798 <memcmp>:
   b9798:	b510      	push	{r4, lr}
   b979a:	3901      	subs	r1, #1
   b979c:	4402      	add	r2, r0
   b979e:	4290      	cmp	r0, r2
   b97a0:	d101      	bne.n	b97a6 <memcmp+0xe>
   b97a2:	2000      	movs	r0, #0
   b97a4:	e005      	b.n	b97b2 <memcmp+0x1a>
   b97a6:	7803      	ldrb	r3, [r0, #0]
   b97a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b97ac:	42a3      	cmp	r3, r4
   b97ae:	d001      	beq.n	b97b4 <memcmp+0x1c>
   b97b0:	1b18      	subs	r0, r3, r4
   b97b2:	bd10      	pop	{r4, pc}
   b97b4:	3001      	adds	r0, #1
   b97b6:	e7f2      	b.n	b979e <memcmp+0x6>

000b97b8 <memcpy>:
   b97b8:	440a      	add	r2, r1
   b97ba:	4291      	cmp	r1, r2
   b97bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b97c0:	d100      	bne.n	b97c4 <memcpy+0xc>
   b97c2:	4770      	bx	lr
   b97c4:	b510      	push	{r4, lr}
   b97c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b97ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   b97ce:	4291      	cmp	r1, r2
   b97d0:	d1f9      	bne.n	b97c6 <memcpy+0xe>
   b97d2:	bd10      	pop	{r4, pc}

000b97d4 <memmove>:
   b97d4:	4288      	cmp	r0, r1
   b97d6:	b510      	push	{r4, lr}
   b97d8:	eb01 0402 	add.w	r4, r1, r2
   b97dc:	d902      	bls.n	b97e4 <memmove+0x10>
   b97de:	4284      	cmp	r4, r0
   b97e0:	4623      	mov	r3, r4
   b97e2:	d807      	bhi.n	b97f4 <memmove+0x20>
   b97e4:	1e43      	subs	r3, r0, #1
   b97e6:	42a1      	cmp	r1, r4
   b97e8:	d008      	beq.n	b97fc <memmove+0x28>
   b97ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   b97ee:	f803 2f01 	strb.w	r2, [r3, #1]!
   b97f2:	e7f8      	b.n	b97e6 <memmove+0x12>
   b97f4:	4402      	add	r2, r0
   b97f6:	4601      	mov	r1, r0
   b97f8:	428a      	cmp	r2, r1
   b97fa:	d100      	bne.n	b97fe <memmove+0x2a>
   b97fc:	bd10      	pop	{r4, pc}
   b97fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9802:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9806:	e7f7      	b.n	b97f8 <memmove+0x24>

000b9808 <memset>:
   b9808:	4402      	add	r2, r0
   b980a:	4603      	mov	r3, r0
   b980c:	4293      	cmp	r3, r2
   b980e:	d100      	bne.n	b9812 <memset+0xa>
   b9810:	4770      	bx	lr
   b9812:	f803 1b01 	strb.w	r1, [r3], #1
   b9816:	e7f9      	b.n	b980c <memset+0x4>

000b9818 <srand>:
   b9818:	b538      	push	{r3, r4, r5, lr}
   b981a:	4b10      	ldr	r3, [pc, #64]	; (b985c <srand+0x44>)
   b981c:	681d      	ldr	r5, [r3, #0]
   b981e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9820:	4604      	mov	r4, r0
   b9822:	b9b3      	cbnz	r3, b9852 <srand+0x3a>
   b9824:	2018      	movs	r0, #24
   b9826:	f7fc fe6b 	bl	b6500 <malloc>
   b982a:	4602      	mov	r2, r0
   b982c:	63a8      	str	r0, [r5, #56]	; 0x38
   b982e:	b920      	cbnz	r0, b983a <srand+0x22>
   b9830:	4b0b      	ldr	r3, [pc, #44]	; (b9860 <srand+0x48>)
   b9832:	480c      	ldr	r0, [pc, #48]	; (b9864 <srand+0x4c>)
   b9834:	2142      	movs	r1, #66	; 0x42
   b9836:	f7fc fea3 	bl	b6580 <__assert_func>
   b983a:	490b      	ldr	r1, [pc, #44]	; (b9868 <srand+0x50>)
   b983c:	4b0b      	ldr	r3, [pc, #44]	; (b986c <srand+0x54>)
   b983e:	e9c0 1300 	strd	r1, r3, [r0]
   b9842:	4b0b      	ldr	r3, [pc, #44]	; (b9870 <srand+0x58>)
   b9844:	6083      	str	r3, [r0, #8]
   b9846:	230b      	movs	r3, #11
   b9848:	8183      	strh	r3, [r0, #12]
   b984a:	2100      	movs	r1, #0
   b984c:	2001      	movs	r0, #1
   b984e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9852:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9854:	2200      	movs	r2, #0
   b9856:	611c      	str	r4, [r3, #16]
   b9858:	615a      	str	r2, [r3, #20]
   b985a:	bd38      	pop	{r3, r4, r5, pc}
   b985c:	2003dd44 	.word	0x2003dd44
   b9860:	000ba019 	.word	0x000ba019
   b9864:	000ba030 	.word	0x000ba030
   b9868:	abcd330e 	.word	0xabcd330e
   b986c:	e66d1234 	.word	0xe66d1234
   b9870:	0005deec 	.word	0x0005deec

000b9874 <strchr>:
   b9874:	b2c9      	uxtb	r1, r1
   b9876:	4603      	mov	r3, r0
   b9878:	f810 2b01 	ldrb.w	r2, [r0], #1
   b987c:	b11a      	cbz	r2, b9886 <strchr+0x12>
   b987e:	428a      	cmp	r2, r1
   b9880:	d1f9      	bne.n	b9876 <strchr+0x2>
   b9882:	4618      	mov	r0, r3
   b9884:	4770      	bx	lr
   b9886:	2900      	cmp	r1, #0
   b9888:	bf18      	it	ne
   b988a:	2300      	movne	r3, #0
   b988c:	e7f9      	b.n	b9882 <strchr+0xe>

000b988e <strchrnul>:
   b988e:	b510      	push	{r4, lr}
   b9890:	4604      	mov	r4, r0
   b9892:	f7ff ffef 	bl	b9874 <strchr>
   b9896:	b918      	cbnz	r0, b98a0 <strchrnul+0x12>
   b9898:	4620      	mov	r0, r4
   b989a:	f000 f832 	bl	b9902 <strlen>
   b989e:	4420      	add	r0, r4
   b98a0:	bd10      	pop	{r4, pc}

000b98a2 <strcmp>:
   b98a2:	f810 2b01 	ldrb.w	r2, [r0], #1
   b98a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   b98aa:	2a01      	cmp	r2, #1
   b98ac:	bf28      	it	cs
   b98ae:	429a      	cmpcs	r2, r3
   b98b0:	d0f7      	beq.n	b98a2 <strcmp>
   b98b2:	1ad0      	subs	r0, r2, r3
   b98b4:	4770      	bx	lr

000b98b6 <strcpy>:
   b98b6:	4603      	mov	r3, r0
   b98b8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b98bc:	f803 2b01 	strb.w	r2, [r3], #1
   b98c0:	2a00      	cmp	r2, #0
   b98c2:	d1f9      	bne.n	b98b8 <strcpy+0x2>
   b98c4:	4770      	bx	lr
	...

000b98c8 <strdup>:
   b98c8:	4b02      	ldr	r3, [pc, #8]	; (b98d4 <strdup+0xc>)
   b98ca:	4601      	mov	r1, r0
   b98cc:	6818      	ldr	r0, [r3, #0]
   b98ce:	f000 b803 	b.w	b98d8 <_strdup_r>
   b98d2:	bf00      	nop
   b98d4:	2003dd44 	.word	0x2003dd44

000b98d8 <_strdup_r>:
   b98d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98da:	4604      	mov	r4, r0
   b98dc:	4608      	mov	r0, r1
   b98de:	460d      	mov	r5, r1
   b98e0:	f000 f80f 	bl	b9902 <strlen>
   b98e4:	1c42      	adds	r2, r0, #1
   b98e6:	4611      	mov	r1, r2
   b98e8:	4620      	mov	r0, r4
   b98ea:	9201      	str	r2, [sp, #4]
   b98ec:	f7fc fe38 	bl	b6560 <_malloc_r>
   b98f0:	4604      	mov	r4, r0
   b98f2:	b118      	cbz	r0, b98fc <_strdup_r+0x24>
   b98f4:	9a01      	ldr	r2, [sp, #4]
   b98f6:	4629      	mov	r1, r5
   b98f8:	f7ff ff5e 	bl	b97b8 <memcpy>
   b98fc:	4620      	mov	r0, r4
   b98fe:	b003      	add	sp, #12
   b9900:	bd30      	pop	{r4, r5, pc}

000b9902 <strlen>:
   b9902:	4603      	mov	r3, r0
   b9904:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9908:	2a00      	cmp	r2, #0
   b990a:	d1fb      	bne.n	b9904 <strlen+0x2>
   b990c:	1a18      	subs	r0, r3, r0
   b990e:	3801      	subs	r0, #1
   b9910:	4770      	bx	lr

000b9912 <strncmp>:
   b9912:	b510      	push	{r4, lr}
   b9914:	b17a      	cbz	r2, b9936 <strncmp+0x24>
   b9916:	4603      	mov	r3, r0
   b9918:	3901      	subs	r1, #1
   b991a:	1884      	adds	r4, r0, r2
   b991c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9920:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9924:	4290      	cmp	r0, r2
   b9926:	d101      	bne.n	b992c <strncmp+0x1a>
   b9928:	42a3      	cmp	r3, r4
   b992a:	d101      	bne.n	b9930 <strncmp+0x1e>
   b992c:	1a80      	subs	r0, r0, r2
   b992e:	bd10      	pop	{r4, pc}
   b9930:	2800      	cmp	r0, #0
   b9932:	d1f3      	bne.n	b991c <strncmp+0xa>
   b9934:	e7fa      	b.n	b992c <strncmp+0x1a>
   b9936:	4610      	mov	r0, r2
   b9938:	e7f9      	b.n	b992e <strncmp+0x1c>

000b993a <strrchr>:
   b993a:	b538      	push	{r3, r4, r5, lr}
   b993c:	4603      	mov	r3, r0
   b993e:	460c      	mov	r4, r1
   b9940:	b969      	cbnz	r1, b995e <strrchr+0x24>
   b9942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9946:	f7ff bf95 	b.w	b9874 <strchr>
   b994a:	1c43      	adds	r3, r0, #1
   b994c:	4605      	mov	r5, r0
   b994e:	4621      	mov	r1, r4
   b9950:	4618      	mov	r0, r3
   b9952:	f7ff ff8f 	bl	b9874 <strchr>
   b9956:	2800      	cmp	r0, #0
   b9958:	d1f7      	bne.n	b994a <strrchr+0x10>
   b995a:	4628      	mov	r0, r5
   b995c:	bd38      	pop	{r3, r4, r5, pc}
   b995e:	2500      	movs	r5, #0
   b9960:	e7f5      	b.n	b994e <strrchr+0x14>
	...

000b9964 <_strtol_l.constprop.0>:
   b9964:	2b01      	cmp	r3, #1
   b9966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b996a:	d001      	beq.n	b9970 <_strtol_l.constprop.0+0xc>
   b996c:	2b24      	cmp	r3, #36	; 0x24
   b996e:	d906      	bls.n	b997e <_strtol_l.constprop.0+0x1a>
   b9970:	f7fc fdfe 	bl	b6570 <__errno>
   b9974:	2316      	movs	r3, #22
   b9976:	6003      	str	r3, [r0, #0]
   b9978:	2000      	movs	r0, #0
   b997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b997e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9a64 <_strtol_l.constprop.0+0x100>
   b9982:	460d      	mov	r5, r1
   b9984:	462e      	mov	r6, r5
   b9986:	f815 4b01 	ldrb.w	r4, [r5], #1
   b998a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b998e:	f017 0708 	ands.w	r7, r7, #8
   b9992:	d1f7      	bne.n	b9984 <_strtol_l.constprop.0+0x20>
   b9994:	2c2d      	cmp	r4, #45	; 0x2d
   b9996:	d132      	bne.n	b99fe <_strtol_l.constprop.0+0x9a>
   b9998:	782c      	ldrb	r4, [r5, #0]
   b999a:	2701      	movs	r7, #1
   b999c:	1cb5      	adds	r5, r6, #2
   b999e:	2b00      	cmp	r3, #0
   b99a0:	d05b      	beq.n	b9a5a <_strtol_l.constprop.0+0xf6>
   b99a2:	2b10      	cmp	r3, #16
   b99a4:	d109      	bne.n	b99ba <_strtol_l.constprop.0+0x56>
   b99a6:	2c30      	cmp	r4, #48	; 0x30
   b99a8:	d107      	bne.n	b99ba <_strtol_l.constprop.0+0x56>
   b99aa:	782c      	ldrb	r4, [r5, #0]
   b99ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b99b0:	2c58      	cmp	r4, #88	; 0x58
   b99b2:	d14d      	bne.n	b9a50 <_strtol_l.constprop.0+0xec>
   b99b4:	786c      	ldrb	r4, [r5, #1]
   b99b6:	2310      	movs	r3, #16
   b99b8:	3502      	adds	r5, #2
   b99ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b99be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b99c2:	f04f 0c00 	mov.w	ip, #0
   b99c6:	fbb8 f9f3 	udiv	r9, r8, r3
   b99ca:	4666      	mov	r6, ip
   b99cc:	fb03 8a19 	mls	sl, r3, r9, r8
   b99d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b99d4:	f1be 0f09 	cmp.w	lr, #9
   b99d8:	d816      	bhi.n	b9a08 <_strtol_l.constprop.0+0xa4>
   b99da:	4674      	mov	r4, lr
   b99dc:	42a3      	cmp	r3, r4
   b99de:	dd24      	ble.n	b9a2a <_strtol_l.constprop.0+0xc6>
   b99e0:	f1bc 0f00 	cmp.w	ip, #0
   b99e4:	db1e      	blt.n	b9a24 <_strtol_l.constprop.0+0xc0>
   b99e6:	45b1      	cmp	r9, r6
   b99e8:	d31c      	bcc.n	b9a24 <_strtol_l.constprop.0+0xc0>
   b99ea:	d101      	bne.n	b99f0 <_strtol_l.constprop.0+0x8c>
   b99ec:	45a2      	cmp	sl, r4
   b99ee:	db19      	blt.n	b9a24 <_strtol_l.constprop.0+0xc0>
   b99f0:	fb06 4603 	mla	r6, r6, r3, r4
   b99f4:	f04f 0c01 	mov.w	ip, #1
   b99f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b99fc:	e7e8      	b.n	b99d0 <_strtol_l.constprop.0+0x6c>
   b99fe:	2c2b      	cmp	r4, #43	; 0x2b
   b9a00:	bf04      	itt	eq
   b9a02:	782c      	ldrbeq	r4, [r5, #0]
   b9a04:	1cb5      	addeq	r5, r6, #2
   b9a06:	e7ca      	b.n	b999e <_strtol_l.constprop.0+0x3a>
   b9a08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9a0c:	f1be 0f19 	cmp.w	lr, #25
   b9a10:	d801      	bhi.n	b9a16 <_strtol_l.constprop.0+0xb2>
   b9a12:	3c37      	subs	r4, #55	; 0x37
   b9a14:	e7e2      	b.n	b99dc <_strtol_l.constprop.0+0x78>
   b9a16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9a1a:	f1be 0f19 	cmp.w	lr, #25
   b9a1e:	d804      	bhi.n	b9a2a <_strtol_l.constprop.0+0xc6>
   b9a20:	3c57      	subs	r4, #87	; 0x57
   b9a22:	e7db      	b.n	b99dc <_strtol_l.constprop.0+0x78>
   b9a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9a28:	e7e6      	b.n	b99f8 <_strtol_l.constprop.0+0x94>
   b9a2a:	f1bc 0f00 	cmp.w	ip, #0
   b9a2e:	da05      	bge.n	b9a3c <_strtol_l.constprop.0+0xd8>
   b9a30:	2322      	movs	r3, #34	; 0x22
   b9a32:	6003      	str	r3, [r0, #0]
   b9a34:	4646      	mov	r6, r8
   b9a36:	b942      	cbnz	r2, b9a4a <_strtol_l.constprop.0+0xe6>
   b9a38:	4630      	mov	r0, r6
   b9a3a:	e79e      	b.n	b997a <_strtol_l.constprop.0+0x16>
   b9a3c:	b107      	cbz	r7, b9a40 <_strtol_l.constprop.0+0xdc>
   b9a3e:	4276      	negs	r6, r6
   b9a40:	2a00      	cmp	r2, #0
   b9a42:	d0f9      	beq.n	b9a38 <_strtol_l.constprop.0+0xd4>
   b9a44:	f1bc 0f00 	cmp.w	ip, #0
   b9a48:	d000      	beq.n	b9a4c <_strtol_l.constprop.0+0xe8>
   b9a4a:	1e69      	subs	r1, r5, #1
   b9a4c:	6011      	str	r1, [r2, #0]
   b9a4e:	e7f3      	b.n	b9a38 <_strtol_l.constprop.0+0xd4>
   b9a50:	2430      	movs	r4, #48	; 0x30
   b9a52:	2b00      	cmp	r3, #0
   b9a54:	d1b1      	bne.n	b99ba <_strtol_l.constprop.0+0x56>
   b9a56:	2308      	movs	r3, #8
   b9a58:	e7af      	b.n	b99ba <_strtol_l.constprop.0+0x56>
   b9a5a:	2c30      	cmp	r4, #48	; 0x30
   b9a5c:	d0a5      	beq.n	b99aa <_strtol_l.constprop.0+0x46>
   b9a5e:	230a      	movs	r3, #10
   b9a60:	e7ab      	b.n	b99ba <_strtol_l.constprop.0+0x56>
   b9a62:	bf00      	nop
   b9a64:	000ba08a 	.word	0x000ba08a

000b9a68 <strtol>:
   b9a68:	4613      	mov	r3, r2
   b9a6a:	460a      	mov	r2, r1
   b9a6c:	4601      	mov	r1, r0
   b9a6e:	4802      	ldr	r0, [pc, #8]	; (b9a78 <strtol+0x10>)
   b9a70:	6800      	ldr	r0, [r0, #0]
   b9a72:	f7ff bf77 	b.w	b9964 <_strtol_l.constprop.0>
   b9a76:	bf00      	nop
   b9a78:	2003dd44 	.word	0x2003dd44

000b9a7c <__register_exitproc>:
   b9a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9a80:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9b3c <__register_exitproc+0xc0>
   b9a84:	4606      	mov	r6, r0
   b9a86:	f8d8 0000 	ldr.w	r0, [r8]
   b9a8a:	461f      	mov	r7, r3
   b9a8c:	460d      	mov	r5, r1
   b9a8e:	4691      	mov	r9, r2
   b9a90:	f000 f856 	bl	b9b40 <__retarget_lock_acquire_recursive>
   b9a94:	4b25      	ldr	r3, [pc, #148]	; (b9b2c <__register_exitproc+0xb0>)
   b9a96:	681c      	ldr	r4, [r3, #0]
   b9a98:	b934      	cbnz	r4, b9aa8 <__register_exitproc+0x2c>
   b9a9a:	4c25      	ldr	r4, [pc, #148]	; (b9b30 <__register_exitproc+0xb4>)
   b9a9c:	601c      	str	r4, [r3, #0]
   b9a9e:	4b25      	ldr	r3, [pc, #148]	; (b9b34 <__register_exitproc+0xb8>)
   b9aa0:	b113      	cbz	r3, b9aa8 <__register_exitproc+0x2c>
   b9aa2:	681b      	ldr	r3, [r3, #0]
   b9aa4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9aa8:	6863      	ldr	r3, [r4, #4]
   b9aaa:	2b1f      	cmp	r3, #31
   b9aac:	dd07      	ble.n	b9abe <__register_exitproc+0x42>
   b9aae:	f8d8 0000 	ldr.w	r0, [r8]
   b9ab2:	f000 f847 	bl	b9b44 <__retarget_lock_release_recursive>
   b9ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9abe:	b34e      	cbz	r6, b9b14 <__register_exitproc+0x98>
   b9ac0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9ac4:	b988      	cbnz	r0, b9aea <__register_exitproc+0x6e>
   b9ac6:	4b1c      	ldr	r3, [pc, #112]	; (b9b38 <__register_exitproc+0xbc>)
   b9ac8:	b923      	cbnz	r3, b9ad4 <__register_exitproc+0x58>
   b9aca:	f8d8 0000 	ldr.w	r0, [r8]
   b9ace:	f000 f838 	bl	b9b42 <__retarget_lock_release>
   b9ad2:	e7f0      	b.n	b9ab6 <__register_exitproc+0x3a>
   b9ad4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9ad8:	f7fc fd12 	bl	b6500 <malloc>
   b9adc:	2800      	cmp	r0, #0
   b9ade:	d0f4      	beq.n	b9aca <__register_exitproc+0x4e>
   b9ae0:	2300      	movs	r3, #0
   b9ae2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9ae6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9aea:	6863      	ldr	r3, [r4, #4]
   b9aec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9af0:	2201      	movs	r2, #1
   b9af2:	409a      	lsls	r2, r3
   b9af4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9af8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9afc:	4313      	orrs	r3, r2
   b9afe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9b02:	2e02      	cmp	r6, #2
   b9b04:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9b08:	bf02      	ittt	eq
   b9b0a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9b0e:	4313      	orreq	r3, r2
   b9b10:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9b14:	6863      	ldr	r3, [r4, #4]
   b9b16:	f8d8 0000 	ldr.w	r0, [r8]
   b9b1a:	1c5a      	adds	r2, r3, #1
   b9b1c:	3302      	adds	r3, #2
   b9b1e:	6062      	str	r2, [r4, #4]
   b9b20:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9b24:	f000 f80e 	bl	b9b44 <__retarget_lock_release_recursive>
   b9b28:	2000      	movs	r0, #0
   b9b2a:	e7c6      	b.n	b9aba <__register_exitproc+0x3e>
   b9b2c:	2003e7e8 	.word	0x2003e7e8
   b9b30:	2003e75c 	.word	0x2003e75c
   b9b34:	00000000 	.word	0x00000000
   b9b38:	000b6501 	.word	0x000b6501
   b9b3c:	2003dda8 	.word	0x2003dda8

000b9b40 <__retarget_lock_acquire_recursive>:
   b9b40:	4770      	bx	lr

000b9b42 <__retarget_lock_release>:
   b9b42:	4770      	bx	lr

000b9b44 <__retarget_lock_release_recursive>:
   b9b44:	4770      	bx	lr

000b9b46 <link_code_end>:
	...

000b9b48 <dynalib_user>:
   b9b48:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9b58:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9b68:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   b9b78:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   b9b88:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   b9b98:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   b9ba8:	2075 7325 4d20 444f 2545 3e75 4d00 7861     u %s MODE%u>.Max
   b9bb8:	6f62 6974 2078 6554 7473 5300 656c 7065     botix Test.Sleep
   b9bc8:	6e69 2067 6f66 2072 6925 2500 696c 252c     ing for %i.%li,%
   b9bd8:	352e 2c66 2e25 3230 2c66 2e25 3230 0066     .5f,%.02f,%.02f.
   b9be8:	6166 6c69 6465 7420 206f 706f 6e65 6320     failed to open c
   b9bf8:	7261 0064 6964 7473 6e61 6563 632e 7673     ard.distance.csv
   b9c08:	6f00 6570 696e 676e 6420 7369 6174 636e     .opening distanc
   b9c18:	2e65 7363 2076 6f66 2072 7277 7469 2065     e.csv for write 
   b9c28:	6166 6c69 6465 5400 7972 6e69 2067 6f74     failed.Trying to
   b9c38:	6320 6e6f 656e 7463 7000 6275 696c 6873      connect.publish
   b9c48:	6e69 2067 6164 6174 7000 6275 696c 6873     ing data.publish
   b9c58:	7220 7365 6c75 2074 6425 6d00 7861 7420      result %d.max t
   b9c68:	6d69 2065 6f66 2072 7570 6c62 7369 6968     ime for publishi
   b9c78:	676e 7220 6165 6863 6465 7720 7469 6f68     ng reached witho
   b9c88:	7475 7320 6375 6563 7373 203b 6f67 7420     ut success; go t
   b9c98:	206f 6c73 6565 0070 6f4e 2074 616d 2078     o sleep.Not max 
   b9ca8:	6974 656d 202c 7274 2079 6761 6961 206e     time, try again 
   b9cb8:	6f74 6320 6e6f 656e 7463 6120 646e 7020     to connect and p
   b9cc8:	6275 696c 6873 6700 696f 676e 7420 206f     ublish.going to 
   b9cd8:	6c73 6565 0070 6546 6c65 6e69 2067 6572     sleep.Feeling re
   b9ce8:	7473 656c 7373 0000                         stless..

000b9cf0 <_ZTVN8particle11SPISettingsE>:
	...
   b9cf8:	41bd 000b 40c9 000b 413b 000b               .A...@..;A..

000b9d04 <_ZTVN5spark10LogHandlerE>:
	...
   b9d14:	40a1 000b 40cb 000b                         .@...@..

000b9d1c <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9d24:	4159 000b 418d 000b 7fcd 000b 40cd 000b     YA...A.......@..

000b9d34 <_ZTV4File>:
	...
   b9d3c:	40ef 000b 4149 000b 4123 000b 411d 000b     .@..IA..#A...A..
   b9d4c:	40d5 000b 40fd 000b 40f7 000b 40f1 000b     .@...@...@...@..
   b9d5c:	6177 6574 4c72 7665 6c65 0000               waterLevel..

000b9d68 <_ZTVN5spark13CellularClassE>:
	...
   b9d70:	66cf 000b 66c5 000b 66bb 000b 6671 000b     .f...f...f..qf..
   b9d80:	66af 000b 66a3 000b 8325 000b 832d 000b     .f...f..%...-...
   b9d90:	6697 000b 668f 000b 6685 000b 667b 000b     .f...f...f..{f..
   b9da0:	835d 000b                                   ]...

000b9da4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9dac:	6709 000b 670f 000b 674d 000b 671d 000b     .g...g..Mg...g..
   b9dbc:	670b 000b                                   .g..

000b9dc0 <_ZTVN5spark13EthernetClassE>:
	...
   b9dc8:	6c97 000b 6c8d 000b 6c83 000b 6c79 000b     .l...l...l..yl..
   b9dd8:	6c6d 000b 6c61 000b 8325 000b 832d 000b     ml..al..%...-...
   b9de8:	6c55 000b 6c4d 000b 6c43 000b 6c39 000b     Ul..Ml..Cl..9l..
   b9df8:	835d 000b                                   ]...

000b9dfc <_ZTV7TwoWire>:
	...
   b9e04:	6e3d 000b 6e87 000b 6e5f 000b 6e3f 000b     =n...n.._n..?n..
   b9e14:	6e67 000b 6e6f 000b 6e77 000b 6e7f 000b     gn..on..wn...n..

000b9e24 <_ZTV9IPAddress>:
	...
   b9e2c:	6f6b 000b 6f5b 000b 6f5d 000b 7525 7500     ko..[o..]o..%u.u
   b9e3c:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   b9e4c:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   b9e5c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   b9e6c:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   b9e7c:	3a29 0020 5b20 6300 646f 2065 203d 6400     ): . [.code = .d
   b9e8c:	7465 6961 736c 3d20 0020 0a0d 6d00 6c00     etails = ....m.l
   b9e9c:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   b9eac:	0000 0000                                   ....

000b9eb0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b9eb8:	7419 000b 743f 000b 73fd 000b 707b 000b     .t..?t...s..{p..

000b9ec8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b9ed0:	7875 000b 788d 000b 7fcd 000b 40cd 000b     ux...x.......@..

000b9ee0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9ee8:	78a1 000b 78b5 000b 8171 000b 7405 000b     .x...x..q....t..

000b9ef8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b9f00:	7417 000b 744d 000b 7f31 000b 7407 000b     .t..Mt..1....t..

000b9f10 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b9f18:	7415 000b 745b 000b 77dd 000b 747d 000b     .t..[t...w..}t..

000b9f28 <_ZTVN5spark12NetworkClassE>:
	...
   b9f30:	82e5 000b 82ef 000b 82f9 000b 8303 000b     ................
   b9f40:	830d 000b 8319 000b 8325 000b 832d 000b     ........%...-...
   b9f50:	8335 000b 8341 000b 8349 000b 8353 000b     5...A...I...S...
   b9f60:	835d 000b                                   ]...

000b9f64 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9f64:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   b9f74:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   b9f84:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   b9f94:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   b9fa4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b9fb4:	0065 0000                                   e...

000b9fb8 <_ZTV11USARTSerial>:
	...
   b9fc0:	89b5 000b 8a21 000b 89f9 000b 8449 000b     ....!.......I...
   b9fd0:	89c9 000b 89e5 000b 89d7 000b 89f3 000b     ................
   b9fe0:	89b7 000b 89bb 000b                         ........

000b9fe8 <_ZTV9USBSerial>:
	...
   b9ff0:	8a73 000b 8adb 000b 8ab1 000b 8449 000b     s...........I...
   ba000:	8aa3 000b 8a75 000b 8a85 000b 8ad5 000b     ....u...........
   ba010:	8a95 000b 8a6d 000b                         ....m...

000ba018 <_ZSt7nothrow>:
   ba018:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   ba028:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   ba038:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba048:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba058:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   ba068:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba078:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000ba089 <_ctype_>:
   ba089:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba099:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba0a9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba0b9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba0c9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba0d9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba0e9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba0f9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba109:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba18a <link_const_variable_data_end>:
	...

000ba18c <link_constructors_location>:
   ba18c:	000b4805 	.word	0x000b4805
   ba190:	000b6661 	.word	0x000b6661
   ba194:	000b66d9 	.word	0x000b66d9
   ba198:	000b6ca1 	.word	0x000b6ca1
   ba19c:	000b7fbd 	.word	0x000b7fbd
   ba1a0:	000b8435 	.word	0x000b8435
   ba1a4:	000b8539 	.word	0x000b8539
   ba1a8:	000b8909 	.word	0x000b8909
   ba1ac:	000b89a1 	.word	0x000b89a1
